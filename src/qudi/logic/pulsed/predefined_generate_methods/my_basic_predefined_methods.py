# -*- coding: utf-8 -*-

"""
This file contains the Qudi Predefined Methods for sequence generator

Qudi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Qudi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Qudi. If not, see <http://www.gnu.org/licenses/>.use_DD

Copyright (c) the Qudi Developers. See the COPYRIGHT.txt file at the
top-level directory of this distribution and at <https://github.com/Ulm-IQO/qudi/>
"""

import numpy as np
from qudi.logic.pulsed.pulse_objects import PulseBlock, PulseBlockEnsemble, PulseSequence
from qudi.logic.pulsed.pulse_objects import PredefinedGeneratorBase
from qudi.logic.pulsed.sampling_functions import SamplingFunctions
from qudi.util.helpers import csv_2_list
from enum import Enum

"""
General Pulse Creation Procedure:
=================================
- Create at first each PulseBlockElement object
- add all PulseBlockElement object to a list and combine them to a
  PulseBlock object.
- Create all needed PulseBlock object with that idea, that means
  PulseBlockElement objects which are grouped to PulseBlock objects.
- Create from the PulseBlock objects a PulseBlockEnsemble object.
- If needed and if possible, combine the created PulseBlockEnsemble objects
  to the highest instance together in a PulseSequence object.
"""

class HomonuclearDecoupling(Enum):
    WHH4 = ['halftau', 'MWmx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWx', 'halftau']
    WHH8 = ['halftau', 'MWmx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWx', 'halftau',
            'halftau', 'MWmx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWx', 'halftau']
    MREV8xz = ['halftau', 'MWmx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWx', 'halftau',
               'halftau', 'MWx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWmx', 'halftau']
    MREV8yz = ['halftau', 'MWmx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWx', 'halftau',
               'halftau', 'MWmx', 'halftau', 'MWmy', 'tau', 'MWy', 'halftau', 'MWx', 'halftau']
    MREV8z = ['halftau', 'MWx', 'halftau', 'MWmy', 'tau', 'MWy', 'halftau', 'MWmx', 'halftau',
              'halftau', 'MWmx', 'halftau', 'MWy', 'tau', 'MWmy', 'halftau', 'MWx', 'halftau']
    XY8 = ['halftau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau',
           'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'halftau']
    XY16 = ['halftau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau',
           'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'tau',
            'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau',
            'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'halftau']
    CPMG4 = ['halftau', 'piMWx', 'tau', 'piMWx', 'tau', 'piMWx', 'tau', 'piMWx', 'halftau']
    CPMG2 = ['halftau', 'piMWx', 'tau', 'piMWx', 'halftau']
    XY2 = ['halftau', 'piMWx', 'tau', 'piMWy' 'halftau']

class DynamicalDecoupling(Enum):
    XY8 = ['halftau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau',
           'piMWy', 'tau', 'piMWx', 'tau', 'piMWy', 'tau', 'piMWx', 'halftau']
    XY2 = ['halftau', 'piMWx', 'tau', 'piMWy' 'halftau']
    CPMG4 = ['halftau', 'piMWx', 'tau', 'piMWx', 'tau', 'piMWx', 'tau', 'piMWx', 'halftau']
    CPMG2 = ['halftau', 'piMWx', 'tau', 'piMWx', 'halftau']

class StateTomography(Enum):
    State0 = ['NOOP']
    State1 = ['pix']
    State3 = ['pihalfx']
    State4 = ['pihalfy']

class SingleQubitStates(Enum):
    State0 = ['NOOP']
    State1 = ['pix']
    State3 = ['pihalfx']
    State4 = ['pihalfy']

class SingleQubitGates(Enum):
    GateX = ['X']
    GateY = ['Y']
    GateZ = ['Z']
    GateH = ['H']

class TQstates(Enum):
    State00 = ['00']
    State01 = ['01']
    State10 = ['10']
    State11 = ['11']

class Gates(Enum):
    NOOP = ['NOOP']
    ucq1Hx = ['UCQ1pihalfx']
    ucq1Hy = ['UCQ1pihalfy']
    ucq1pi = ['UCQ1pi']
    ucq2Hx = ['UCQ2pihalfx']
    ucq2Hy = ['UCQ2pihalfy']
    ucq2pi = ['UCQ2pi']
    q1CHx = ['Cq1pihalfx']
    q1CHy = ['Cq1pihalfy']
    q1Cpi = ['Cq1pi']
    q2CHx = ['Cq2pihalfx']
    q2CHy = ['Cq2pihalfy']
    q2Cpi = ['Cq2pi']
    q2C0NOT = ['C0q2NOT']
    q2C1NOT = ['C1q2NOT']
    q1phase = ['q1phase']
    q2phase = ['q2phase']
    q1Rxphase = ['q1Rxphase']
    q1Ryphase = ['q1Ryphase']

class TQQPTstates(Enum):
    State00 = ['00']
    State01 = ['01']
    State02 = ['0X']
    State03 = ['0Y']
    State04 = ['10']
    State05 = ['11']
    State06 = ['1X']
    State07 = ['1Y']
    State08 = ['X0']
    State09 = ['X1']
    State10 = ['XX']
    State11 = ['XY']
    State12 = ['Y0']
    State13 = ['Y1']
    State14 = ['YX']
    State15 = ['YY']

class TQQPTReadstates(Enum):
    ReadIZ = ['IZ']
    ReadIX = ['IX']
    ReadIY = ['IY']
    ReadZI = ['ZI']
    ReadZZ = ['ZZ']
    ReadZX = ['ZX']
    ReadZY = ['ZY']
    ReadXI = ['XI']
    ReadXZ = ['XZ']
    ReadXX = ['XX']
    ReadXY = ['XY']
    ReadYI = ['YI']
    ReadYZ = ['YZ']
    ReadYX = ['YX']
    ReadYY = ['YY']

class TQreadout(Enum):
    RO1 = ['RO1']
    RO2 = ['RO2']
    RO3 = ['RO3']
    RO4 = ['RO4']
    RO5 = ['RO5']
    RO6 = ['RO6']


class MyBasicPredefinedGenerator(PredefinedGeneratorBase):
    """

    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    ################################################################################################
    #                             Generation methods for waveforms                                 #
    ################################################################################################
    def generate_laser_on(self, name='laser_on', length=3.0e-6):
        """ Generates Laser on.

        @param str name: Name of the PulseBlockEnsemble
        @param float length: laser duration in seconds

        @return object: the generated PulseBlockEnsemble object.
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # create the laser element
        laser_element = self._get_laser_element(length=length, increment=0)
        # Create block and append to created_blocks list
        laser_block = PulseBlock(name=name)
        laser_block.append(laser_element)
        created_blocks.append(laser_block)
        # Create block ensemble and append to created_ensembles list
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((laser_block.name, 0))
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_pulselaser_on(self, name='p_laser_on', laser_on=20e-9,laser_off=60e-9):
        """ Generates Laser on.

        @param str name: Name of the PulseBlockEnsemble
        @param float length: laser duration in seconds

        @return object: the generated PulseBlockEnsemble object.
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # create the laser element
        laser_block = PulseBlock(name=name)
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_gate_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        created_blocks.append(laser_block)
        # Create block ensemble and append to created_ensembles list
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((laser_block.name, 0))
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences




    def generate_laser_mw_on(self, name='laser_mw_on', length=3.0e-6):
        """ General generation method for laser on and microwave on generation.

        @param string name: Name of the PulseBlockEnsemble to be generated
        @param float length: Length of the PulseBlockEnsemble in seconds

        @return object: the generated PulseBlockEnsemble object.
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # create the laser_mw element
        laser_mw_element = self._get_mw_laser_element(length=length,
                                                      increment=0,
                                                      amp=self.microwave_amplitude,
                                                      freq=self.microwave_frequency,
                                                      phase=0)
        # Create block and append to created_blocks list
        laser_mw_block = PulseBlock(name=name)
        laser_mw_block.append(laser_mw_element)
        created_blocks.append(laser_mw_block)
        # Create block ensemble and append to created_ensembles list
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((laser_mw_block.name, 0))
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_two_digital_high(self, name='digital_high', length=3.0e-6,
                                  digital_channel1='d_ch1', digital_channel2='d_ch1'):
        """ General generation method for laser on and microwave on generation.

        @param string name: Name of the PulseBlockEnsemble to be generated
        @param float length: Length of the PulseBlockEnsemble in seconds

        @return object: the generated PulseBlockEnsemble object.
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        digital_channels = list([digital_channel1, digital_channel2])
        # create the laser_mw element
        trigger_element = self._get_trigger_element(length=length,
                                                    increment=0,
                                                    channels=list(digital_channels))

        # Create block and append to created_blocks list
        laser_mw_block = PulseBlock(name=name)
        laser_mw_block.append(trigger_element)
        created_blocks.append(laser_mw_block)
        # Create block ensemble and append to created_ensembles list
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((laser_mw_block.name, 0))
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_idle(self, name='idle', length=3.0e-6):
        """ Generate just a simple idle ensemble.

        @param str name: Name of the PulseBlockEnsemble to be generated
        @param float length: Length of the PulseBlockEnsemble in seconds

        @return object: the generated PulseBlockEnsemble object.
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # create the laser_mw element
        idle_element = self._get_idle_element(length=length, increment=0)
        # Create block and append to created_blocks list
        idle_block = PulseBlock(name=name)
        idle_block.append(idle_element)
        created_blocks.append(idle_block)
        # Create block ensemble and append to created_ensembles list
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((idle_block.name, 0))
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_rabi(self, name='rabi', tau_start=10.0e-9, tau_step=10.0e-9, laser_on=20.0e-9,
                      laser_off=60.0e-9, num_of_points=50, delay_time=30.0e-6):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the laser_mw element
        mwinit_element = self._get_mw_element(length=self.rabi_period/4,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)
        mw_element = self._get_mw_element(length=tau_start,
                                          increment=tau_step,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_element = self._get_laser_element(length=self.laser_length,
                                                     increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        MWdelay_element = self._get_idle_element(length=delay_time,
                                               increment=0)

        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        # Create block and append to created_blocks list
        rabi_block = PulseBlock(name=name)
        rabi_block.append(MWdelay_element)
        rabi_block.append(mw_element)
        for i, laser_trig in enumerate(laser_block):
            rabi_block.append(laser_trig)

        rabi_block.append(delay_element)
        rabi_block.append(waiting_element)
        created_blocks.append(rabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((rabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # Append ensemble to created_ensembles list
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_rabiRFpi(self, name='rabi', tau_start=10.0e-9, tau_step=10.0e-9, laser_on=20.0e-9,
                      laser_off=60.0e-9, num_of_points=50, RF_freq=5.09685e6, RF_amp=0.02, RF_pi=35.0e-6, delay_time=30.0e-6):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the laser_mw element
        mw_element = self._get_mw_element(length=tau_start,
                                          increment=tau_step,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)

        rf_element = self._get_rf_element(length=RF_pi,
                                          increment=0,
                                          amp=RF_amp,
                                          freq=RF_freq,
                                          phase=0)
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_element = self._get_laser_element(length=self.laser_length,
                                                     increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        MWdelay_element = self._get_idle_element(length=delay_time,
                                               increment=0)

        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        # Create block and append to created_blocks list
        rabi_block = PulseBlock(name=name)
        rabi_block.append(MWdelay_element)
        rabi_block.append(rf_element)
        rabi_block.append(mw_element)
        for i, laser_trig in enumerate(laser_block):
            rabi_block.append(laser_trig)

        rabi_block.append(delay_element)
        rabi_block.append(waiting_element)
        created_blocks.append(rabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((rabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # Append ensemble to created_ensembles list
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DEERNVNV(self, name='DEERNVNV', NV2_freq=2870.0e6, NV2_amp=0.001, NV2_rabiperiod=20.0e-9, tau_fixed=200.0e-9,
                      tau_start = 0.0e-9, tau_step=10.0e-9, num_of_taus=50, alternating=False):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # Create frequency array
        tau_array = tau_start + np.arange(num_of_taus) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_element = self._get_laser_gate_element(length=self.laser_length,
                                                     increment=0)
        delay_element = self._get_delay_gate_element()

        # Create block and append to created_blocks list
        deer_block = PulseBlock(name=name)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)
        pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)
        pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        mw_element = self._get_mw_element(length=NV2_rabiperiod/2,
                                          increment=0,
                                          amp=NV2_amp,
                                          freq=NV2_freq,
                                          phase=0)

        tau1_element = self._get_idle_element(length=tau_fixed + (NV2_rabiperiod/2),
                                                 increment=0)
        tau2_element = self._get_idle_element(length=tau_start,
                                             increment=tau_step)
        tau3_element = self._get_idle_element(length=tau_fixed - tau_start,
                                              increment=-tau_step)




        deer_block.append(pihalf_element)
        deer_block.append(tau1_element)
        deer_block.append(pi_element)
        deer_block.append(tau3_element)
        deer_block.append(mw_element)
        deer_block.append(tau2_element)
        deer_block.append(pihalf_element)
        deer_block.append(laser_element)
        deer_block.append(waiting_element)

        if alternating:
            deer_block.append(pihalf_element)
            deer_block.append(tau1_element)
            deer_block.append(pi_element)
            deer_block.append(tau3_element)
            deer_block.append(mw_element)
            deer_block.append(tau2_element)
            deer_block.append(pi3half_element)
            deer_block.append(laser_element)
            deer_block.append(waiting_element)

        created_blocks.append(deer_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((deer_block.name, num_of_taus - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_taus if alternating else num_of_taus
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('Hz', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_pulsedodmr(self, name='pulsedODMR', freq_start=2870.0e6, freq_step=0.2e6, RF_pi=True,
                            RF_freq=5.09e6, RF_amp=0.02, RF_pilen=30e-6, laser_on=20.0e-9,
                      laser_off=60.0e-9, num_of_points=50):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # Create frequency array
        freq_array = freq_start + np.arange(num_of_points) * freq_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_gate_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)

        rf_element = self._get_rf_element(length=RF_pilen,
                                          increment=0,
                                          amp=RF_amp,
                                          freq=RF_freq,
                                          phase=0)

        pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)

        # Create block and append to created_blocks list
        pulsedodmr_block = PulseBlock(name=name)
        for mw_freq in freq_array:
            mw_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=mw_freq,
                                              phase=0)

            if RF_pi:
                pulsedodmr_block.append(rf_element)
            pulsedodmr_block.append(mw_element)
            for i, laser_trig in enumerate(laser_block):
                pulsedodmr_block.append(laser_trig)
            pulsedodmr_block.append(delay_element)
            pulsedodmr_block.append(waiting_element)
        created_blocks.append(pulsedodmr_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((pulsedodmr_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('Hz', '')
        block_ensemble.measurement_information['labels'] = ('Frequency', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_pulsedodmrf2(self, name='pulsedODMRf2', freq_start=2870.0e6, freq_step=0.2e6,
                            RF_freq=5.09e6, RF_amp=0.02, RF_pilen=30e-6, MW_freq2=1454.0e9, laser_on=20.0e-9,
                      laser_off=60.0e-9, num_of_points=50):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # Create frequency array
        freq_array = freq_start + np.arange(num_of_points) * freq_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_gate_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)

        rf_element = self._get_rf_element(length=RF_pilen,
                                          increment=0,
                                          amp=RF_amp,
                                          freq=RF_freq,
                                          phase=0)

        pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)

        mwf2_element = self._get_mw_element(length=self.rabi_period / 2,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=MW_freq2,
                                          phase=0)

        # Create block and append to created_blocks list
        pulsedodmr_block = PulseBlock(name=name)
        for mw_freq in freq_array:
            mw_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=mw_freq,
                                              phase=0)

            pulsedodmr_block.append(mwf2_element)
            pulsedodmr_block.append(rf_element)

            pulsedodmr_block.append(mw_element)
            for i, laser_trig in enumerate(laser_block):
                pulsedodmr_block.append(laser_trig)
            pulsedodmr_block.append(delay_element)
            pulsedodmr_block.append(waiting_element)
        created_blocks.append(pulsedodmr_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((pulsedodmr_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('Hz', '')
        block_ensemble.measurement_information['labels'] = ('Frequency', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_ramsey(self, name='ramsey', tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50, laser_on=20.0e-9,
                      laser_off=60.0e-9, alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)

        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        delay_element = self._get_delay_gate_element()
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        tau_element = self._get_idle_element(length=tau_start, increment=tau_step)

        # Create block and append to created_blocks list
        ramsey_block = PulseBlock(name=name)
        ramsey_block.append(pihalf_element)
        ramsey_block.append(tau_element)
        ramsey_block.append(pihalf_element)
        for i, laser_trig in enumerate(laser_block):
            ramsey_block.append(laser_trig)
        ramsey_block.append(delay_element)
        ramsey_block.append(waiting_element)
        if alternating:
            ramsey_block.append(pihalf_element)
            ramsey_block.append(tau_element)
            ramsey_block.append(pi3half_element)
            for i, laser_trig in enumerate(laser_block):
                ramsey_block.append(laser_trig)
            ramsey_block.append(delay_element)
            ramsey_block.append(waiting_element)
        created_blocks.append(ramsey_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((ramsey_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_ramsey_from_list(self, name='ramsey', tau_list='[1e-6, 2e-6]', alternating=True):
        """
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        try:
            tau_array = csv_2_list(tau_list)
        except TypeError:
            tau_array = tau_list

        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_element = self._get_laser_element(length=self.laser_length,
                                                     increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        # get pihalf element
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        if alternating:
            if self.microwave_channel.startswith('a'):
                pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=180)
            else:
                pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=0)

        # Create block and append to created_blocks list
        ramsey_block = PulseBlock(name=name)
        for tau in tau_array:
            tau_element = self._get_idle_element(length=tau, increment=0)
            ramsey_block.append(pihalf_element)
            ramsey_block.append(tau_element)
            ramsey_block.append(tau_element)
            ramsey_block.append(pihalf_element)
            ramsey_block.append(laser_element)
            ramsey_block.append(delay_element)
            ramsey_block.append(waiting_element)

            if alternating:
                ramsey_block.append(pihalf_element)
                ramsey_block.append(tau_element)
                ramsey_block.append(pi3half_element)
                ramsey_block.append(laser_element)
                ramsey_block.append(delay_element)
                ramsey_block.append(waiting_element)

        created_blocks.append(ramsey_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((ramsey_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * len(tau_array) if alternating else len(tau_array)
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)
        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_fid_det(self, name='fid_det', tau_start=30.0e-9, tau_step=30.0e-9, num_of_points=100,
                        P1_drive=False, P1_freq1=768.0e6, P1_amp1=0.0289,
                        P1_freq2=790.0e6, P1_amp2=0.039, P1_freq3=910.0e6, P1_amp3=0.0418,
                        P1_freq4=926.0e6, P1_amp4=0.0303, P1_freq5=832.0e6, P1_amp5=0.00,
                        phase_detune=False, detune_freq=1.0e6, laser_on=20.0e-9,
                      laser_off=60.0e-9, alternating=True,):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)

        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)

        ramsey_block = PulseBlock(name=name)
        for tau in tau_array:

            if phase_detune:
                Read_phase_val = self._inst_phase(self.microwave_frequency,
                                             self.microwave_frequency + detune_freq,
                                             0.0,
                                             tau,
                                             0)
            else:
                Read_phase_val = 0

            read_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=Read_phase_val)
            read_alt_element = self._get_mw_element(length=self.rabi_period / 4,
                                                increment=0,
                                                amp=self.microwave_amplitude,
                                                freq=self.microwave_frequency,
                                                phase=Read_phase_val+180)

            if P1_drive:
                P1_freqs = [P1_freq1, P1_freq2, P1_freq3, P1_freq4, P1_freq5]
                P1_amps = [P1_amp1, P1_amp2, P1_amp3, P1_amp4, P1_amp5]
                P1_phases = [0.0, 0.0, 0.0, 0.0, 0.0]
                tau_element = self._get_multiple_mw_element(length=tau,
                                                            increment=0,
                                                            amps=P1_amps,
                                                            freqs=P1_freqs,
                                                            phases=P1_phases)

            else:
                tau_element = self._get_idle_element(length=tau, increment=0)



            # Create block and append to created_blocks list

            ramsey_block.append(pihalf_element)
            ramsey_block.append(tau_element)
            ramsey_block.append(read_element)
            for i, laser_trig in enumerate(laser_block):
                ramsey_block.append(laser_trig)
            ramsey_block.append(delay_element)
            ramsey_block.append(waiting_element)
            if alternating:
                ramsey_block.append(pihalf_element)
                ramsey_block.append(tau_element)
                ramsey_block.append(read_alt_element)
                for i, laser_trig in enumerate(laser_block):
                    ramsey_block.append(laser_trig)
                ramsey_block.append(delay_element)
                ramsey_block.append(waiting_element)
        created_blocks.append(ramsey_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((ramsey_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_hahnecho(self, name='hahn_echo', tau_start=0.0e-6, tau_step=1.0e-6,
                          num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9, alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        delay_element = self._get_delay_gate_element()
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        tau_element = self._get_idle_element(length=tau_start, increment=tau_step)

        # Create block and append to created_blocks list
        hahn_block = PulseBlock(name=name)
        hahn_block.append(pihalf_element)
        hahn_block.append(tau_element)
        hahn_block.append(pi_element)
        hahn_block.append(tau_element)
        hahn_block.append(pihalf_element)
        for i, laser_trig in enumerate(laser_block):
            hahn_block.append(laser_trig)
        hahn_block.append(delay_element)
        hahn_block.append(waiting_element)
        if alternating:
            hahn_block.append(pihalf_element)
            hahn_block.append(tau_element)
            hahn_block.append(pi_element)
            hahn_block.append(tau_element)
            hahn_block.append(pi3half_element)
            for i, laser_trig in enumerate(laser_block):
                hahn_block.append(laser_trig)
            hahn_block.append(delay_element)
            hahn_block.append(waiting_element)
        created_blocks.append(hahn_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((hahn_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_hahnecho_exp(self, name='hahn_echo', tau_start=1.0e-6, tau_end=1.0e-6,
                              num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9, alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        if tau_start == 0.0:
            tau_array = np.geomspace(1e-9, tau_end, num_of_points - 1)
            tau_array = np.insert(tau_array, 0, 0.0)
        else:
            tau_array = np.geomspace(tau_start, tau_end, num_of_points)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                          increment=0,
                                          amp=self.microwave_amplitude,
                                          freq=self.microwave_frequency,
                                          phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)

        # Create block and append to created_blocks list
        hahn_block = PulseBlock(name=name)
        for tau in tau_array:
            tau_element = self._get_idle_element(length=tau, increment=0.0)
            hahn_block.append(pihalf_element)
            hahn_block.append(tau_element)
            hahn_block.append(pi_element)
            hahn_block.append(tau_element)
            hahn_block.append(pihalf_element)
            for i, laser_trig in enumerate(laser_block):
                hahn_block.append(laser_trig)
            hahn_block.append(delay_element)
            hahn_block.append(waiting_element)
            if alternating:
                hahn_block.append(pihalf_element)
                hahn_block.append(tau_element)
                hahn_block.append(pi_element)
                hahn_block.append(tau_element)
                hahn_block.append(pi3half_element)
                for i, laser_trig in enumerate(laser_block):
                    hahn_block.append(laser_trig)
                hahn_block.append(delay_element)
                hahn_block.append(waiting_element)
        created_blocks.append(hahn_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((hahn_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = 2*tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)
        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_t1(self, name='T1', tau_start=1.0e-6, tau_step=1.0e-6,
                    num_of_points=50, alternating=False):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_element = self._get_laser_gate_element(length=self.laser_length,
                                                     increment=0)
        delay_element = self._get_delay_gate_element()
        if alternating:  # get pi element
            pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        tau_element = self._get_idle_element(length=tau_start, increment=tau_step)
        t1_block = PulseBlock(name=name)
        t1_block.append(tau_element)
        t1_block.append(laser_element)
        t1_block.append(delay_element)
        t1_block.append(waiting_element)
        if alternating:
            t1_block.append(pi_element)
            t1_block.append(tau_element)
            t1_block.append(laser_element)
            t1_block.append(delay_element)
            t1_block.append(waiting_element)
        created_blocks.append(t1_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((t1_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)
        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_t1_exponential(self, name='T1_exp', tau_start=1.0e-6, tau_end=1.0e-6,
                                num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9, alternating=False):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        if tau_start == 0.0:
            tau_array = np.geomspace(1e-9, tau_end, num_of_points - 1)
            tau_array = np.insert(tau_array, 0, 0.0)
        else:
            tau_array = np.geomspace(tau_start, tau_end, num_of_points)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        delay_element = self._get_delay_gate_element()
        if alternating:  # get pi element
            pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        t1_block = PulseBlock(name=name)
        for tau in tau_array:
            tau_element = self._get_idle_element(length=tau, increment=0.0)
            t1_block.append(tau_element)
            for i, laser_trig in enumerate(laser_block):
                t1_block.append(laser_trig)
            t1_block.append(delay_element)
            t1_block.append(waiting_element)
            if alternating:
                t1_block.append(pi_element)
                t1_block.append(tau_element)
                for i, laser_trig in enumerate(laser_block):
                    t1_block.append(laser_trig)
                t1_block.append(delay_element)
                t1_block.append(waiting_element)
        created_blocks.append(t1_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((t1_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)
        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_HHamp(self, name='hh_amp', spinlock_length=20e-6, amp_start=0.05, amp_step=0.01,
                       num_of_points=50):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get amplitude array for measurement ticks
        amp_array = amp_start + np.arange(num_of_points) * amp_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element = self._get_delay_gate_element()
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)

        # Create block and append to created_blocks list
        hhamp_block = PulseBlock(name=name)
        for sl_amp in amp_array:
            sl_element = self._get_mw_element(length=spinlock_length,
                                              increment=0,
                                              amp=sl_amp,
                                              freq=self.microwave_frequency,
                                              phase=90)
            hhamp_block.append(pihalf_element)
            hhamp_block.append(sl_element)
            hhamp_block.append(pihalf_element)
            hhamp_block.append(laser_element)
            hhamp_block.append(delay_element)
            hhamp_block.append(waiting_element)

            hhamp_block.append(pi3half_element)
            hhamp_block.append(sl_element)
            hhamp_block.append(pihalf_element)
            hhamp_block.append(laser_element)
            hhamp_block.append(delay_element)
            hhamp_block.append(waiting_element)
        created_blocks.append(hhamp_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((hhamp_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = True
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = amp_array
        block_ensemble.measurement_information['units'] = ('V', '')
        block_ensemble.measurement_information['labels'] = ('MW amplitude', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = 2 * num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_HHtau(self, name='hh_tau', spinlock_amp=0.1, tau_start=1e-6, tau_step=1e-6,
                       num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        sl_element = self._get_mw_element(length=tau_start,
                                          increment=tau_step,
                                          amp=spinlock_amp,
                                          freq=self.microwave_frequency,
                                          phase=90)

        # Create block and append to created_blocks list
        hhtau_block = PulseBlock(name=name)
        hhtau_block.append(pihalf_element)
        hhtau_block.append(sl_element)
        hhtau_block.append(pihalf_element)
        for i, laser_trig in enumerate(laser_block):
            hhtau_block.append(laser_trig)
        hhtau_block.append(delay_element)
        hhtau_block.append(waiting_element)

        hhtau_block.append(pi3half_element)
        hhtau_block.append(sl_element)
        hhtau_block.append(pihalf_element)
        for i, laser_trig in enumerate(laser_block):
            hhtau_block.append(laser_trig)
        hhtau_block.append(delay_element)
        hhtau_block.append(waiting_element)
        created_blocks.append(hhtau_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((hhtau_block.name, num_of_points - 1))

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((hhtau_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = True
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Spinlock time', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = 2 * num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_HHpol(self, name='hh_pol', spinlock_length=20.0e-6, spinlock_amp=0.1,
                       polarization_steps=50):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get steps array for measurement ticks
        steps_array = np.arange(2 * polarization_steps)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element = self._get_delay_gate_element()
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        sl_element = self._get_mw_element(length=spinlock_length,
                                          increment=0,
                                          amp=spinlock_amp,
                                          freq=self.microwave_frequency,
                                          phase=90)

        # Create block for "up"-polarization and append to created_blocks list
        up_block = PulseBlock(name=name + '_up')
        up_block.append(pihalf_element)
        up_block.append(sl_element)
        up_block.append(pihalf_element)
        up_block.append(laser_element)
        up_block.append(delay_element)
        up_block.append(waiting_element)
        created_blocks.append(up_block)

        # Create block for "down"-polarization and append to created_blocks list
        down_block = PulseBlock(name=name + '_down')
        down_block.append(pi3half_element)
        down_block.append(sl_element)
        down_block.append(pi3half_element)
        down_block.append(laser_element)
        down_block.append(delay_element)
        down_block.append(waiting_element)
        created_blocks.append(down_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((up_block.name, polarization_steps - 1))
        block_ensemble.append((down_block.name, polarization_steps - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = steps_array
        block_ensemble.measurement_information['units'] = ('#', '')
        block_ensemble.measurement_information['labels'] = ('Polarization Steps', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = 2 * polarization_steps
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_tau(self, name='xy8_tau', tau_start=0.5e-6, tau_step=0.01e-6, num_of_points=50,
                         xy8_order=4, laser_on=20.0e-9, laser_off=60.0e-9, init_phase=90.0, read_phase=90.0,
                         alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step
        # calculate "real" start length of tau due to finite pi-pulse length
        real_start_tau = max(0, tau_start - self.rabi_period / 2)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        readpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase)
        readaltpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase+180)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalf_element = self._get_idle_element(length=real_start_tau / 2, increment=tau_step / 2)
        tau_element = self._get_idle_element(length=real_start_tau, increment=tau_step)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        xy8_block.append(initpihalf_element)
        xy8_block.append(tauhalf_element)
        for n in range(xy8_order):
            xy8_block.append(pix_element)
            xy8_block.append(tau_element)
            xy8_block.append(piy_element)
            xy8_block.append(tau_element)
            xy8_block.append(pix_element)
            xy8_block.append(tau_element)
            xy8_block.append(piy_element)
            xy8_block.append(tau_element)
            xy8_block.append(piy_element)
            xy8_block.append(tau_element)
            xy8_block.append(pix_element)
            xy8_block.append(tau_element)
            xy8_block.append(piy_element)
            xy8_block.append(tau_element)
            xy8_block.append(pix_element)
            if n != xy8_order - 1:
                xy8_block.append(tau_element)
        xy8_block.append(tauhalf_element)
        xy8_block.append(readpihalf_element)
        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)
        if alternating:
            xy8_block.append(initpihalf_element)
            xy8_block.append(tauhalf_element)
            for n in range(xy8_order):
                xy8_block.append(pix_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(pix_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(pix_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(pix_element)
                if n != xy8_order - 1:
                    xy8_block.append(tau_element)
            xy8_block.append(tauhalf_element)
            xy8_block.append(readaltpihalf_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)
        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points * 2 if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy4_tau(self, name='xy4_tau', tau_start=0.5e-6, tau_step=0.01e-6, num_of_points=50,
                         xy4_order=4, laser_on=20.0e-9, laser_off=60.0e-9, init_phase=90.0, read_phase=90.0,
                         alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step
        # calculate "real" start length of tau due to finite pi-pulse length
        real_start_tau = max(0, tau_start - self.rabi_period / 2)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        readpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase)
        readaltpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase+180)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalf_element = self._get_idle_element(length=real_start_tau / 2, increment=tau_step / 2)
        tau_element = self._get_idle_element(length=real_start_tau, increment=tau_step)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)

        xy8_block.append(initpihalf_element)

        for n in range(1, xy4_order+1):
            if n % 2 !=0:
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
            else:
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
        xy8_block.append(readpihalf_element)
        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)
        if alternating:
            xy8_block.append(initpihalf_element)
            if n % 2 != 0:
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
            else:
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(piy_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pix_element)
                xy8_block.append(tauhalf_element)
        xy8_block.append(readaltpihalf_element)
        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)
        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points * 2 if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy4_order(self, name='xy4_order', half_tau=0.5e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9, init_phase=90.0, read_phase=90.0):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = 1 + np.arange(num_of_points) * 1
        # calculate "real" start length of tau due to finite pi-pulse length
        #real_start_tau = max(0, tau)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        readpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase)
        readaltpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase+180)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalf_element = self._get_idle_element(length=half_tau, increment=0)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)


        pulseseq_list = []
        for n in range(1, num_of_points+1):
            if n % 2 !=0:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            else:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)

            xy8_block.append(initpihalf_element)
            for i, pulse in enumerate(pulseseq_list):
                xy8_block.append(pulse)
            xy8_block.append(readpihalf_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers =  num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy2_order(self, name='xy2_order', half_tau=0.5e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9, init_phase=90.0, read_phase=90.0):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = 1 + np.arange(num_of_points) * 1
        # calculate "real" start length of tau due to finite pi-pulse length
        #real_start_tau = max(0, tau)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        readpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase)
        readaltpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase+180)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalf_element = self._get_idle_element(length=half_tau, increment=0)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)


        pulseseq_list = []
        for n in range(1, num_of_points+1):
            if n % 4 == 1:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            if n % 4 == 2:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            if n % 4 == 3:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
            if n % 4 == 0:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)

            xy8_block.append(initpihalf_element)
            for i, pulse in enumerate(pulseseq_list):
                xy8_block.append(pulse)
            xy8_block.append(readpihalf_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers =  num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy1_order(self, name='xy1_order', half_tau=0.5e-6, multiplicity=1, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9, init_phase=90.0, read_phase=90.0):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = 1 + np.arange(num_of_points) * multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length
        #real_start_tau = max(0, tau)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        readpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase)
        readaltpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase+180)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalf_element = self._get_idle_element(length=half_tau, increment=0)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)


        pulseseq_list = []
        for n in range(1, (num_of_points+1)*multiplicity):
            if n % 8 == 1:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 2:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 3:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 4:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 5:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 6:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 7:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(piy_element)
                pulseseq_list.append(tauhalf_element)
            if n % 8 == 0:
                pulseseq_list.append(tauhalf_element)
                pulseseq_list.append(pix_element)
                pulseseq_list.append(tauhalf_element)

            if n % multiplicity ==0:
                xy8_block.append(initpihalf_element)
                for i, pulse in enumerate(pulseseq_list):
                    xy8_block.append(pulse)
                xy8_block.append(readpihalf_element)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers =  num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_order(self, name='xy8_order', half_tau=0.5e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9, init_phase=90.0, read_phase=90.0):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = 1 + np.arange(num_of_points) * 1
        # calculate "real" start length of tau due to finite pi-pulse length
        #real_start_tau = max(0, tau)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        readpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase)
        readaltpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=read_phase+180)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalf_element = self._get_idle_element(length=half_tau, increment=0)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)


        pulseseq_list = []
        for n in range(1, num_of_points+1):
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(pix_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(piy_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(pix_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(piy_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(piy_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(pix_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(piy_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(tauhalf_element)
            pulseseq_list.append(pix_element)
            pulseseq_list.append(tauhalf_element)

            xy8_block.append(initpihalf_element)
            for i, pulse in enumerate(pulseseq_list):
                xy8_block.append(pulse)
            xy8_block.append(readpihalf_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers =  num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_freq(self, name='xy8_freq', freq_start=0.1e6, freq_step=0.01e6,
                          num_of_points=50, xy8_order=4, alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get frequency array for measurement ticks
        freq_array = freq_start + np.arange(num_of_points) * freq_step
        # get tau array from freq array
        tau_array = 1 / (2 * freq_array)
        # calculate "real" tau array (finite pi-pulse length)
        real_tau_array = tau_array - self.rabi_period / 2
        np.clip(real_tau_array, 0, None, real_tau_array)
        # Convert back to frequency in order to account for clipped values
        freq_array = 1 / (2 * (real_tau_array + self.rabi_period / 2))

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_element = self._get_laser_element(length=self.laser_length, increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        for ii, tau in enumerate(real_tau_array):
            tauhalf_element = self._get_idle_element(length=tau / 2, increment=0)
            tau_element = self._get_idle_element(length=tau, increment=0)
            xy8_block.append(pihalf_element)
            xy8_block.append(tauhalf_element)
            for n in range(xy8_order):
                xy8_block.append(pix_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(pix_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(pix_element)
                xy8_block.append(tau_element)
                xy8_block.append(piy_element)
                xy8_block.append(tau_element)
                xy8_block.append(pix_element)
                if n != xy8_order - 1:
                    xy8_block.append(tau_element)
            xy8_block.append(tauhalf_element)
            xy8_block.append(pihalf_element)
            xy8_block.append(laser_element)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)
            if alternating:
                xy8_block.append(pihalf_element)
                xy8_block.append(tauhalf_element)
                for n in range(xy8_order):
                    xy8_block.append(pix_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(piy_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(pix_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(piy_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(piy_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(pix_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(piy_element)
                    xy8_block.append(tau_element)
                    xy8_block.append(pix_element)
                    if n != xy8_order - 1:
                        xy8_block.append(tau_element)
                xy8_block.append(tauhalf_element)
                xy8_block.append(pi3half_element)
                xy8_block.append(laser_element)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)
        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points * 2 if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('Hz', '')
        block_ensemble.measurement_information['labels'] = ('Frequency', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    ################################################################################################
    #                             Generation methods for sequences                                 #
    ################################################################################################
    def generate_t1_sequencing(self, name='t1_seq', tau_start=1.0e-6, tau_max=1.0e-3,
                               num_of_points=10):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # Get logarithmically spaced steps in multiples of tau_start.
        # Note that the number of points and the position of the last point can change here.
        k_array = np.unique(
            np.rint(np.logspace(0., np.log10(tau_max / tau_start), num_of_points)).astype(int))
        # get tau array for measurement ticks
        tau_array = k_array * tau_start

        # Create the readout PulseBlockEnsemble
        # Get necessary PulseBlockElements
        laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element = self._get_delay_gate_element()
        # Create PulseBlock and append PulseBlockElements
        readout_block = PulseBlock(name='{0}_readout'.format(name))
        readout_block.append(laser_element)
        readout_block.append(delay_element)
        created_blocks.append(readout_block)
        # Create PulseBlockEnsemble and append block to it
        readout_ensemble = PulseBlockEnsemble(name='{0}_readout'.format(name), rotating_frame=False)
        readout_ensemble.append((readout_block.name, 0))
        created_ensembles.append(readout_ensemble)

        if self.sync_channel:
            # Create the last readout PulseBlockEnsemble including a sync trigger
            # Get necessary PulseBlockElements
            sync_element = self._get_sync_element()
            # Create PulseBlock and append PulseBlockElements
            sync_readout_block = PulseBlock(name='{0}_readout_sync'.format(name))
            sync_readout_block.append(laser_element)
            sync_readout_block.append(delay_element)
            sync_readout_block.append(sync_element)
            created_blocks.append(sync_readout_block)
            # Create PulseBlockEnsemble and append block to it
            sync_readout_ensemble = PulseBlockEnsemble(name='{0}_readout_sync'.format(name),
                                                       rotating_frame=False)
            sync_readout_ensemble.append((sync_readout_block.name, 0))
            created_ensembles.append(sync_readout_ensemble)

        # Create the tau/waiting PulseBlockEnsemble
        # Get tau PulseBlockElement
        tau_element = self._get_idle_element(length=tau_start, increment=0)
        # Create PulseBlock and append PulseBlockElements
        tau_block = PulseBlock(name='{0}_tau'.format(name))
        tau_block.append(tau_element)
        created_blocks.append(tau_block)
        # Create PulseBlockEnsemble and append block to it
        tau_ensemble = PulseBlockEnsemble(name='{0}_tau'.format(name), rotating_frame=False)
        tau_ensemble.append((tau_block.name, 0))
        created_ensembles.append(tau_ensemble)

        # Create the PulseSequence and append the PulseBlockEnsemble names as sequence steps
        # together with the necessary parameters.
        t1_sequence = PulseSequence(name=name, rotating_frame=False)
        count_length = 0.0
        for k in k_array:
            t1_sequence.append(tau_ensemble.name)
            t1_sequence[-1].repetitions = int(k) - 1
            count_length += k * self._get_ensemble_count_length(ensemble=tau_ensemble,
                                                                created_blocks=created_blocks)

            if self.sync_channel and k == k_array[-1]:
                t1_sequence.append(sync_readout_ensemble.name)
            else:
                t1_sequence.append(readout_ensemble.name)
            count_length += self._get_ensemble_count_length(ensemble=readout_ensemble,
                                                            created_blocks=created_blocks)
        # Make the sequence loop infinitely by setting the go_to parameter of the last sequence
        # step to the first step.
        t1_sequence[-1].go_to = 1

        # Trigger the calculation of parameters in the PulseSequence instance
        t1_sequence.refresh_parameters()

        # add metadata to invoke settings later on
        t1_sequence.measurement_information['alternating'] = False
        t1_sequence.measurement_information['laser_ignore_list'] = list()
        t1_sequence.measurement_information['controlled_variable'] = tau_array
        t1_sequence.measurement_information['units'] = ('s', '')
        t1_sequence.measurement_information['number_of_lasers'] = len(tau_array)
        t1_sequence.measurement_information['counting_length'] = count_length

        # Append PulseSequence to created_sequences list
        created_sequences.append(t1_sequence)
        return created_blocks, created_ensembles, created_sequences

    def generate_chirpedodmr(self, name='LinearChirpedODMR', mw_freq_center=2870.0e6,
                             freq_range=500.0e6, freq_overlap=20.0e6, num_of_points=50,
                             pulse_length=500e-9, expected_rabi_frequency=30e6, expected_t2=5e-6):
        """
        @param str name: name of Pulse Block Ensemble
        @param float mw_freq_center: central frequency of the chirped ODMR in Hz
        @param float freq_range: target frequency range of the whole ODMR scan in Hz
        @param float freq_overlap: additional 'overlap' frequency range for each chirped pulse,
        i.e. the frequency range of each single chirped pulse is
        (freq_range / num_points) + freq_overlap
        @param float num_of_points: number of chirped pulses, used in the scan
        @param float pulse_length: length of the mw pulse
        @param float expected_rabi_frequency: expected value of the Rabi frequency - used to
        calculate adiabaticity
        @param float expected_t2: expected T2 time - used to check if the chirped pulse is shorter
        than T2

        @return: created_blocks, created_ensembles, created_sequences for the generated pulse
            sequences
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element = self._get_delay_gate_element()

        # Create block and append to created_blocks list
        chirpedodmr_block = PulseBlock(name=name)

        # Create frequency array
        mw_freq_start = mw_freq_center - freq_range / 2.
        mw_freq_incr = freq_range / num_of_points
        freq_array = mw_freq_start + np.arange(num_of_points) * mw_freq_incr + mw_freq_incr / 2.

        if pulse_length > expected_t2:
            self.log.error('The duration of the chirped pulse exceeds expected the T2 time')

        for mw_freq in freq_array:
            mw_element = self._get_mw_element_linearchirp(length=pulse_length,
                                                          increment=0,
                                                          amplitude=self.microwave_amplitude,
                                                          start_freq=(mw_freq - mw_freq_incr / 2.
                                                                      - freq_overlap),
                                                          stop_freq=(mw_freq + mw_freq_incr / 2.
                                                                     + freq_overlap),
                                                          phase=0)
            chirpedodmr_block.append(mw_element)
            chirpedodmr_block.append(laser_element)
            chirpedodmr_block.append(delay_element)
            chirpedodmr_block.append(waiting_element)
        created_blocks.append(chirpedodmr_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((chirpedodmr_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # chirp range
        pulse_freq_range = mw_freq + mw_freq_incr / 2. + freq_overlap - (
                mw_freq - mw_freq_incr / 2. - freq_overlap)

        # chirp rate
        chirp_rate = pulse_freq_range / pulse_length

        # adiabaticity condition
        adiab = 2 * np.pi * expected_rabi_frequency ** 2 / chirp_rate
        # adiab >> 1 is needed for adiabatic evolution. Simulations show that adiab > 5 works very
        # well,
        # adiab > 2 will work but is on the edge, so we impose a check if adiab < 2.5 to give a
        # warning.

        if adiab < 2.5:
            self.log.error(
                'Adiabadicity conditions not matched. Rabi**2/(pulse_freq_range/pulse_length)>>1 is'
                ' not fulfilled,  Rabi**2/(pulse_freq_range/pulse_length) = {}'.format(adiab))
        else:
            self.log.info(
                'Adiabadicity conditions is Rabi**2/(pulse_freq_range/pulse_length) = '
                '{} >> 1'.format(adiab))

        # Approximate expected transfer efficiency in case of perfect adiabaticity for a linear
        # chirp this formula works very well for adiab = 5 and overestimates the efficiency by
        # 5-10% for adiab = 2.5
        approx_transfer_eff_perfect_adiab = 1 - 2 / (
                4 + (pulse_freq_range / expected_rabi_frequency) ** 2)

        self.log.info(
            'Expected transfer efficiency in case of perfect adiabaticity = ' + str(
                approx_transfer_eff_perfect_adiab))

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['labels'] = ('Frequency', '')
        block_ensemble.measurement_information['units'] = ('Hz', '')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_AEchirpedodmr(self, name='AllenEberlyChirpODMR', mw_freq_center=2870.0e6,
                               freq_range=500.0e6,
                               freq_overlap=20.0e6, num_of_points=50, pulse_length=500e-9,
                               truncation_ratio=0.1,
                               expected_rabi_frequency=30e6, expected_t2=5e-6,
                               peak_mw_amplitude=0.25):
        """
        @param str name: name of Pulse Block Ensemble
        @param float mw_freq_center: central frequency of the chirped ODMR in Hz
        @param float freq_range: target frequency range of the whole ODMR scan in Hz
        @param float freq_overlap: additional 'overlap' frequency range for each chirped pulse,
            i.e. the frequency range of each single chirped pulse is (freq_range / num_points) +
            freq_overlap. Truncation is usually negligible for values <0.2.
        @param float num_of_points: number of chirped pulses, used in the scan
        @param float pulse_length: length of the mw pulse
        @param float truncation_ratio: ratio that characterizes the truncation of the chirped pulse
            Specifically, the pulse shape is given by sech(t/ truncation ratio /pulse length)
            truncation_ratio = 0.1 is excellent; the scheme will work for 0.2. Higher values
            truncate the sech pulse and reduce the frequency range of ODMR as the transfer
            efficiency in the wings of the pulse range drops.
        @param float expected_rabi_frequency: expected value of the Rabi frequency - used to
            calculate adiabaticity
        @param float expected_t2: expected T2 time - used to check if the chirped pulse is shorter
            than T2
        @param float peak_mw_amplitude: Peak amplitude of the Allen-Eberly Chirp pulse

        @return: created_blocks, created_ensembles, created_sequences for the generated pulse
            sequences

        Additional information about the Allen-Eberly chirped ODMR
        Chirped ODMR with a pulse, following the Allen-Eberly model: a sech amplitude shape and a
        tanh shaped detuning. The AE pulse has very good properties in terms of adiabaticity and is
        often preferable to the standard Landau-Zener-Stueckelberg-Majorana model with a constant
        amplitude and a linear chirp (see class Chirp). More information about the Allen-Eberly
        model can be found in:
        L. Allen and J. H. Eberly, Optical Resonance and Two-Level Atoms Dover, New York, 1987,
        Analytical solution is given in: F. T. Hioe, Phys. Rev. A 30, 2100 (1984).
        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element = self._get_delay_gate_element()

        # Create block and append to created_blocks list
        chirpedodmr_block = PulseBlock(name=name)

        # Create frequency array
        mw_freq_start = mw_freq_center - freq_range / 2.
        mw_freq_incr = freq_range / num_of_points
        freq_array = mw_freq_start + np.arange(num_of_points) * mw_freq_incr + mw_freq_incr / 2.

        if pulse_length > expected_t2:
            self.log.error('The duration of the chirped pulse exceeds the expected T2 time')

        for mw_freq in freq_array:
            mw_element = self._get_mw_element_AEchirp(length=pulse_length,
                                                      increment=0,
                                                      amp=peak_mw_amplitude,
                                                      start_freq=(mw_freq - mw_freq_incr / 2.
                                                                  - freq_overlap),
                                                      stop_freq=(mw_freq + mw_freq_incr / 2.
                                                                 + freq_overlap),
                                                      phase=0,
                                                      truncation_ratio=truncation_ratio)
            chirpedodmr_block.append(mw_element)
            chirpedodmr_block.append(laser_element)
            chirpedodmr_block.append(delay_element)
            chirpedodmr_block.append(waiting_element)
        created_blocks.append(chirpedodmr_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=False)
        block_ensemble.append((chirpedodmr_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # chirp range
        pulse_freq_range = mw_freq + mw_freq_incr / 2. + freq_overlap - (
                mw_freq - mw_freq_incr / 2. - freq_overlap)

        # chirp rate for the AE model at the moment of level crossing
        chirp_rate_ae = pulse_freq_range / pulse_length / truncation_ratio
        # In comparison to linear chirp, the chirp rate is divided by the truncation_ratio

        # adiabaticity condition for the AE model
        adiab_ae = 2 * np.pi * expected_rabi_frequency ** 2 / chirp_rate_ae
        # adiab_ae >> 1 is needed for adiabatic evolution. Simulations show adiab_ae > 2 will work
        # but is on the edge, so we impose a check if adiab_ae < 2.5 to give a warning.

        if adiab_ae < 2.5:
            self.log.error(
                'Adiabadicity conditions not matched. Rabi**2/(pulse_freq_range/'
                'pulse_length/truncation_ratio)>>1 is not fulfilled,  Rabi**2/(pulse_freq_range / '
                'pulse_length / truncation_ratio) = {}'.format(adiab_ae))
        else:
            self.log.info(
                'Adiabadicity conditions is Rabi**2/'
                '(pulse_freq_range / pulse_length / truncation_ratio) = {} >> 1'.format(adiab_ae))

        # Approximate expected transfer efficiency in case of perfect adiabaticity for a AE pulse
        # this formula works very well for adiab > 2.5
        approx_transfer_eff_perfect_adiab_ae = 1 - 2 / (
                4 + (pulse_freq_range * np.sinh(1 / 2 / truncation_ratio)
                     / expected_rabi_frequency) ** 2)

        self.log.info(
            'Expected transfer efficiency in case of perfect adiabaticity = ' + str(
                approx_transfer_eff_perfect_adiab_ae))

        # add metadata to invoke settings later on
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['labels'] = ('Frequency', '')
        block_ensemble.measurement_information['units'] = ('Hz', '')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_NucRabi(self, name='nucrabi', NV_pi=False, RF_pi=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, Nuc_rabi_freq=5.06e6, Nuc_rabi_amp=0.02, tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)
        RF_element = self._get_rf_element(length=tau_start,
                                          increment=tau_step,
                                          amp=Nuc_rabi_amp,
                                          freq=Nuc_rabi_freq,
                                          phase=0)
        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)
        if NV_pi:
            nucrabi_block.append(MWpi_element)
        if RF_pi:
            nucrabi_block.append(RFpi_element)
        nucrabi_block.append(RF_element)
        if RF_pi:
            nucrabi_block.append(RFpi_element)
        if NV_pi:
            nucrabi_block.append(MWpi_element)
        for i, laser_trig in enumerate(laser_block):
            nucrabi_block.append(laser_trig)

        nucrabi_block.append(delay_element)
        nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_NucRabi2(self, name='nucrabi2', NV_pi=False, RF_pi=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, MW_freq= 5.05e6, MW_amp=0.02,
                         MW_pi_len=100.0e-9, Nuc_rabi_freq=5.06e6, Nuc_rabi_amp=0.02,
                          tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        MWselpi_element = self._get_mw_element(length=MW_pi_len,
                                              increment=0,
                                              amp=MW_amp,
                                              freq=MW_freq,
                                              phase=0)

        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)
        RF_element = self._get_rf_element(length=tau_start,
                                          increment=tau_step,
                                          amp=Nuc_rabi_amp,
                                          freq=Nuc_rabi_freq,
                                          phase=0)
        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)
        if NV_pi:
            nucrabi_block.append(MWselpi_element)
        if RF_pi:
            nucrabi_block.append(RFpi_element)
        nucrabi_block.append(RF_element)
        if RF_pi:
            nucrabi_block.append(RFpi_element)
        if NV_pi:
            nucrabi_block.append(MWselpi_element)
        for i, laser_trig in enumerate(laser_block):
            nucrabi_block.append(laser_trig)

        nucrabi_block.append(delay_element)
        nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_NucSpect2(self, name='nucspect2', NV_pi=False, RF_pi=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, MW_freq= 5.05e6, MW_amp=0.02,
                         MW_pi_len=100.0e-9, freq_start=5.06e6, freq_step=0.50e6, spect_amp=0.02,
                         spect_pi=100e-9, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        freq_array = freq_start + np.arange(num_of_points) * freq_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        MWselpi_element = self._get_mw_element(length=MW_pi_len,
                                              increment=0,
                                              amp=MW_amp,
                                              freq=MW_freq,
                                              phase=0)

        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)

        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)
        for freq in freq_array:
            RF_element = self._get_rf_element(length=spect_pi,
                                              increment=0,
                                              amp=spect_amp,
                                              freq=freq,
                                              phase=0)
            if NV_pi:
                nucrabi_block.append(MWselpi_element)
            if RF_pi:
                nucrabi_block.append(RFpi_element)
            nucrabi_block.append(RF_element)
            if RF_pi:
                nucrabi_block.append(RFpi_element)
            if NV_pi:
                nucrabi_block.append(MWselpi_element)
            for i, laser_trig in enumerate(laser_block):
                nucrabi_block.append(laser_trig)

            nucrabi_block.append(delay_element)
            nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_NucRabiPol(self, name='nucrabirpol', pol=True, NV_pi=False, RF_pi=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, MW_freq= 5.05e6, MW_amp=0.02,
                         MW_pi_len=100.0e-9, Nuc_rabi_freq=5.06e6, Nuc_rabi_amp=0.02, tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        MWselpi_element = self._get_mw_element(length=MW_pi_len,
                                              increment=0,
                                              amp=MW_amp,
                                              freq=MW_freq,
                                              phase=0)

        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)
        RF_element = self._get_rf_element(length=tau_start,
                                          increment=tau_step,
                                          amp=Nuc_rabi_amp,
                                          freq=Nuc_rabi_freq,
                                          phase=0)
        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)
        if pol:
            nucrabi_block.append(MWselpi_element)
            nucrabi_block.append(RFpi_element)
            for i, laser_trig in enumerate(laser_block):
                nucrabi_block.append(laser_trig)
        if NV_pi:
            nucrabi_block.append(MWpi_element)
        if RF_pi:
            nucrabi_block.append(RFpi_element)
        nucrabi_block.append(RF_element)
        nucrabi_block.append(MWselpi_element)
        if RF_pi:
            nucrabi_block.append(RFpi_element)
        if NV_pi:
            nucrabi_block.append(MWpi_element)
        for i, laser_trig in enumerate(laser_block):
            nucrabi_block.append(laser_trig)
        nucrabi_block.append(delay_element)
        nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if pol:
            number_of_lasers = 2 * (num_of_points)
            ignore_list = [x for x in range(0, 2 * (num_of_points), 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_NucFID(self, name='nucFID', NV_pi=False, NV_flip=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50, phase_det=True,
                         detune_freq=20.0e3, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        RFpihalf_element = self._get_rf_element(length= RF_pi_len/2,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)



        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)
        for tau in tau_array:
            if phase_det:
                Read_phase_val = self._inst_phase(RF_freq,
                                             RF_freq + detune_freq,
                                             0.0,
                                             tau,
                                             0)
            else:
                Read_phase_val = 0

            read_element = self._get_rf_element(length=RF_pi_len/2,
                                                   increment=0,
                                                   amp=RF_amp,
                                                   freq=RF_freq,
                                                   phase=Read_phase_val)
            read_alt_element = self._get_rf_element(length=RF_pi_len/2,
                                                increment=0,
                                                amp=RF_amp,
                                                freq=RF_freq,
                                                phase=Read_phase_val+180)


            tau_element = self._get_idle_element(length=tau, increment=0)

            if NV_pi:
                nucrabi_block.append(MWpi_element)
            nucrabi_block.append(RFpihalf_element)
            if NV_flip:
                nucrabi_block.append(MWpi_element)
            nucrabi_block.append(tau_element)
            if NV_flip:
                nucrabi_block.append(MWpi_element)
            nucrabi_block.append(read_element)
            if NV_pi:
                nucrabi_block.append(MWpi_element)
            for i, laser_trig in enumerate(laser_block):
                nucrabi_block.append(laser_trig)
            nucrabi_block.append(delay_element)
            nucrabi_block.append(waiting_element)



        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_NucRabiamp(self, name='nucrabiamp', NV_pi=False, RF_pi=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, Nuc_rabi_freq=5.06e6, Nuc_rabi_pi=30.0e-6, amp_start=0.01, amp_step=0.01, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        amp_array = amp_start + np.arange(num_of_points) * amp_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)

        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)

        for amp in amp_array:
            RF_element = self._get_rf_element(length=Nuc_rabi_pi,
                                              increment=0.0e-9,
                                              amp=amp,
                                              freq=Nuc_rabi_freq,
                                              phase=0)
            if NV_pi:
                nucrabi_block.append(MWpi_element)
            if RF_pi:
                nucrabi_block.append(RFpi_element)
            nucrabi_block.append(RF_element)
            if RF_pi:
                nucrabi_block.append(RFpi_element)
            if NV_pi:
                nucrabi_block.append(MWpi_element)
            for i, laser_trig in enumerate(laser_block):
                nucrabi_block.append(laser_trig)

            nucrabi_block.append(delay_element)
            nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = amp_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_NucSpect(self, name='nucspect', NV_pi=False, RF_pi=False, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, freq_start=5.06e6, freq_step=0.50e6, spect_amp=0.02,
                         spect_pi=100e-9, num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        freq_array = freq_start + np.arange(num_of_points) * freq_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        delay_element = self._get_delay_gate_element()
        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)


        # Create block and append to created_blocks list
        nucspect_block = PulseBlock(name=name)
        for freq in freq_array:
            RF_element = self._get_rf_element(length=spect_pi,
                                              increment=0,
                                              amp=spect_amp,
                                              freq=freq,
                                              phase=0)
            if NV_pi:
                nucspect_block.append(MWpi_element)
            if RF_pi:
                nucspect_block.append(RFpi_element)
            nucspect_block.append(RF_element)
            if RF_pi:
                nucspect_block.append(RFpi_element)
            if NV_pi:
                nucspect_block.append(MWpi_element)
            for i, laser_trig in enumerate(laser_block):
                nucspect_block.append(laser_trig)

            nucspect_block.append(delay_element)
            nucspect_block.append(waiting_element)

        created_blocks.append(nucspect_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucspect_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('RF freq', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences



    def generate_state_tomographySQ(self, name='state_tomosq', state=StateTomography.State0, NV_spin=True,
                                  RF_freq1=5.1e6, RF_amp1=0.02,  RF_freq2=5.1e6, RF_amp2=0.02, RF_pi=20.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = state.value

        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        if NV_spin:
            pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

            pihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=0)
            pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=90)
            NOOP_element = self._get_idle_element(length=0.0e-9,
                                                     increment=0)

            readRabix_element = self._get_mw_element(length=0.0e-9,
                                                  increment=tau_step,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

            readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                     increment=tau_step,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=90)

        else:
            freqs = [RF_freq1, RF_freq2]
            amps = [RF_amp1, RF_amp2]
            phasesx = [0.0, 0.0]
            phasesy = [90.0, 90.0]

            pix_element = self._get_multiple_rf_element(length=RF_pi,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            pihalfx_element = self._get_multiple_rf_element(length=RF_pi/2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            pihalfy_element = self._get_multiple_rf_element(length=RF_pi/2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)

            NOOP_element = self._get_idle_element(length=0.0e-9,
                                                  increment=0)

            readRabix_element = self._get_multiple_rf_element(length=0.0e-9,
                                               increment=tau_step,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            readRabiy_element = self._get_multiple_rf_element(length=0.0e-9,
                                               increment=tau_step,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)

        statetomo_block = PulseBlock(name=name)
        if NV_spin:
            for i, pulse in enumerate(state_value):
                if pulse =='pix':
                    statetomo_block.append(pix_element)
                elif pulse =='pihalfx':
                    statetomo_block.append(pihalfx_element)
                elif pulse =='pihalfy':
                    statetomo_block.append(pihalfy_element)
                elif pulse =='NOOP':
                    statetomo_block.append(NOOP_element)

            statetomo_block.append(readRabix_element)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            if alternating:
                for i, pulse in enumerate(state_value):
                    if pulse == 'pix':
                        statetomo_block.append(pix_element)
                    elif pulse == 'pihalfx':
                        statetomo_block.append(pihalfx_element)
                    elif pulse == 'pihalfy':
                        statetomo_block.append(pihalfy_element)
                    elif pulse == 'NOOP':
                        statetomo_block.append(NOOP_element)

                statetomo_block.append(readRabiy_element)

        else:
            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    statetomo_block.append(pix_element)
                elif pulse == 'pihalfx':
                    statetomo_block.append(pihalfx_element)
                elif pulse == 'pihalfy':
                    statetomo_block.append(pihalfy_element)
                elif pulse == 'NOOP':
                    statetomo_block.append(NOOP_element)

            statetomo_block.append(readRabix_element)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)
            if alternating:
                for i, pulse in enumerate(state_value):
                    if pulse == 'pix':
                        statetomo_block.append(pix_element)
                    elif pulse == 'pihalfx':
                        statetomo_block.append(pihalfx_element)
                    elif pulse == 'pihalfy':
                        statetomo_block.append(pihalfy_element)
                    elif pulse == 'NOOP':
                        statetomo_block.append(NOOP_element)

                statetomo_block.append(readRabiy_element)
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)
                statetomo_block.append(delay_element)

        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_state_tomographyTQ(self, name='state_tomotq', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                    NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9, NV_Cpi_freq2=1.432e9,  phase_gate=90, q1_phasex= 90, q2_phasex=90,
                                    q1Rx_phase_angle = 20,
                                  RF_freq0=5.1e6, RF_amp0=0.02,  RF_freq1=5.1e6, RF_amp1=0.02, cyclesf=9, DD_N=2, rot_phase=0, RF_pi=20.0e-6,
                                  gate_oper1=Gates.q1Cpi, gate_oper2=Gates.q1Cpi, gate_oper3=Gates.q1Cpi,
                                  gate_oper4=Gates.q1Cpi, gate_oper5=Gates.q1Cpi, gate_oper6=Gates.q1Cpi, Read_state=TQstates.State00,
                                  tau_step=4.0e-9, num_of_points=50, Use_DDRF=True, Use_selMW=True, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value=Initial_state.value
        oper1_value = gate_oper1.value
        oper2_value = gate_oper2.value
        oper3_value = gate_oper3.value
        oper4_value = gate_oper4.value
        oper5_value = gate_oper5.value
        oper6_value = gate_oper6.value
        readstate_value = Read_state.value
        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))



        if oper2_value == 'q1phase':
            q1phasex= q1_phasex + phase_gate
            q1phasey = 90.0 + q1_phasex + phase_gate

        if oper2_value == 'q2phase':
            q2phasex= 0.0 + q2_phasex + phase_gate
            q2phasey = 90.0 + q2_phasex + phase_gate
            q2phasesx = [0.0 + q2_phasex + phase_gate, 0.0 + phase_gate]
            q2phasesy = [90.0 + q2_phasex + phase_gate, 90.0 + phase_gate]

        else:
            q1phasex = 0.0 + q1_phasex
            q1phasey = 90.0 + q1_phasex
            q2phasex =0.0 + q2_phasex
            q2phasey = 90.0 + q2_phasex
            q2phasesx = [0.0 + q2_phasex, 0.0 ]
            q2phasesy = [90.0 + q2_phasex, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1Rxphase_element = self._get_mw_element(length=(self.rabi_period / 4)*(q1Rx_phase_angle/90),
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)
        UCQ1Ryphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (q1Rx_phase_angle / 90),
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)

        freqs = [RF_freq0, RF_freq1]
        amps = [RF_amp0, RF_amp1]


        UCQ2pix_element = self._get_multiple_rf_element(length=RF_pi,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=q2phasesx)

        UCQ2pihalfx_element = self._get_multiple_rf_element(length=RF_pi/2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=q2phasesx)
        UCQ2pihalfy_element = self._get_multiple_rf_element(length=RF_pi/2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=q2phasesy)

        CQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                   increment=0,
                                                   amp=NV_Cpi_amp,
                                                   freq=NV_Cpi_freq1,
                                                   phase=q1phasey)

        CQ2pix_element = self._get_rf_element(length= RF_pi,
                                                  increment=0,
                                                  amp=RF_amp0,
                                                  freq=RF_freq0,
                                                  phase=q2phasex)

        CQ2pihalfx_element = self._get_rf_element(length=RF_pi/2,
                                                  increment=0,
                                                  amp=RF_amp0,
                                                  freq=RF_freq0,
                                                  phase=q2phasex)
        CQ2pihalfy_element = self._get_rf_element(length=RF_pi/2,
                                                   increment=0,
                                                   amp=RF_amp0,
                                                   freq=RF_freq0,
                                                   phase=q2phasey)

        cQ2pix_element = self._get_rf_element(length= RF_pi,
                                                  increment=0,
                                                  amp=RF_amp1,
                                                  freq=RF_freq1,
                                                  phase=q2phasex) # selective RF for NV Ms = 1

        cQ2pihalfx_element = self._get_rf_element(length=RF_pi/2,
                                                  increment=0,
                                                  amp=RF_amp1,
                                                  freq=RF_freq1,
                                                  phase=q2phasex) # selective RF for NV Ms = 1
        cQ2pihalfy_element = self._get_rf_element(length=RF_pi/2,
                                                   increment=0,
                                                   amp=RF_amp1,
                                                   freq=RF_freq1,
                                                   phase=q2phasey) # selective RF for NV Ms = 1





        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)

        readRabix13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasex)

        readRabiy13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasey)

        readRabix24_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq2,
                                                 phase=q1phasex)

        readRabiy24_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq2,
                                                 phase=q1phasey)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasey)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)




        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                initialblock_list.append(NOOP_element)
            if state == '01':
                if Use_DDRF:
                    for k, pulse in enumerate(pulse_blockC0q2):
                        initialblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockucq2):
                        initialblock_list.append(pulse)
                else:
                    initialblock_list.append(CQ2pix_element)
            if state == '10':
                initialblock_list.append(CQ1pix_element)
            if state == '11':
                initialblock_list.append(CQ1pix_element)
                if Use_DDRF:
                    for k, pulse in enumerate(pulse_blockC1q2):
                        initialblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockucq2):
                        initialblock_list.append(pulse)
                else:
                    initialblock_list.append(cQ2pix_element)


        opersblock_list=[]
        for i, oper in enumerate(oper1_value):
            if oper == 'NOOP':
                opersblock_list.append(NOOP_element)
            if oper == 'UCQ1pihalfx':
                opersblock_list.append(UCQ1pihalfx_element)
            if oper == 'UCQ1pihalfy':
                opersblock_list.append(UCQ1pihalfy_element)
            if oper == 'UCQ1pi':
                opersblock_list.append(UCQ1pix_element)
            if oper == 'UCQ2pihalfx':
                opersblock_list.append(UCQ2pihalfx_element)
            if oper == 'UCQ2pihalfy':
                opersblock_list.append(UCQ2pihalfy_element)
            if oper == 'UCQ2pi':
                opersblock_list.append(UCQ2pix_element)
            if oper == 'Cq1pihalfx':
                opersblock_list.append(CQ1pihalfx_element)
            if oper == 'Cq1pihalfy':
                opersblock_list.append(CQ1pihalfy_element)
            if oper == 'Cq1pi':
                opersblock_list.append(CQ1pix_element)
            if oper == 'Cq2pihalfx':
                opersblock_list.append(cQ2pihalfx_element)
            if oper == 'Cq2pihalfy':
                opersblock_list.append(cQ2pihalfy_element)
            if oper == 'Cq2pi':
                opersblock_list.append(cQ2pix_element)
            if oper == 'C0q2NOT':
                for k, pulse in enumerate(pulse_blockC0q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'C1q2NOT':
                for k, pulse in enumerate(pulse_blockC1q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'q1Rxphase':
                opersblock_list.append(UCQ1Rxphase_element)
            if oper == 'q1Ryphase':
                opersblock_list.append(UCQ1Ryphase_element)






        for i, oper in enumerate(oper2_value):
            if oper == 'NOOP':
                opersblock_list.append(NOOP_element)
            if oper == 'UCQ1pihalfx':
                opersblock_list.append(UCQ1pihalfx_element)
            if oper == 'UCQ1pihalfy':
                opersblock_list.append(UCQ1pihalfy_element)
            if oper == 'UCQ1pi':
                opersblock_list.append(UCQ1pix_element)
            if oper == 'UCQ2pihalfx':
                opersblock_list.append(UCQ2pihalfx_element)
            if oper == 'UCQ2pihalfy':
                opersblock_list.append(UCQ2pihalfy_element)
            if oper == 'UCQ2pi':
                opersblock_list.append(UCQ2pix_element)
            if oper == 'Cq1pihalfx':
                opersblock_list.append(CQ1pihalfx_element)
            if oper == 'Cq1pihalfy':
                opersblock_list.append(CQ1pihalfy_element)
            if oper == 'Cq1pi':
                opersblock_list.append(CQ1pix_element)
            if oper == 'Cq2pihalfx':
                opersblock_list.append(CQ2pihalfx_element)
            if oper == 'Cq2pihalfy':
                opersblock_list.append(CQ2pihalfy_element)
            if oper == 'Cq2pi':
                opersblock_list.append(CQ2pix_element)
            if oper == 'C0q2NOT':
                for k, pulse in enumerate(pulse_blockC0q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'C1q2NOT':
                for k, pulse in enumerate(pulse_blockC1q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'q1Rxphase':
                opersblock_list.append(UCQ1Rxphase_element)
            if oper == 'q1Ryphase':
                opersblock_list.append(UCQ1Ryphase_element)

        for i, oper in enumerate(oper3_value):
            if oper == 'NOOP':
                opersblock_list.append(NOOP_element)
            if oper == 'UCQ1pihalfx':
                opersblock_list.append(UCQ1pihalfx_element)
            if oper == 'UCQ1pihalfy':
                opersblock_list.append(UCQ1pihalfy_element)
            if oper == 'UCQ1pi':
                opersblock_list.append(UCQ1pix_element)
            if oper == 'UCQ2pihalfx':
                opersblock_list.append(UCQ2pihalfx_element)
            if oper == 'UCQ2pihalfy':
                opersblock_list.append(UCQ2pihalfy_element)
            if oper == 'UCQ2pi':
                opersblock_list.append(UCQ2pix_element)
            if oper == 'Cq1pihalfx':
                opersblock_list.append(CQ1pihalfx_element)
            if oper == 'Cq1pihalfy':
                opersblock_list.append(CQ1pihalfy_element)
            if oper == 'Cq1pi':
                opersblock_list.append(CQ1pix_element)
            if oper == 'Cq2pihalfx':
                opersblock_list.append(CQ2pihalfx_element)
            if oper == 'Cq2pihalfy':
                opersblock_list.append(CQ2pihalfy_element)
            if oper == 'Cq2pi':
                opersblock_list.append(CQ2pix_element)
            if oper == 'C0q2NOT':
                for k, pulse in enumerate(pulse_blockC0q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'C1q2NOT':
                for k, pulse in enumerate(pulse_blockC1q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'q1Rxphase':
                opersblock_list.append(UCQ1Rxphase_element)
            if oper == 'q1Ryphase':
                opersblock_list.append(UCQ1Ryphase_element)

        for i, oper in enumerate(oper4_value):
            if oper == 'NOOP':
                opersblock_list.append(NOOP_element)
            if oper == 'UCQ1pihalfx':
                opersblock_list.append(UCQ1pihalfx_element)
            if oper == 'UCQ1pihalfy':
                opersblock_list.append(UCQ1pihalfy_element)
            if oper == 'UCQ1pi':
                opersblock_list.append(UCQ1pix_element)
            if oper == 'UCQ2pihalfx':
                opersblock_list.append(UCQ2pihalfx_element)
            if oper == 'UCQ2pihalfy':
                opersblock_list.append(UCQ2pihalfy_element)
            if oper == 'UCQ2pi':
                opersblock_list.append(UCQ2pix_element)
            if oper == 'Cq1pihalfx':
                opersblock_list.append(CQ1pihalfx_element)
            if oper == 'Cq1pihalfy':
                opersblock_list.append(CQ1pihalfy_element)
            if oper == 'Cq1pi':
                opersblock_list.append(CQ1pix_element)
            if oper == 'Cq2pihalfx':
                opersblock_list.append(CQ2pihalfx_element)
            if oper == 'Cq2pihalfy':
                opersblock_list.append(CQ2pihalfy_element)
            if oper == 'Cq2pi':
                opersblock_list.append(CQ2pix_element)
            if oper == 'C0q2NOT':
                for k, pulse in enumerate(pulse_blockC0q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'C1q2NOT':
                for k, pulse in enumerate(pulse_blockC1q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'q1Rxphase':
                opersblock_list.append(UCQ1Rxphase_element)
            if oper == 'q1Ryphase':
                opersblock_list.append(UCQ1Ryphase_element)

        for i, oper in enumerate(oper5_value):
            if oper == 'NOOP':
                opersblock_list.append(NOOP_element)
            if oper == 'UCQ1pihalfx':
                opersblock_list.append(UCQ1pihalfx_element)
            if oper == 'UCQ1pihalfy':
                opersblock_list.append(UCQ1pihalfy_element)
            if oper == 'UCQ1pi':
                opersblock_list.append(UCQ1pix_element)
            if oper == 'UCQ2pihalfx':
                opersblock_list.append(UCQ2pihalfx_element)
            if oper == 'UCQ2pihalfy':
                opersblock_list.append(UCQ2pihalfy_element)
            if oper == 'UCQ2pi':
                opersblock_list.append(UCQ2pix_element)
            if oper == 'Cq1pihalfx':
                opersblock_list.append(CQ1pihalfx_element)
            if oper == 'Cq1pihalfy':
                opersblock_list.append(CQ1pihalfy_element)
            if oper == 'Cq1pi':
                opersblock_list.append(CQ1pix_element)
            if oper == 'Cq2pihalfx':
                opersblock_list.append(CQ2pihalfx_element)
            if oper == 'Cq2pihalfy':
                opersblock_list.append(CQ2pihalfy_element)
            if oper == 'Cq2pi':
                opersblock_list.append(CQ2pix_element)
            if oper == 'C0q2NOT':
                for k, pulse in enumerate(pulse_blockC0q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'C1q2NOT':
                for k, pulse in enumerate(pulse_blockC1q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'q1Rxphase':
                opersblock_list.append(UCQ1Rxphase_element)
            if oper == 'q1Ryphase':
                opersblock_list.append(UCQ1Ryphase_element)

        for i, oper in enumerate(oper6_value):
            if oper == 'NOOP':
                opersblock_list.append(NOOP_element)
            if oper == 'UCQ1pihalfx':
                opersblock_list.append(UCQ1pihalfx_element)
            if oper == 'UCQ1pihalfy':
                opersblock_list.append(UCQ1pihalfy_element)
            if oper == 'UCQ1pi':
                opersblock_list.append(UCQ1pix_element)
            if oper == 'UCQ2pihalfx':
                opersblock_list.append(UCQ2pihalfx_element)
            if oper == 'UCQ2pihalfy':
                opersblock_list.append(UCQ2pihalfy_element)
            if oper == 'UCQ2pi':
                opersblock_list.append(UCQ2pix_element)
            if oper == 'Cq1pihalfx':
                opersblock_list.append(CQ1pihalfx_element)
            if oper == 'Cq1pihalfy':
                opersblock_list.append(CQ1pihalfy_element)
            if oper == 'Cq1pi':
                opersblock_list.append(CQ1pix_element)
            if oper == 'Cq2pihalfx':
                opersblock_list.append(CQ2pihalfx_element)
            if oper == 'Cq2pihalfy':
                opersblock_list.append(CQ2pihalfy_element)
            if oper == 'Cq2pi':
                opersblock_list.append(CQ2pix_element)
            if oper == 'C0q2NOT':
                for k, pulse in enumerate(pulse_blockC0q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'C1q2NOT':
                for k, pulse in enumerate(pulse_blockC1q2):
                    opersblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    opersblock_list.append(pulse)
            if oper == 'q1Rxphase':
                opersblock_list.append(UCQ1Rxphase_element)
            if oper == 'q1Ryphase':
                opersblock_list.append(UCQ1Ryphase_element)

        readblock_list=[]

        if Use_selMW:
            for i, state in enumerate(readstate_value):
                if state == '00':
                    readblock_list.append(readRabix13_element)
                if state == '01':
                    readblock_list.append(readRabix24_element)
                if state == '10':
                    readblock_list.append(readRabix13_element)
                if state == '11':
                    readblock_list.append(readRabix24_element)

        else:
            for i, state in enumerate(readstate_value):
                if state == '00':
                    readblock_list.append(NOOP_element)
                    readblock_list.append(readRabix13_element)
                if state == '01':
                    if Use_DDRF:
                        for k, pulse in enumerate(pulse_blockC0q2):
                            readblock_list.append(pulse)
                        for uk, pulse in enumerate(pulse_blockucq2):
                            readblock_list.append(pulse)
                    else:
                        readblock_list.append(CQ2pix_element)
                    readblock_list.append(readRabix13_element)
                if state == '10':
                    readblock_list.append(CQ1pix_element)
                    readblock_list.append(readRabix13_element)
                if state == '11':
                    if Use_DDRF:
                        for k, pulse in enumerate(pulse_blockC1q2):
                            readblock_list.append(pulse)
                        for uk, pulse in enumerate(pulse_blockucq2):
                            readblock_list.append(pulse)
                    else:
                        readblock_list.append(cQ2pix_element)
                    readblock_list.append(CQ1pix_element)
                    readblock_list.append(readRabix13_element)

        readblockalt_list = []

        if Use_selMW:
            for i, state in enumerate(readstate_value):
                if state == '00':
                    readblockalt_list.append(readRabiy13_element)
                if state == '01':
                    readblockalt_list.append(readRabiy24_element)
                if state == '10':
                    readblockalt_list.append(readRabiy13_element)
                if state == '11':
                    readblockalt_list.append(readRabiy24_element)

        else:
            for i, state in enumerate(readstate_value):
                if state == '00':
                    readblockalt_list.append(NOOP_element)
                    readblockalt_list.append(readRabiy13_element)
                if state == '01':
                    if Use_DDRF:
                        for k, pulse in enumerate(pulse_blockC0q2):
                            readblockalt_list.append(pulse)
                        for uk, pulse in enumerate(pulse_blockucq2):
                            readblockalt_list.append(pulse)
                    else:
                        readblockalt_list.append(CQ2pix_element)
                    readblockalt_list.append(readRabiy13_element)
                if state == '10':
                    readblockalt_list.append(CQ1pix_element)
                    readblockalt_list.append(readRabiy13_element)
                if state == '11':
                    if Use_DDRF:
                        for k, pulse in enumerate(pulse_blockC1q2):
                            readblockalt_list.append(pulse)
                        for uk, pulse in enumerate(pulse_blockucq2):
                            readblockalt_list.append(pulse)
                    else:
                        readblockalt_list.append(cQ2pix_element)
                    readblockalt_list.append(CQ1pix_element)
                    readblockalt_list.append(readRabiy13_element)


        for i, pulse in enumerate(initialblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(opersblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(readblock_list):
            statetomo_block.append(pulse)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        statetomo_block.append(delay_element)

        if alternating:
            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(opersblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(readblockalt_list):
                statetomo_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)



        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DP_NucGate(self, name='dp_nucgate', hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, pseudo_MW = False, RFMW=False,
                            gate_n=12, gate_units=50, cond_gate=True, laser_on=20.0e-9, laser_off=60.0e-9, alternating=True):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = 1 + np.arange(gate_units) * 1

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        amps = [self.microwave_amplitude, RF_amp]
        freqs = [self.microwave_frequency, RF_freq]
        phasesx = [0, 0]
        phasesy = [90, 0]
        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        # piy_element = self._get_mw_element(length=self.rabi_period / 2,
        #                                    increment=0,
        #                                    amp=self.microwave_amplitude,
        #                                    freq=self.microwave_frequency,
        #                                    phase=90)

        pseudoMW_element = self._get_mw_element(length=2.0e-9,
                                             increment=0,
                                             amp=0.001,
                                             freq=self.microwave_frequency,
                                             phase=0)
        if RFMW:
            pix_element = self._get_mwrf_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)
            piy_element = self._get_mwrf_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)
        else:
            pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
            piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=90)

        if cond_gate:
            tau = (((2*gate_n) + 1)*np.pi)/(2*np.pi*hypf)
        else:
            tau = ((2*gate_n)*np.pi)/(2*np.pi*hypf)

        tau_array = 2*tau + np.arange(gate_units) * 2*tau

        tauhalf_element = self._get_rf_element(length=tau,
                                           increment=0,
                                           amp=RF_amp,
                                           freq=RF_freq,
                                           phase=0)


        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        for n in range(gate_units):
            pulse_block.append(tauhalf_element)
            pulse_block.append(pix_element)
            pulse_block.append(tauhalf_element)
            pulse_block.append(tauhalf_element)
            pulse_block.append(piy_element)
            pulse_block.append(tauhalf_element)

            if pseudo_MW:
                dpnucgate_block.append(pseudoMW_element)
            dpnucgate_block.append(MWpix_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            dpnucgate_block.append(MWpix_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

            if alternating:
                if pseudo_MW:
                    dpnucgate_block.append(pseudoMW_element)
                dpnucgate_block.append(MWidle_element)
                for i, pulse in enumerate(pulse_block):
                    dpnucgate_block.append(pulse)
                dpnucgate_block.append(MWidle_element)
                for i, laser_trig in enumerate(laser_block):
                    dpnucgate_block.append(laser_trig)
                dpnucgate_block.append(delay_element)
                dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = gate_units * 2 if alternating else gate_units
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_DP_NucGateTau(self, name='dp_nucgatetau', RF_freq=2.56e6, RF_amp=0.02, pseudo_MW = False,
                            DD_order=2, tau_start=300.0e-9, tau_step= 3.0e-9, num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9, alternating=True):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        amps = [self.microwave_amplitude, RF_amp]
        freqs = [self.microwave_frequency, RF_freq]
        phasesx = [0, 0]
        phasesy = [90, 0]

        pseudoMW_element = self._get_mw_element(length=2.0e-9,
                                             increment=0,
                                             amp=0.001,
                                             freq=self.microwave_frequency,
                                             phase=0)

        pix_element = self._get_mwrf_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)
        piy_element = self._get_mwrf_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)


        tauhalf_element = self._get_rf_element(length=tau_start,
                                           increment=tau_step,
                                           amp=RF_amp,
                                           freq=RF_freq,
                                           phase=0)


        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        for n in range(DD_order):
            pulse_block.append(tauhalf_element)
            pulse_block.append(pix_element)
            pulse_block.append(tauhalf_element)
            pulse_block.append(tauhalf_element)
            pulse_block.append(piy_element)
            pulse_block.append(tauhalf_element)

        dpnucgate_block.append(pix_element)
        if pseudo_MW:
            dpnucgate_block.append(pseudoMW_element)
        for i, pulse in enumerate(pulse_block):
            dpnucgate_block.append(pulse)
        dpnucgate_block.append(pix_element)
        for i, laser_trig in enumerate(laser_block):
            dpnucgate_block.append(laser_trig)
        dpnucgate_block.append(delay_element)
        dpnucgate_block.append(waiting_element)

        if alternating:
            if pseudo_MW:
                dpnucgate_block.append(pseudoMW_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points * 2 if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_NitrogenRabi(self, name='nitrogenrabi', cond_gate=False, rabi_freq1=5.06e6, rabi_amp1=0.02,
                              rabi_freq2=2.06e6, rabi_amp2=0.02, tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50,
                              laser_on=20.0e-9, laser_off=60.0e-9, NVpi=True, alternating=False):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        if cond_gate:
            RF_element = self._get_rf_element(length=tau_start,
                                              increment=tau_step,
                                              amp=rabi_amp1,
                                              freq=rabi_freq1,
                                              phase=0)
        else:
            amps = [rabi_amp1, rabi_amp2]
            freqs = [rabi_freq1, rabi_freq2]
            phases = [0, 0]
            RF_element = self._get_multiple_rf_element(length=tau_start,
                                              increment=tau_step,
                                              amps=amps,
                                              freqs=freqs,
                                              phases=phases)

        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)
        if NVpi:
            nucrabi_block.append(MWpi_element)
        nucrabi_block.append(RF_element)
        if NVpi:
            nucrabi_block.append(MWpi_element)
        for i, laser_trig in enumerate(laser_block):
            nucrabi_block.append(laser_trig)
        nucrabi_block.append(delay_element)
        nucrabi_block.append(waiting_element)

        if alternating:
            nucrabi_block.append(RF_element)
            for i, laser_trig in enumerate(laser_block):
                nucrabi_block.append(laser_trig)
            nucrabi_block.append(delay_element)
            nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_homnucdec_n(self, name='HomoDec_N', seq=HomonuclearDecoupling.WHH4, tau_step=4.0e-9, num_of_points=50,
                             Init_phase=0, Read_phase=0, MWx_phase=0, MWy_phase=90,
                             P1_drive=False, P1_Pi=False, P1_Pi_len=20.0e-9,
                             P1_freq1=768.0e6, P1_amp1=0.0286, P1_freq2=790.0e6, P1_amp2=0.039,
                             laser_on=20.0e-9, laser_off=60.0e-9, initP=False, readP=False, NVms1=False,
                             phase_detune=False, detune_freq=1.0e6, alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        seq_value = seq.value
        num_of_taus = (seq_value.count('halftau'))+(2*seq_value.count('tau'))
        num_of_puls = len(seq_value) - num_of_taus
        seq_name = seq.name + '_' + name

        # get tau array for measurement ticks
        tau_array = (num_of_taus * tau_step) + np.arange(num_of_points) * (num_of_taus * tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initMW_element = self._get_mw_element(length=self.rabi_period /4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=Init_phase)
        pi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0.0)

        # readMW_element = self._get_mw_element(length=self.rabi_period /4,
        #                                       increment=0,
        #                                       amp=self.microwave_amplitude,
        #                                       freq=self.microwave_frequency,
        #                                       phase=Read_phase)
        # readMWalt_element = self._get_mw_element(length=self.rabi_period /4,
        #                                          increment=0,
        #                                          amp=self.microwave_amplitude,
        #                                          freq=self.microwave_frequency,
        #                                          phase=Read_phase + 180)

        pulse_phase = {'MWx': MWx_phase, 'MWmx': MWx_phase + 180, 'MWy': MWy_phase, 'MWmy': MWy_phase + 180, 'piMWx': MWx_phase, 'piMWy': MWy_phase}
        pulse_len = {'MWx': (self.rabi_period / 4), 'MWmx': (self.rabi_period / 4), 'MWy': (self.rabi_period / 4), 'MWmy': (self.rabi_period / 4), 'piMWx':(self.rabi_period / 2), 'piMWy': (self.rabi_period / 2)}
        P1_freqs = [P1_freq1, P1_freq2]
        P1_amps = [P1_amp1, P1_amp2]
        P1_phases = [0, 0]

        hndecN_block = PulseBlock(name=name)
        pulseq_list = []
        for n in range(1,num_of_points+1):
            total_tau= ((n-1)*((num_of_taus * tau_step)+(num_of_puls *(self.rabi_period / 4))))+(self.rabi_period / 4)

            if phase_detune:
                Read_phase_val = self._inst_phase(self.microwave_frequency,
                                             self.microwave_frequency + detune_freq,
                                             0.0,
                                             ((num_of_taus * tau_step * n) + (num_of_puls * n * (self.rabi_period / 4)))+(self.rabi_period / 4),
                                             Read_phase)
            else:
                Read_phase_val = Read_phase

            readMW_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=Read_phase_val)
            readMWalt_element = self._get_mw_element(length=self.rabi_period /4,
                                                     increment=0,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=Read_phase_val + 180)

            for i, pulse in enumerate(seq_value):
                if pulse == 'halftau':
                    if P1_drive:

                        halftau_element = self._get_multiple_mw_element(length=tau_step,
                                                                    increment=0,
                                                                    amps=P1_amps,
                                                                    freqs=P1_freqs,
                                                                    phases=P1_phases)
                    else:
                        halftau_element = self._get_idle_element(length=tau_step, increment=0)
                    total_tau= total_tau + tau_step

                    pulseq_list.append(halftau_element)

                elif pulse == 'tau':
                    if P1_drive:

                        tau_element = self._get_multiple_mw_element(length=2*tau_step,
                                                                    increment=0,
                                                                    amps=P1_amps,
                                                                    freqs=P1_freqs,
                                                                    phases=P1_phases)
                        pulseq_list.append(tau_element)

                    elif P1_Pi:
                        tau = ((2*tau_step)-P1_Pi_len )/2

                        tau_element = self._get_idle_element(length=tau, increment=0)

                        P1Pi_element = self._get_multiple_mw_element(length=P1_Pi_len,
                                                                    increment=0,
                                                                    amps=P1_amps,
                                                                    freqs=P1_freqs,
                                                                    phases=P1_phases)
                        pulseq_list.append(tau_element)
                        pulseq_list.append(P1Pi_element)
                        pulseq_list.append(tau_element)

                    else:
                        tau_element = self._get_idle_element(length=2*tau_step, increment=0)
                        pulseq_list.append(tau_element)

                    total_tau= total_tau + (2*tau_step)



                elif pulse == 'MWx' or pulse == 'MWmx' or pulse == 'MWy' or pulse == 'MWmy' or pulse == 'piMWx' or pulse == 'piMWy':

                    pulse_phase_val = pulse_phase[pulse]

                    pulse_element = self._get_mw_element(length=pulse_len[pulse],
                                                        increment=0,
                                                        amp=self.microwave_amplitude,
                                                        freq=self.microwave_frequency,
                                                        phase=pulse_phase_val)
                    total_tau = total_tau + pulse_len[pulse]

                    pulseq_list.append(pulse_element)

            if initP:
                hndecN_block.append(initMW_element)
            if NVms1:
                hndecN_block.append(pi_element)
            for i, pulelm in enumerate(pulseq_list):
                hndecN_block.append(pulelm)
            if NVms1:
                hndecN_block.append(pi_element)
            if readP:
                hndecN_block.append(readMW_element)
            for i, laser_trig in enumerate(laser_block):
                hndecN_block.append(laser_trig)
            hndecN_block.append(delay_element)
            hndecN_block.append(waiting_element)
            if alternating:
                if initP:
                    hndecN_block.append(initMW_element)
                for i, pulelm in enumerate(pulseq_list):
                    hndecN_block.append(pulelm)
                if readP:
                    hndecN_block.append(readMWalt_element)
                for i, laser_trig in enumerate(laser_block):
                    hndecN_block.append(laser_trig)
                hndecN_block.append(delay_element)
                hndecN_block.append(waiting_element)

        created_blocks.append(hndecN_block)

        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((hndecN_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)


        #tau_array_plot = (num_of_taus * tau_step) + np.arange(num_of_points) * (tau_step * num_of_taus)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def exp_round(value, N):
        exponent = np.ceil(np.log10(value))
        return 10 ** exponent * round(value * 10 ** (-exponent), N)

    def _inst_phase(self, freq1, freq2, tauT, tau, phase):
        print('inst',freq1, freq2, tauT, tau, phase)
        instantaneous_phase = (2 * np.pi * freq1 * tauT) * (180.0 / np.pi)
        phase_diff = (2 * np.pi * (freq2 - freq1) * tau) * (180.0 / np.pi)

        return np.mod(instantaneous_phase + phase_diff + phase, 360)

    def generate_xy8RF_tau(self, name='xy8RF_tau', seq=DynamicalDecoupling.XY8, larmor_freq=430.0e3, tau=8.0e-6,
                           freq_start=400e3, freq_step=10.0e3, num_of_points=50, RF_amp=20.0e-3,
                        order=4, laser_on=20.0e-9, laser_off=60.0e-9, alternating=True, rotRF=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        freq_array = freq_start + np.arange(num_of_points) * freq_step

        seq_value = seq.value
        #sequence = np.tile(seq_value,order)
        num_of_taus = (seq_value.count('halftau'))+(2*seq_value.count('tau'))
        num_of_puls = len(seq_value) - num_of_taus

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)

        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        pihalfread_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalfreadalt_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=270)

        tauhalf_element = self._get_idle_element(length=tau / 2, increment=0)
        tau_element = self._get_idle_element(length=tau, increment=0)

        laser_block = []
        laser_reps = int(self.laser_length/(laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        # Create block and append to created_blocks list
        #xy8_block = PulseBlock(name=name)

        pulse_phase = {'MWx': 0, 'MWmx': 0 + 180, 'MWy': 90, 'MWmy': 90 + 180, 'piMWx': 0, 'piMWy': 90}
        pulse_len = {'MWx': (self.rabi_period / 4), 'MWmx': (self.rabi_period / 4), 'MWy': (self.rabi_period / 4), 'MWmy': (self.rabi_period / 4), 'piMWx':(self.rabi_period / 2), 'piMWy': (self.rabi_period / 2)}

        DdecN_block = PulseBlock(name=name)

        for freq in freq_array:
            phase = ((2 * np.pi * (larmor_freq - freq) * (tau+ (self.rabi_period / 2))) * (180.0 / np.pi))
            tau_count=0
            RFrot_element = self._get_rf_element(length=2.0e-9,
                                                          increment=0,
                                                          amp=0,
                                                          freq=freq,
                                                          phase=0)
            pulseq_list = []
            for N in range(order):
                for i, pulse in enumerate(seq_value):
                    if pulse == 'halftau':
                        if i == len(seq_value)-1:
                            tau_count = tau_count + 0
                            #print(len(seq_value))
                            #print(i)
                        else:
                            tau_count = tau_count + 1

                        if tau_count % 2 != 0:
                            RF_phase= (tau_count * phase)+180
                        else:
                            RF_phase = (tau_count * phase)

                        cycles=((2*np.pi*freq)*(tau))//(2*np.pi)
                        tau_pulse=(2*np.pi*cycles)/(2*np.pi*freq)
                        tau_idle=(tau-tau_pulse)/2

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp,
                                                          freq=freq,
                                                          phase=RF_phase)
                        pulseq_list.append(tauidle_element)
                        pulseq_list.append(RFtau_element)
                        pulseq_list.append(tauidle_element)

                    elif pulse == 'tau':
                        tau_count = tau_count + 1

                        if tau_count  % 2 != 0:
                            RF_phase= (tau_count * phase)+180
                        else:
                            RF_phase = tau_count*phase

                        cycles=((2*np.pi*freq)*(2*tau))//(2*np.pi)
                        tau_pulse=(2*np.pi*cycles)/(2*np.pi*freq)
                        tau_idle=(2*tau-tau_pulse)/2

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2*tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp,
                                                          freq=freq,
                                                          phase=RF_phase)
                        pulseq_list.append(tauidle_element)
                        pulseq_list.append(RFtau_element)
                        pulseq_list.append(tauidle_element)

                    elif pulse == 'MWx' or pulse == 'MWmx' or pulse == 'MWy' or pulse == 'MWmy' or pulse == 'piMWx' or pulse == 'piMWy':

                        pulse_phase_val = pulse_phase[pulse]

                        pulse_element = self._get_mw_element(length=pulse_len[pulse],
                                                             increment=0,
                                                             amp=self.microwave_amplitude,
                                                             freq=self.microwave_frequency,
                                                             phase=pulse_phase_val)
                        pulseq_list.append(pulse_element)


            if rotRF:
                DdecN_block.append(RFrot_element)
            DdecN_block.append(pihalf_element)
            for i, pulelm in enumerate(pulseq_list):
                DdecN_block.append(pulelm)
            DdecN_block.append(pihalfread_element)
            for i, laser_trig in enumerate(laser_block):
                DdecN_block.append(laser_trig)
            DdecN_block.append(delay_element)
            DdecN_block.append(waiting_element)
            if alternating:
                if rotRF:
                    DdecN_block.append(RFrot_element)
                DdecN_block.append(pihalf_element)
                for i, pulelm in enumerate(pulseq_list):
                    DdecN_block.append(pulelm)
                DdecN_block.append(pihalfreadalt_element)
                for i, laser_trig in enumerate(laser_block):
                    DdecN_block.append(laser_trig)
                DdecN_block.append(delay_element)
                DdecN_block.append(waiting_element)

        created_blocks.append(DdecN_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((DdecN_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points * 2 if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_initFID(self, name='xy8_init', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_start=20e-9, tau_step=20.0e-9,
                          num_of_points=50, init_ms1=True, polariz=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = (tau_start) + np.arange(num_of_points) * (tau_step)
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase)
        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau_start, increment=tau_step)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        pihalfX_list.append(tauhalfX_element)
        for n in range(pihalfX_order):
            if n % 2 != 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            else:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order + 1):
            if m % 2 != 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            else:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        if init_ms1:
            xy8_block.append(pix_element)
        if polariz:
            #for i, laser_trig in enumerate(laser_block):
            #    xy8_block.append(laser_trig)

            xy8_block.append(initpihalf_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            if pihalf_after_x:
                xy8_block.append(pihalfafterX_element)

            for i, zopr in enumerate(Z_list):
                xy8_block.append(zopr)

            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)
        xy8_block.append(pihalf_element)
        xy8_block.append(tau_element)
        xy8_block.append(pihalf_element)

        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, num_of_points - 1))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * num_of_points
            ignore_list = [x for x in range(0, 2 * num_of_points, 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_initgate(self, name='xy8_init', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9, num_of_points=50,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = (1) + np.arange(num_of_points)
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau_gate, increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseq_list = []

        for k in range(1, num_of_points+1):
            if k % 4 == 1:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 2:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 3:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 4 == 0:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)

            if polariz:
                xy8_block.append(initpihalf_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                if pihalf_after_x:
                    xy8_block.append(pihalfafterX_element)

                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if init_ms1:
                xy8_block.append(pix_element)
            for i, gate in enumerate(pulseq_list):
                xy8_block.append(gate)
            if init_ms1:
                xy8_block.append(pix_element)

            if readZ:
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
            if readY or readZ:
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)
            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * num_of_points
            ignore_list = [x for x in range(0, 2 * num_of_points, 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_initgatetau(self, name='xy8_init', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, X_order=8, tau_start=1.23e-6, tau_step=1.0e-9, num_of_points=50,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = (tau_start) + np.arange(num_of_points)*tau_step
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        for tau in tau_array:
            tau_element = self._get_idle_element(length=tau, increment=0)
            pulseq_list = []

            for k in range(1, num_of_points+1):
                if k % 4 == 1:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                if k % 4 == 2:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                if k % 4 == 3:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)
                if k % 4 == 0:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)

            if polariz:
                xy8_block.append(initpihalf_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                if pihalf_after_x:
                    xy8_block.append(pihalfafterX_element)

                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if init_ms1:
                xy8_block.append(pix_element)
            for i, gate in enumerate(pulseq_list):
                xy8_block.append(gate)
            if init_ms1:
                xy8_block.append(pix_element)

            if readZ:
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
            if readY or readZ:
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)
            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * num_of_points
            ignore_list = [x for x in range(0, 2 * num_of_points, 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_xy2_initgate(self, name='xy2_init', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9, num_of_points=50, multiplicity=1,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array =  np.arange(num_of_points + 1)*multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau_gate, increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseq_list = []

        for k in range(1, (num_of_points*multiplicity)+1):
            if k % multiplicity ==0 or k==1:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    if pihalf_after_x:
                        xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if init_ms1:
                    xy8_block.append(pix_element)
                for i, gate in enumerate(pulseq_list):
                    xy8_block.append(gate)
                if init_ms1:
                    xy8_block.append(pix_element)

                if readZ:
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                if readY or readZ:
                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)
            if k % 4 == 1:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 2:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 3:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 4 == 0:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points+1)
            ignore_list = [x for x in range(0, 2 * (num_of_points+1), 2)]
        else:
            number_of_lasers = num_of_points +1
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy2_initgatetauscan(self, name='xy2_inittauscan', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9, tau_step=0.5e-9, num_of_points=50, Pi_order=12,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array =  tau_gate + np.arange(num_of_points + 1)*tau_step
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)


        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        for tau in tau_array:
            pulseq_list = []
            tau_element = self._get_idle_element(length=tau, increment=0)
            for k in range(1, Pi_order + 1):
                if k % 4 == 1:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                if k % 4 == 2:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                if k % 4 == 3:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)
                if k % 4 == 0:
                    pulseq_list.append(tau_element)
                    pulseq_list.append(piy_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(tau_element)
                    pulseq_list.append(pix_element)
                    pulseq_list.append(tau_element)

            if polariz:
                xy8_block.append(initpihalf_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                if pihalf_after_x:
                    xy8_block.append(pihalfafterX_element)

                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if init_ms1:
                xy8_block.append(pix_element)
            for i, gate in enumerate(pulseq_list):
                xy8_block.append(gate)
            if init_ms1:
                xy8_block.append(pix_element)

            if readZ:
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
            if readY or readZ:
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)
            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points+1)
            ignore_list = [x for x in range(0, 2 * (num_of_points+1), 2)]
        else:
            number_of_lasers = num_of_points +1
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy4_initgate(self, name='xy4_init', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9, num_of_points=50,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = (1) + np.arange(num_of_points)
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau_gate, increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 2 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 2 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 2 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 2 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseq_list = []

        for k in range(1, num_of_points+1):
            if k % 2 == 1:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 2 == 0:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)

            if polariz:
                xy8_block.append(initpihalf_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                if pihalf_after_x:
                    xy8_block.append(pihalfafterX_element)

                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if init_ms1:
                xy8_block.append(pix_element)
            for i, gate in enumerate(pulseq_list):
                xy8_block.append(gate)
            if init_ms1:
                xy8_block.append(pix_element)

            if readZ:
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
            if readY or readZ:
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)
            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * num_of_points
            ignore_list = [x for x in range(0, 2 * num_of_points, 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_xy8_initFID(self, name='xy8_initFID', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau=20e-9, num_of_points=50,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = (tau) + np.arange(num_of_points)*tau
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau, increment=tau)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseq_list = []

        if polariz:
            xy8_block.append(initpihalf_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            if pihalf_after_x:
                xy8_block.append(pihalfafterX_element)

            for i, zopr in enumerate(Z_list):
                xy8_block.append(zopr)

            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        if init_ms1:
            xy8_block.append(pix_element)
        for i, init in enumerate(pihalfX_list):
            xy8_block.append(init)

        xy8_block.append(tau_element)
        if init_ms1:
            xy8_block.append(pix_element)

        if readZ:
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
        if readY or readZ:
            for i, zopr in enumerate(Z_list):
                xy8_block.append(zopr)
        xy8_block.append(pihalf_read1_element)
        for i, init in enumerate(pihalfX_list):
            xy8_block.append(init)
        xy8_block.append(pihalf_read2_element)
        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name,  num_of_points - 1))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * num_of_points
            ignore_list = [x for x in range(0, 2 * num_of_points, 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_corr(self, name='xy8_corr', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, tau=20e-9, num_of_points=50,
                         read_phase1=0, read_phase2=90, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = (tau) + np.arange(num_of_points)*tau
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau, increment=tau)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        pulseq_list = []

        xy8_block.append(initpihalf_element)
        for i, init in enumerate(pihalfX_list):
            xy8_block.append(init)
        xy8_block.append(pihalfafterX_element)
        xy8_block.append(tau_element)
        xy8_block.append(pihalf_read1_element)
        for i, init in enumerate(pihalfX_list):
            xy8_block.append(init)
        xy8_block.append(pihalf_read2_element)
        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name,  num_of_points - 1))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on

        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = num_of_points
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy_initgate(self, name='xy_init', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9, multiplicity=1, num_of_points=50,
                         init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = (1) + np.arange(num_of_points)*multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 90)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        tau_element = self._get_idle_element(length=tau_gate, increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 8 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 4:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 5:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 6:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 7:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 8 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 8 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 4:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 5:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 6:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 7:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 8 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseq_list = []

        for k in range(1, (num_of_points+1)*multiplicity):
            if k % 8 == 1:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 8 == 2:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 8 == 3:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 8 == 4:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 8 == 5:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 8 == 6:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 8 == 7:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 8 == 0:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)

            if k % multiplicity ==0:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    if pihalf_after_x:
                        xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if init_ms1:
                    xy8_block.append(pix_element)
                for i, gate in enumerate(pulseq_list):
                    xy8_block.append(gate)
                if init_ms1:
                    xy8_block.append(pix_element)

                if readZ:
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                if readY or readZ:
                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * num_of_points
            ignore_list = [x for x in range(0, 2 * num_of_points, 2)]
        else:
            number_of_lasers = num_of_points
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_xy8_freeprec(self, name='xy8_freeprec', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4, pihalf_after_x=True,
                          pihalf_after_x_phase=0, tau_start=0.01e-6, tau_step=20e-9, num_of_points=50,
                         read_phase=180, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = (tau_start) + np.arange(num_of_points)*tau_step
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=read_phase)


        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)

        tau_element = self._get_idle_element(length=tau_start, increment=tau_step)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 2 !=0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            else:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        xy8_block.append(initpihalf_element)
        for i, init in enumerate(pihalfX_list):
            xy8_block.append(init)
        if pihalf_after_x:
            xy8_block.append(pihalfafterX_element)
        xy8_block.append(tau_element)
        xy8_block.append(initpihalf_element)
        for i, init in enumerate(pihalfX_list):
            xy8_block.append(init)
        xy8_block.append(pihalf_read_element)
        for i, laser_trig in enumerate(laser_block):
            xy8_block.append(laser_trig)
        xy8_block.append(delay_element)
        xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, num_of_points - 1))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_NucRabiTest(self, name='nucrabi', NV_pi=False, RF_pi=True, RF_freq= 5.05e6, RF_amp=0.02,
                         RF_pi_len=100.0e-9, Nuc_rabi_freq=5.06e6, Nuc_rabi_amp=0.02, tau_start=1.0e-6, tau_step=1.0e-6, num_of_points=50,
                         laser_on=20.0e-9, laser_off=60.0e-9, alternating=True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpi_element = self._get_mw_element(length=self.rabi_period / 2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        RFpi_element = self._get_rf_element(length= RF_pi_len,
                                            increment=0,
                                            amp=RF_amp,
                                            freq=RF_freq,
                                            phase=0)
        RFx_element = self._get_rf_element(length=tau_start,
                                          increment=tau_step,
                                          amp=Nuc_rabi_amp,
                                          freq=Nuc_rabi_freq,
                                          phase=0)

        RFy_element = self._get_rf_element(length=tau_start,
                                           increment=tau_step,
                                           amp=Nuc_rabi_amp,
                                           freq=Nuc_rabi_freq,
                                           phase=90)

        # Create block and append to created_blocks list
        nucrabi_block = PulseBlock(name=name)

        if RF_pi:
            nucrabi_block.append(RFpi_element)

        if NV_pi:
            nucrabi_block.append(MWpi_element)

        nucrabi_block.append(RFx_element)
        if NV_pi:
            nucrabi_block.append(MWpi_element)

        for i, laser_trig in enumerate(laser_block):
            nucrabi_block.append(laser_trig)

        nucrabi_block.append(delay_element)
        nucrabi_block.append(waiting_element)

        if alternating:
            if RF_pi:
                nucrabi_block.append(RFpi_element)

            if NV_pi:
                nucrabi_block.append(MWpi_element)

            nucrabi_block.append(RFy_element)
            if NV_pi:
                nucrabi_block.append(MWpi_element)

            for i, laser_trig in enumerate(laser_block):
                nucrabi_block.append(laser_trig)

            nucrabi_block.append(delay_element)
            nucrabi_block.append(waiting_element)

        created_blocks.append(nucrabi_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((nucrabi_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_Orderscan(self, name='ddrf_orderscan',NV_ms1=True, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, rot_phase=0,
                            num_of_points=50, incl_pi_len = False, cond_gate=True, RF_erf=True, rise_time=50.0e-9, Init_pihalf=True,
                                Init_phase=90, Read_phase=90, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = 2*tau + np.arange(num_of_points) * 2*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)


        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        tot_tau =  (self.rabi_period / 2)
        tau_count = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau + (self.rabi_period / 4),
                                     0.0)
        else:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau,
                                     0.0)
        print(f'phase: {phase:.3f}')
        for n in range(1, num_of_points+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau
                    #k=1
                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase) +rot_phase , 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase , 360)
                    print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')
                    #print(n, tau_count, phase, RF_phase)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)

                    else:
                        RFtau_element = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                else:
                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase,
                                                             rise_time=rise_time)

                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=2


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=3


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=4
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=5


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=6


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=7


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=8

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=9


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length= tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau
            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=10


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=11

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=12

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                print(f'tau_count: {tau_count}, RF_phase: {RF_phase:.3f}')


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)

                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            if Init_pihalf:
                dpnucgate_block.append(self._get_mw_element(length=self.rabi_period / 4,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=Init_phase))
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            if Init_pihalf:
                dpnucgate_block.append(self._get_mw_element(length=self.rabi_period / 4,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=Read_phase))
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_Orderscan_test(self, name='ddrf_orderscantest',NV_ms1=True, RF_freq0=2.56e6, RF_amp0=0.02, RF_phase0=0,
                                     RF_duration=20.0e-6, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, rot_phase=0,
                            num_of_points=50, incl_pi_len = False, cond_gate=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = 2*tau + np.arange(num_of_points) * 2*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        tot_tau =  (self.rabi_period / 2)
        tau_count = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau + (self.rabi_period / 4),
                                     0.0)
        else:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau,
                                     0.0)
        for n in range(1, num_of_points+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau

                    #k=1


                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase) +rot_phase , 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase , 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2*tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                else:
                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=2


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=3


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=4


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=5


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=6


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=7


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=8

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=9


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length= tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau
            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=10


                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=11

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=12

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            RF_element = self._get_rf_element(length=RF_duration,
                                                 increment=0,
                                                 amp=RF_amp0,
                                                 freq=RF_freq0,
                                                 phase=RF_phase0)

            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            dpnucgate_block.append(RF_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_OrderscanCal(self, name='ddrf_orderscanCal',NV_ms1=True, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, DDRF_Pi_N = 8, rot_phase=0,
                            num_of_points=50, incl_pi_len = False, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = 2*tau + np.arange(num_of_points) * 2*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)

        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau + (self.rabi_period / 4),
                                     0.0)
        else:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau,
                                     0.0)
        pulse_blockc = []
        tau_countc = 1
        for n in range(1, int(DDRF_Pi_N/2)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockc[len(pulse_blockc)-3:len(pulse_blockc)]

                    #k=1
                    if tau_countc % 2 != 0:
                        RF_phase = np.mod(((tau_countc-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase , 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2*tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_blockc.append(tauidle_element)
                    pulse_blockc.append(RFtau_element)
                    pulse_blockc.append(tauidle_element)
                else:
                    if tau_countc % 2 != 0:
                        RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_blockc.append(tauidle_element)
                    pulse_blockc.append(RFtau_element)
                    pulse_blockc.append(tauidle_element)

                pulse_blockc.append(MWpix_element)
                tau_countc = tau_countc + 1

                #k=2
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

                pulse_blockc.append(MWpiy_element)
                tau_countc = tau_countc + 1

                #k=3
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

            if n % 4 == 2:

                del pulse_blockc[len(pulse_blockc)-3:len(pulse_blockc)]
                # k=4
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

                pulse_blockc.append(MWpix_element)
                tau_countc = tau_countc + 1

                #k=5

                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)


                pulse_blockc.append(MWpiy_element)
                tau_countc = tau_countc + 1

                #k=6
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockc[len(pulse_blockc)-3:len(pulse_blockc)]

                #k=7
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)


                pulse_blockc.append(MWpiy_element)
                tau_countc = tau_countc + 1

                #k=8
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

                pulse_blockc.append(MWpix_element)
                tau_countc = tau_countc + 1

                #k=9
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length= tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockc[len(pulse_blockc)-3:len(pulse_blockc)]
                #k=10
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

                pulse_blockc.append(MWpiy_element)
                tau_countc = tau_countc + 1

                #k=11
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

                pulse_blockc.append(MWpix_element)
                tau_countc = tau_countc + 1

                #k=12
                if tau_countc % 2 != 0:
                    RF_phase = np.mod(((tau_countc-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockc.append(tauidle_element)
                pulse_blockc.append(RFtau_element)
                pulse_blockc.append(tauidle_element)

        pulse_blockuc = []
        tau_countuc = 2*(int(DDRF_Pi_N / 2))+1
        for n in range(1, int(DDRF_Pi_N / 2) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockuc[len(pulse_blockuc) - 3:len(pulse_blockuc)]

                    # k=1

                    RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_blockuc.append(tauidle_element)
                    pulse_blockuc.append(RFtau_element)
                    pulse_blockuc.append(tauidle_element)
                else:

                    RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_blockuc.append(tauidle_element)
                    pulse_blockuc.append(RFtau_element)
                    pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

            if n % 4 == 2:

                del pulse_blockuc[len(pulse_blockuc) - 3:len(pulse_blockuc)]
                # k=4

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5


                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockuc[len(pulse_blockuc) - 3:len(pulse_blockuc)]

                # k=7

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockuc[len(pulse_blockuc) - 3:len(pulse_blockuc)]
                # k=10

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

                pulse_blockuc.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12

                RF_phase = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_blockuc.append(tauidle_element)
                pulse_blockuc.append(RFtau_element)
                pulse_blockuc.append(tauidle_element)

        total_pulseblock = []
        for k in range(1, num_of_points+1):
            for i, pulse in enumerate(pulse_blockc):
                total_pulseblock.append(pulse)
            for i, pulse in enumerate(pulse_blockuc):
                total_pulseblock.append(pulse)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, pulse in enumerate(total_pulseblock):
                dpnucgate_block.append(pulse)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_DDrf_Orderscan2(self, name='ddrf_orderscan2',NV_ms1=True, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, tau=10.0e-6, rot_phase=0,
                            num_of_points=50, cond_gate=True, RF_erf=True, rise_time=50.0e-9, chirp=False, bandwidth=5.0e3,
                            test_mode=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        #tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = 2*tau + np.arange(num_of_points) * 2*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        if test_mode:
            freqs = [self.microwave_frequency, hypf]
            amps = [self.microwave_amplitude, 0.02]
            phasesx = [0,0]
            phasesy = [90, 0]

            MWpix_element = self._get_multiple_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            MWpiy_element = self._get_multiple_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)

            MWidle_element = self._get_mw_element(length=self.rabi_period / 2,
                                                   increment=0,
                                                   amp=0.02,
                                                   freq=hypf,
                                                   phase=0)


        else:
            MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
            MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)

            MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        tot_tau =  (self.rabi_period / 2)
        tau_count = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        for n in range(1, num_of_points+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau

                    #k=1
                    phase = self._inst_phase(RF_freq,
                                             hypf,
                                             0.0,
                                             tau,
                                             0.0)

                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase) +rot_phase , 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase , 360)

                    #print(n, tau_count, phase, RF_phase)
                    if test_mode:
                        tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                               increment=0,
                                                               amp=0.02,
                                                               freq=hypf,
                                                               phase=0)
                    else:
                        tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            start_freq=RF_freq - bandwidth,
                                                            stop_freq=RF_freq + bandwidth,
                                                            phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                else:

                    phase = self._inst_phase(RF_freq,
                                             hypf,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    #print(n, tau_count, phase, RF_phase)
                    if test_mode:
                        tauidle_element = self._get_rf_element(length=tau_idle,
                                                               increment=0,
                                                               amp=0.02,
                                                               freq=hypf,
                                                               phase=0)
                    else:
                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase,
                                                             rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=2
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=3
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=4
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=5
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=6
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=7
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=8
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=9
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length= tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau
            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=10
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)

                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=11
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=12
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)

                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_DD_Orderscan(self, name='dd_orderscan',NV_ms1=True, tau=2.317e-6,
                            num_of_points=50, Init_pulse=True, Init_phase=90, Read_phase=90, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks

        tau_array = 2*tau + np.arange(num_of_points) * 2*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWinit_element = self._get_mw_element(length=self.rabi_period / 4,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=Init_phase)
        MWread_element = self._get_mw_element(length=self.rabi_period / 4,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=Read_phase)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        tot_tau =  (self.rabi_period / 2)
        tau_count = 1
        tau_pulse = tau
        tau_idle = ((tau) - tau_pulse) / 2
        for n in range(1, num_of_points+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau

                    #k=1
                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    tau_element = self._get_idle_element(length=2 * tau, increment=0)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(tau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                else:
                    tauidle_element = self._get_idle_element(length=1 * tau_idle, increment=0)
                    tau_element = self._get_idle_element(length=1 * tau, increment=0)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(tau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=2
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=3
                tauidle_element = self._get_idle_element(length=1 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=1 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=4
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=5
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=6
                tauidle_element = self._get_idle_element(length=1 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=1 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=7
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=8
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=9
                tauidle_element = self._get_idle_element(length=1 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=1 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau
            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=10
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=11
                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=2 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=12
                tauidle_element = self._get_idle_element(length=1 * tau_idle, increment=0)
                tau_element = self._get_idle_element(length=1 * tau, increment=0)

                pulse_block.append(tauidle_element)
                pulse_block.append(tau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            if Init_pulse:
                dpnucgate_block.append(MWinit_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            if Init_pulse:
                dpnucgate_block.append(MWread_element)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)

            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_DDrf_OrderRabi(self, name='ddrf_orderrabi', NV_ms1=True, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, rot_phase=0,
                            DD_order=5, cond_gate=True, RF_erf=True, rise_time=50.0e-9, chirp=False, bandwidth=5.0e3,
                            test_mode=True, tau_start=4.0e-6, tau_step=4.0e-6, num_of_points=50, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = tau_start + np.arange(num_of_points) * tau_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        if test_mode:
            freqs = [self.microwave_frequency, hypf]
            amps = [self.microwave_amplitude, 0.02]
            phasesx = [0,0]
            phasesy = [90, 0]

            MWpix_element = self._get_multiple_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            MWpiy_element = self._get_multiple_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)

            MWidle_element = self._get_mw_element(length=self.rabi_period / 2,
                                                   increment=0,
                                                   amp=0.02,
                                                   freq=hypf,
                                                   phase=0)


        else:
            MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
            MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)

            MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        tot_tau =  (self.rabi_period / 2)
        tau_count = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        for n in range(1, DD_order+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau

                    #k=1
                    phase = self._inst_phase(RF_freq,
                                             hypf,
                                             0.0,
                                             tau,
                                             0.0)

                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase) +rot_phase , 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase , 360)

                    #print(n, tau_count, phase, RF_phase)
                    if test_mode:
                        tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                               increment=0,
                                                               amp=0.02,
                                                               freq=hypf,
                                                               phase=0)
                    else:
                        tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                else:

                    phase = self._inst_phase(RF_freq,
                                             hypf,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    #print(n, tau_count, phase, RF_phase)
                    if test_mode:
                        tauidle_element = self._get_rf_element(length=tau_idle,
                                                               increment=0,
                                                               amp=0.02,
                                                               freq=hypf,
                                                               phase=0)
                    else:
                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase,
                                                             rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=2
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=3
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=4
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=5
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=6
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=7
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=8
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=9
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau
            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=10
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)

                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=11
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)
                if test_mode:
                    tauidle_element = self._get_rf_element(length=2*tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=12
                phase = self._inst_phase(RF_freq,
                                         hypf,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                #print(n, tau_count, phase, RF_phase)

                if test_mode:
                    tauidle_element = self._get_rf_element(length=tau_idle,
                                                           increment=0,
                                                           amp=0.02,
                                                           freq=hypf,
                                                           phase=0)
                else:
                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

        RF_element = self._get_rf_element(length=tau_start,
                                             increment=tau_step,
                                             amp=RF_amp,
                                             freq=RF_freq,
                                             phase=RF_phase+90)

        if NV_ms1:
            dpnucgate_block.append(MWpix_element)
        else:
            dpnucgate_block.append(MWidle_element)
        for i, pulse in enumerate(pulse_block):
            dpnucgate_block.append(pulse)
        if not NV_ms1:
            dpnucgate_block.append(MWpix_element)
        dpnucgate_block.append(RF_element)
        dpnucgate_block.append(MWpix_element)
        # if NV_ms1:
        #     dpnucgate_block.append(MWpix_element)
        # else:
        #     dpnucgate_block.append(MWidle_element)
        for i, laser_trig in enumerate(laser_block):
            dpnucgate_block.append(laser_trig)
        dpnucgate_block.append(delay_element)
        dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, num_of_points-1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_Gate(self, name='ddrf_gate',NV_ms1=True, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, rot_phase=0,
                            num_of_points=50, incl_pi_len = True, cond_gate=True, RF_erf=True, rise_time=50.0e-9, chirp=False, bandwidth=5.0e3, laser_on=20.0e-9,
                           laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = 4*tau + np.arange(num_of_points) * 4*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        pulse_block2 = []
        tau_count = 1
        tau_count2 = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau + (self.rabi_period / 4),
                                     0.0)
        else:
            phase = self._inst_phase(RF_freq,
                                     hypf,
                                     0.0,
                                     tau,
                                     0.0)
        for n in range(1, num_of_points+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    #k=1
                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase) +rot_phase , 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2 * tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                else:

                    if tau_count % 2 != 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=2

                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=3
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)



            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                #k=4
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=5
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=6
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                #k=7
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=8
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=9
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                #k=10
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=11
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=12
                if tau_count % 2 != 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

            pulse_block2=[]
            tau_count2 = tau_count
            for j in range(1,n+1):
                if j % 4 == 1:
                    if j != 1:
                        del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                        # k=1
                        RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        if RF_erf:
                            RFtau_element2 = self._get_rfErf_element(length=2*tau_pulse,
                                                                    increment=0,
                                                                    amp=RF_amp,
                                                                    freq=RF_freq,
                                                                    phase=RF_phase2,
                                                                    rise_time=rise_time)
                        elif chirp:
                            RFtau_element2 = self._get_rf_element_linearchirp(length=2*tau_pulse,
                                                                             increment=0,
                                                                             amp=RF_amp,
                                                                             start_freq=RF_freq - bandwidth,
                                                                             stop_freq=RF_freq + bandwidth,
                                                                             phase=RF_phase2)
                        else:
                            RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2)

                        pulse_block2.append(tauidle_element)
                        pulse_block2.append(RFtau_element2)
                        pulse_block2.append(tauidle_element)

                    else:
                        RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        if RF_erf:
                            RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                    increment=0,
                                                                    amp=RF_amp,
                                                                    freq=RF_freq,
                                                                    phase=RF_phase2,
                                                                    rise_time=rise_time)
                        elif chirp:
                            RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                             increment=0,
                                                                             amp=RF_amp,
                                                                             start_freq=RF_freq - bandwidth,
                                                                             stop_freq=RF_freq + bandwidth,
                                                                             phase=RF_phase2)
                        else:
                            RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2)

                        pulse_block2.append(tauidle_element)
                        pulse_block2.append(RFtau_element2)
                        pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=2
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=3
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                if j % 4 == 2:
                    del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                    # k=4
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=5
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=6
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                if j % 4 == 3:
                    del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                    # k=7
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=8
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=9
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                if j % 4 == 0:
                    del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                    # k=10
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=11
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=12
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            for i, pulse2 in enumerate(pulse_block2):
                dpnucgate_block.append(pulse2)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_GateRev(self, name='ddrf_gateRev',NV_ms1=True, hypf=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, rot_phase=0,
                            num_of_points=50, cond_gate=True, RF_erf=True, rise_time=50.0e-9, chirp=False, bandwidth=5.0e3, laser_on=20.0e-9,
                           laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        tau_array = 4*tau + np.arange(num_of_points) * 4*tau

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        pulse_block2 = []
        tau_count = 1
        tau_count2 = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq,
                                 hypf,
                                 0.0,
                                 tau,
                                 0.0)
        for n in range(1, num_of_points+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    #k=1
                    if tau_count % 2 == 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase) +rot_phase , 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2 * tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                else:

                    if tau_count % 2 == 0:
                        if cond_gate:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=2

                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=3
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)



            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                #k=4
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=5
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=6
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                #k=7
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=8
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=9
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                #k=10
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpiy_element)
                tau_count = tau_count + 1

                #k=11
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                pulse_block.append(MWpix_element)
                tau_count = tau_count + 1

                #k=12
                if tau_count % 2 == 0:
                    if cond_gate:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                if RF_erf:
                    RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                            increment=0,
                                                            amp=RF_amp,
                                                            freq=RF_freq,
                                                            phase=RF_phase,
                                                            rise_time=rise_time)
                elif chirp:
                    RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp,
                                                                     start_freq=RF_freq - bandwidth,
                                                                     stop_freq=RF_freq + bandwidth,
                                                                     phase=RF_phase)
                else:
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

            pulse_block2 = []
            tau_count2 = tau_count
            for j in range(1,n+1):
                if j % 4 == 1:
                    if j != 1:
                        del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                        # k=1
                        RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        if RF_erf:
                            RFtau_element2 = self._get_rfErf_element(length=2*tau_pulse,
                                                                    increment=0,
                                                                    amp=RF_amp,
                                                                    freq=RF_freq,
                                                                    phase=RF_phase2,
                                                                    rise_time=rise_time)
                        elif chirp:
                            RFtau_element2 = self._get_rf_element_linearchirp(length=2*tau_pulse,
                                                                             increment=0,
                                                                             amp=RF_amp,
                                                                             start_freq=RF_freq - bandwidth,
                                                                             stop_freq=RF_freq + bandwidth,
                                                                             phase=RF_phase2)
                        else:
                            RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2)

                        pulse_block2.append(tauidle_element)
                        pulse_block2.append(RFtau_element2)
                        pulse_block2.append(tauidle_element)

                    else:
                        RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        if RF_erf:
                            RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                    increment=0,
                                                                    amp=RF_amp,
                                                                    freq=RF_freq,
                                                                    phase=RF_phase2,
                                                                    rise_time=rise_time)
                        elif chirp:
                            RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                             increment=0,
                                                                             amp=RF_amp,
                                                                             start_freq=RF_freq - bandwidth,
                                                                             stop_freq=RF_freq + bandwidth,
                                                                             phase=RF_phase2)
                        else:
                            RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2)

                        pulse_block2.append(tauidle_element)
                        pulse_block2.append(RFtau_element2)
                        pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=2
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=3
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                if j % 4 == 2:
                    del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                    # k=4
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=5
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=6
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                if j % 4 == 3:
                    del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                    # k=7
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=8
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=9
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                if j % 4 == 0:
                    del pulse_block2[len(pulse_block2) - 3:len(pulse_block2)]
                    # k=10
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpiy_element)
                    tau_count2 = tau_count2 + 1

                    # k=11
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

                    pulse_block2.append(MWpix_element)
                    tau_count2 = tau_count2 + 1

                    # k=12
                    RF_phase2 = np.mod(((tau_count2 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element2 = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase2,
                                                                 rise_time=rise_time)
                    elif chirp:
                        RFtau_element2 = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                          increment=0,
                                                                          amp=RF_amp,
                                                                          start_freq=RF_freq - bandwidth,
                                                                          stop_freq=RF_freq + bandwidth,
                                                                          phase=RF_phase2)
                    else:
                        RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                              increment=0,
                                                              amp=RF_amp,
                                                              freq=RF_freq,
                                                              phase=RF_phase2)

                    pulse_block2.append(tauidle_element)
                    pulse_block2.append(RFtau_element2)
                    pulse_block2.append(tauidle_element)

            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            for i, pulse2 in enumerate(pulse_block2):
                dpnucgate_block.append(pulse2)
            if NV_ms1:
                dpnucgate_block.append(MWpix_element)
            else:
                dpnucgate_block.append(MWidle_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_Spect(self, name='ddrf_spect', freq=2.16e6, RF_freq=2.56e6, RF_amp=0.02, cyclesf=10, rot_phase=0,
                            DD_order=5, num_of_points=10, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau=cyclesf*(1/RF_freq)+1.0e-9
        phase_array = 0 + np.arange(num_of_points) * (360.0/(num_of_points-1))

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=90)


        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        pulse_block = []
        tot_tau =  (self.rabi_period / 2)
        tau_count = 1
        cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
        tau_idle = ((tau) - tau_pulse) / 2
        for n in range(1, DD_order+1):
            if n%4==1:
                if n!=1:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau

                    #k=1
                    phase = self._inst_phase(RF_freq,
                                             freq,
                                             0.0,
                                             tau,
                                             0.0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase , 360)

                    #print(n, tau_count, phase, RF_phase)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                else:
                    print(RF_freq, freq, 0.0, tau, 0.0)
                    phase = self._inst_phase(RF_freq,
                                             freq,
                                            0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp,
                                                         freq=RF_freq,
                                                         phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=2
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=3
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 2:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=4
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=5
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=6
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

            if n % 4 == 3:
                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=7
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=8
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=9
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau
            if n % 4 == 0:

                del pulse_block[len(pulse_block)-3:len(pulse_block)]
                tot_tau = tot_tau - tau
                #k=10
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2*tau)

                pulse_block.append(MWpiy_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=11
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + (2 * tau)

                pulse_block.append(MWpix_element)
                tot_tau = tot_tau + (self.rabi_period / 2)
                tau_count = tau_count + 1

                #k=12
                phase = self._inst_phase(RF_freq,
                                         freq,
                                         0.0,
                                         tau,
                                         0)

                if tau_count % 2 != 0:
                    RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp,
                                                     freq=RF_freq,
                                                     phase=RF_phase)

                pulse_block.append(tauidle_element)
                pulse_block.append(RFtau_element)
                pulse_block.append(tauidle_element)

                tot_tau = tot_tau + tau

        for phase in phase_array:
            MWpiread_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=phase)

            dpnucgate_block.append(MWpihalf_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            dpnucgate_block.append(MWpiread_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = phase_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_DDrf_Spect2(self, name='ddrf_spect2', RF_freq0=2.56e6, freq_start=200.0e3, freq_step=1.0e3, RF_amp=0.02, tau=10.0e-6, rot_phase=0,
                            DD_order=5, read_phase=90, RF_erf=True, rise_time=50.0e-9, chirp=False, bandwidth=5.0e3,
                            num_of_points=10, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        freq_array = freq_start + np.arange(num_of_points) * freq_step

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        MWpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=90)


        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)


        # Create block and append to created_blocks list
        dpnucgate_block = PulseBlock(name=name)
        for RF_freq in freq_array:
            pulse_block = []
            tot_tau =  (self.rabi_period / 2)
            tau_count = 1
            cycles = ((2 * np.pi * RF_freq) * (tau)) // (2 * np.pi)
            tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq)
            tau_idle = ((tau) - tau_pulse) / 2
            for n in range(1, DD_order+1):
                if n%4==1:
                    if n!=1:
                        del pulse_block[len(pulse_block)-3:len(pulse_block)]
                        tot_tau = tot_tau - tau

                        #k=1
                        phase = self._inst_phase(RF_freq,
                                                 RF_freq0,
                                                 0.0,
                                                 tau,
                                                 0.0)

                        if tau_count % 2 != 0:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180 +rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase , 360)

                        #print(n, tau_count, phase, RF_phase)

                        tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                        if RF_erf:
                            RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                    increment=0,
                                                                    amp=RF_amp,
                                                                    freq=RF_freq,
                                                                    phase=RF_phase,
                                                                    rise_time=rise_time)
                        elif chirp:
                            RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                             increment=0,
                                                                             amp=RF_amp,
                                                                             start_freq=RF_freq - bandwidth,
                                                                             stop_freq=RF_freq + bandwidth,
                                                                             phase=RF_phase)
                        else:
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase)

                        pulse_block.append(tauidle_element)
                        pulse_block.append(RFtau_element)
                        pulse_block.append(tauidle_element)

                        tot_tau = tot_tau + (2*tau)

                    else:
                        phase = self._inst_phase(RF_freq,
                                                 RF_freq0,
                                                 0.0,
                                                 tau,
                                                 0)

                        if tau_count % 2 != 0:
                            RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        if RF_erf:
                            RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase,
                                                                 rise_time=rise_time)
                        elif chirp:
                            RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                             increment=0,
                                                                             amp=RF_amp,
                                                                             start_freq=RF_freq - bandwidth,
                                                                             stop_freq=RF_freq + bandwidth,
                                                                             phase=RF_phase)
                        else:
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp,
                                                                 freq=RF_freq,
                                                                 phase=RF_phase)

                        pulse_block.append(tauidle_element)
                        pulse_block.append(RFtau_element)
                        pulse_block.append(tauidle_element)

                        tot_tau = tot_tau + tau

                    pulse_block.append(MWpix_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=2
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                    pulse_block.append(MWpiy_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=3
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                if n % 4 == 2:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau
                    #k=4
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                    pulse_block.append(MWpix_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=5
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2 * tau)

                    pulse_block.append(MWpiy_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=6
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

                if n % 4 == 3:
                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau
                    #k=7
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                    pulse_block.append(MWpiy_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=8
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2 * tau)

                    pulse_block.append(MWpix_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=9
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau
                if n % 4 == 0:

                    del pulse_block[len(pulse_block)-3:len(pulse_block)]
                    tot_tau = tot_tau - tau
                    #k=10
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2*tau)

                    pulse_block.append(MWpiy_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=11
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=2*tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=2 * tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + (2 * tau)

                    pulse_block.append(MWpix_element)
                    tot_tau = tot_tau + (self.rabi_period / 2)
                    tau_count = tau_count + 1

                    #k=12
                    phase = self._inst_phase(RF_freq,
                                             RF_freq0,
                                             0.0,
                                             tau,
                                             0)

                    if tau_count % 2 != 0:
                        RF_phase = np.mod(((tau_count-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_count-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    if RF_erf:
                        RFtau_element = self._get_rfErf_element(length=tau_pulse,
                                                                increment=0,
                                                                amp=RF_amp,
                                                                freq=RF_freq,
                                                                phase=RF_phase,
                                                                rise_time=rise_time)
                    elif chirp:
                        RFtau_element = self._get_rf_element_linearchirp(length=tau_pulse,
                                                                         increment=0,
                                                                         amp=RF_amp,
                                                                         start_freq=RF_freq - bandwidth,
                                                                         stop_freq=RF_freq + bandwidth,
                                                                         phase=RF_phase)
                    else:
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp,
                                                             freq=RF_freq,
                                                             phase=RF_phase)

                    pulse_block.append(tauidle_element)
                    pulse_block.append(RFtau_element)
                    pulse_block.append(tauidle_element)

                    tot_tau = tot_tau + tau

            MWpihalfread_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase)
            dpnucgate_block.append(MWpihalf_element)
            for i, pulse in enumerate(pulse_block):
                dpnucgate_block.append(pulse)
            dpnucgate_block.append(MWpihalfread_element)
            for i, laser_trig in enumerate(laser_block):
                dpnucgate_block.append(laser_trig)
            dpnucgate_block.append(delay_element)
            dpnucgate_block.append(waiting_element)

        created_blocks.append(dpnucgate_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dpnucgate_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = freq_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_entanglecircuit(self, name='entangle_circuit', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                    NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9,
                                  RF_freq0=5.1e6, RF_amp0=0.02,  RF_freq1=5.1e6, RF_amp1=0.02, cyclesf=9, DD_N=2, rot_phase=0, phasegate_angle=90, Read_state=TQstates.State00,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value=Initial_state.value
        readstate_value = Read_state.value
        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        q1phasex = 0.0
        q1phasey = 90.0
        q2phasex =0.0
        q2phasey = 90.0
        q2phasesx = [0.0, 0.0 ]
        q2phasesy = [90.0, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex + phasegate_angle)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex + phasegate_angle)

        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=phasegate_angle)

        CQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        readCQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex + phasegate_angle)

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                   increment=0,
                                                   amp=NV_Cpi_amp,
                                                   freq=NV_Cpi_freq1,
                                                   phase=q1phasey)

        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)

        readRabix13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasex + phasegate_angle)

        readRabiy13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasey + phasegate_angle)


        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasey)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)


        readphase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex+phasegate_angle)

        readpulse_blockC0q2 = []
        readtau_countc0 = 1
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                    #k=1
                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                else:

                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=2

                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=3
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=4
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=5
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=6
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=7
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=8
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=9
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=10
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=11
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=12
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

        readpulse_blockC1q2 = []
        readtau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                    # k=1
                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                else:

                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=2

                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=3
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=4
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=5
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=6
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=7
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=8
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=9
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=10
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=11
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=12
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

        readpulse_blockucq2 = []
        readtau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)




        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                initialblock_list.append(NOOP_element)
            if state == '01':
                for k, pulse in enumerate(pulse_blockC0q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)
            if state == '10':
                initialblock_list.append(CQ1pix_element)
            if state == '11':
                initialblock_list.append(CQ1pix_element)
                for k, pulse in enumerate(pulse_blockC1q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)

        opersblock_list = []
        opersblock_list.append(UCQ1pihalfx_element)
        for k, pulse in enumerate(pulse_blockC1q2):
            opersblock_list.append(pulse)
        opersblock_list.append(UCQ1pihalf_element)

        readblock_list=[]

        for i, state in enumerate(readstate_value):
            if state == '00':
                readblock_list.append(NOOP_element)
                readblock_list.append(readRabix13_element)
            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readRabix13_element)
            if state == '10':
                readblock_list.append(readCQ1pix_element)
                readblock_list.append(readRabix13_element)
            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readCQ1pix_element)
                readblock_list.append(readRabix13_element)

        readblockalt_list = []
        for i, state in enumerate(readstate_value):
            if state == '00':
                readblockalt_list.append(NOOP_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblockalt_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblockalt_list.append(pulse)
                readblockalt_list.append(readRabiy13_element)
            if state == '10':
                readblockalt_list.append(readCQ1pix_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblockalt_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblockalt_list.append(pulse)
                readblockalt_list.append(readCQ1pix_element)
                readblockalt_list.append(readRabiy13_element)


        for i, pulse in enumerate(initialblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(opersblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(readblock_list):
            statetomo_block.append(pulse)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        statetomo_block.append(delay_element)

        if alternating:
            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(opersblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(readblockalt_list):
                statetomo_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)



        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_entanglecircuit2(self, name='entangle_circuit2', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                    NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9,
                                  RF_freq0=5.1e6, RF_amp0=0.02,  RF_freq1=5.1e6, RF_amp1=0.02, cyclesf=9, DD_N=2, rot_phase=0, Rotationangle=90, Read_state=TQstates.State00,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value=Initial_state.value
        readstate_value = Read_state.value
        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        q1phasex = 0.0
        q1phasey = 90.0
        q2phasex =0.0
        q2phasey = 90.0
        q2phasesx = [0.0, 0.0 ]
        q2phasesy = [90.0, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)

        CQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        readCQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex )

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                   increment=0,
                                                   amp=NV_Cpi_amp,
                                                   freq=NV_Cpi_freq1,
                                                   phase=q1phasey)

        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)

        readRabix13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasex)

        readRabiy13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasey)
        UCQ1Rxphase_element = self._get_mw_element(length=(self.rabi_period / 4)* (Rotationangle/90),
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)
        UCQ1Ryphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (Rotationangle / 90),
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)


        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasey)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)


        readphase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)

        readpulse_blockC0q2 = []
        readtau_countc0 = 1
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                    #k=1
                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                else:

                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=2

                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=3
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=4
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=5
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=6
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=7
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=8
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=9
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=10
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=11
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=12
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

        readpulse_blockC1q2 = []
        readtau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                    # k=1
                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                else:

                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=2

                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=3
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=4
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=5
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=6
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=7
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=8
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=9
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=10
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=11
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=12
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

        readpulse_blockucq2 = []
        readtau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)




        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                initialblock_list.append(NOOP_element)
            if state == '01':
                for k, pulse in enumerate(pulse_blockC0q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)
            if state == '10':
                initialblock_list.append(CQ1pix_element)
            if state == '11':
                initialblock_list.append(CQ1pix_element)
                for k, pulse in enumerate(pulse_blockC1q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)

        opersblock_list = []
        opersblock_list.append(UCQ1pihalfx_element)
        for k, pulse in enumerate(pulse_blockC1q2):
            opersblock_list.append(pulse)
        opersblock_list.append(UCQ1Rxphase_element)
        opersblock_list.append(UCQ1pihalfx_element)

        readblock_list=[]

        for i, state in enumerate(readstate_value):
            if state == '00':
                readblock_list.append(NOOP_element)
                readblock_list.append(readRabix13_element)
            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readRabix13_element)
            if state == '10':
                readblock_list.append(readCQ1pix_element)
                readblock_list.append(readRabix13_element)
            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readCQ1pix_element)
                readblock_list.append(readRabix13_element)

        readblockalt_list = []
        for i, state in enumerate(readstate_value):
            if state == '00':
                readblockalt_list.append(NOOP_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblockalt_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblockalt_list.append(pulse)
                readblockalt_list.append(readRabiy13_element)
            if state == '10':
                readblockalt_list.append(readCQ1pix_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblockalt_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblockalt_list.append(pulse)
                readblockalt_list.append(readCQ1pix_element)
                readblockalt_list.append(readRabiy13_element)


        for i, pulse in enumerate(initialblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(opersblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(readblock_list):
            statetomo_block.append(pulse)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        statetomo_block.append(delay_element)

        if alternating:
            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(opersblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(readblockalt_list):
                statetomo_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)



        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_entanglecircuit3(self, name='entangle_circuit3', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                    NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9,
                                  RF_freq0=5.1e6, RF_amp0=0.02,  RF_freq1=5.1e6, RF_amp1=0.02, cyclesf=9, DD_N=2, rot_phase=0, Read_state=TQstates.State00,
                                  angle_step=45, num_of_points=9, rot_Y=False, use_offset_before=False, use_DD=False, use_idle=False,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value=Initial_state.value
        readstate_value = Read_state.value
        #print(initstate_value,readstate_value)
        # get tau array for measurement ticks
        angle_array = (0) + np.arange(num_of_points) * (angle_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        q1phasex = 0.0
        q1phasey = 90.0
        q2phasex =0.0
        q2phasey = 90.0
        q2phasesx = [0.0, 0.0 ]
        q2phasesy = [90.0, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)

        CQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        readCQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex )

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                   increment=0,
                                                   amp=NV_Cpi_amp,
                                                   freq=NV_Cpi_freq1,
                                                   phase=q1phasey)

        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)




        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasey)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        pulse_blockDD = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        pulse_blockDD2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)


        readphase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)

        readpulse_blockC0q2 = []
        readtau_countc0 = 1
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                    #k=1
                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                else:

                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=2

                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=3
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=4
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=5
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=6
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=7
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=8
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=9
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=10
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=11
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=12
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

        readpulse_blockC1q2 = []
        readtau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                    # k=1
                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                else:

                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=2

                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=3
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=4
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=5
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=6
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=7
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=8
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=9
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=10
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=11
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=12
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

        readpulse_blockucq2 = []
        readtau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)


        DDRFNOTidle_element = self._get_idle_element(length=(((4 * tau) + (2 * (self.rabi_period / 2))) * DD_N) * 2,
                                                  increment=0)
        MWidle_element = self._get_idle_element(length=NV_Cpi_len,
                                                  increment=0)

        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                if use_DD:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                    else:
                        if readstate_value[0] == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                elif use_idle:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                    else:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                else:
                    initialblock_list.append(NOOP_element)
                initialblock_list.append(NOOP_element)

            if state == '01':
                if use_DD:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(MWidle_element)
                    else:
                        if readstate_value[0] == '00':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(MWidle_element)

                elif use_idle:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(MWidle_element)

                    else:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(MWidle_element)

                else:
                    initialblock_list.append(NOOP_element)

                for k, pulse in enumerate(pulse_blockC0q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)

            if state == '10':
                if use_DD:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value[0] == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                    else:
                        if readstate_value[0] == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value[0] == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value[0] == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value[0] == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                elif use_idle:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(DDRFNOTidle_element)

                    else:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(DDRFNOTidle_element)

                else:
                    initialblock_list.append(NOOP_element)

                initialblock_list.append(CQ1pix_element)

            if state == '11':
                if use_DD:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(NOOP_element)

                    else:
                        if readstate_value[0] == '00':
                            initialblock_list.append(NOOP_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(NOOP_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(NOOP_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(NOOP_element)

                elif use_idle:
                    if use_offset_before:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(NOOP_element)

                    else:
                        if readstate_value[0] == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value[0] == '10':
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value[0] == '11':
                            initialblock_list.append(NOOP_element)

                else:
                    initialblock_list.append(NOOP_element)

                initialblock_list.append(CQ1pix_element)
                for k, pulse in enumerate(pulse_blockC1q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)



        readblock_list=[]

        for i, state in enumerate(readstate_value):
            if state == '00':
                readblock_list.append(NOOP_element)
                if use_DD and not use_offset_before:
                    for k, pulse in enumerate(pulse_blockDD):
                        readblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockDD2):
                        readblock_list.append(pulse)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)

            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)

                if use_DD and not use_offset_before:
                    readblock_list.append(MWidle_element)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)

            if state == '10':
                readblock_list.append(readCQ1pix_element)
                if use_DD and not use_offset_before:
                    for k, pulse in enumerate(pulse_blockDD):
                        readblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockDD2):
                        readblock_list.append(pulse)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)
            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readCQ1pix_element)

                if use_DD and not use_offset_before:
                    readblock_list.append(NOOP_element)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)

        for angle in angle_array:
            UCQ1Rxphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (angle / 90),
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=q1phasex)
            UCQ1Ryphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (angle / 90),
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=q1phasey)

            opersblock_list = []
            opersblock_list.append(UCQ1pihalfx_element)
            for k, pulse in enumerate(pulse_blockC1q2):
                opersblock_list.append(pulse)
            if rot_Y:
                opersblock_list.append(UCQ1Ryphase_element)
                opersblock_list.append(UCQ1pihalfy_element)
            else:
                opersblock_list.append(UCQ1Rxphase_element)
                opersblock_list.append(UCQ1pihalfx_element)


            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(opersblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(readblock_list):
                statetomo_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)


        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = angle_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_entanglecircuit4(self, name='entangle_circuit4', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                  NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9,
                                  RF_freq0=5.096e6, RF_amp0=0.02, RF_freq1=2.944e6, RF_amp1=0.02, cyclesf=11, DD_N=2,
                                  rot_phase=0, Read_state=TQstates.State00,
                                  tau_step=120.0e-9, num_of_points=20, rot_Y=False, use_DD=False, use_offset_before=False,
                                  use_idle=False, laser_on=20.0e-9, laser_off=60.0e-9, alternating = True):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value = Initial_state.value
        readstate_value = Read_state.value
        # get tau array for measurement ticks
        tau_array = (0) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                               increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        q1phasex = 0.0
        q1phasey = 90.0
        q2phasex = 0.0
        q2phasey = 90.0
        q2phasesx = [0.0, 0.0]
        q2phasesy = [90.0, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasex)
        readUCQ1pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)
        readUCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=q1phasex)

        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        CQ1pix_element = self._get_mw_element(length=NV_Cpi_len,
                                              increment=0,
                                              amp=NV_Cpi_amp,
                                              freq=NV_Cpi_freq1,
                                              phase=q1phasex)
        readCQ1pix_element = self._get_mw_element(length=NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len / 2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len / 2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasey)

        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)

        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                             increment=0,
                                             amp=self.microwave_amplitude,
                                             freq=self.microwave_frequency,
                                             phase=q1phasey)
        readRabix13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasex)

        readRabiy13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasey)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        pulse_blockDD = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 q2phasex)
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC0q2[len(pulse_blockC0q2) - 3:len(pulse_blockC0q2)]
                    del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                    # k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                # k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                # k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2) - 3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                # k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                # k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                # k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2) - 3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                # k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                # k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                # k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2) - 3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                # k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                # k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                # k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        pulse_blockDD2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

        readphase = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau,
                                     q2phasex)

        readpulse_blockC0q2 = []
        readtau_countc0 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC0q2[len(readpulse_blockC0q2) - 3:len(readpulse_blockC0q2)]
                    # k=1
                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                else:

                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=2

                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=3
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC0q2[len(readpulse_blockC0q2) - 3:len(readpulse_blockC0q2)]
                # k=4
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=5
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=6
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC0q2[len(readpulse_blockC0q2) - 3:len(readpulse_blockC0q2)]
                # k=7
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=8
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=9
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC0q2[len(readpulse_blockC0q2) - 3:len(readpulse_blockC0q2)]
                # k=10
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=11
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                # k=12
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

        readpulse_blockC1q2 = []
        readtau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                    # k=1
                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                else:

                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=2

                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=3
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=4
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=5
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=6
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=7
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=8
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=9
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=10
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=11
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=12
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

        readpulse_blockucq2 = []
        readtau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                      increment=0,
                                                      amp=RF_amp1,
                                                      freq=RF_freq1,
                                                      phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

        DDRFNOTidle_element = self._get_idle_element(length=(((4 * tau) + (2 * (self.rabi_period / 2))) * DD_N) * 2,
                                                  increment=0)
        MWidle_element = self._get_idle_element(length=NV_Cpi_len,
                                                  increment=0)

        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                if use_DD:
                    if use_offset_before:
                        if readstate_value == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                    else:
                        if readstate_value == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                elif use_idle:
                    if use_offset_before:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                    else:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                else:
                    initialblock_list.append(NOOP_element)
                initialblock_list.append(NOOP_element)

            if state == '01':
                if use_DD:
                    if use_offset_before:
                        if readstate_value == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(MWidle_element)
                    else:
                        if readstate_value == '00':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(MWidle_element)

                elif use_idle:
                    if use_offset_before:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(MWidle_element)

                    else:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(MWidle_element)

                else:
                    initialblock_list.append(NOOP_element)

                for k, pulse in enumerate(pulse_blockC0q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)

            if state == '10':
                if use_DD:
                    if use_offset_before:
                        if readstate_value == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                    else:
                        if readstate_value == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value == '01':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value == '11':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                elif use_idle:
                    if use_offset_before:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(DDRFNOTidle_element)

                    else:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(DDRFNOTidle_element)

                else:
                    initialblock_list.append(NOOP_element)

                initialblock_list.append(CQ1pix_element)

            if state == '11':
                if use_DD:
                    if use_offset_before:
                        if readstate_value == '00':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            for k, pulse in enumerate(pulse_blockDD):
                                initialblock_list.append(pulse)
                            for uk, pulse in enumerate(pulse_blockDD2):
                                initialblock_list.append(pulse)

                        elif readstate_value == '11':
                            initialblock_list.append(NOOP_element)

                    else:
                        if readstate_value == '00':
                            initialblock_list.append(NOOP_element)

                        elif readstate_value == '01':
                            initialblock_list.append(NOOP_element)

                        elif readstate_value == '10':
                            initialblock_list.append(NOOP_element)

                        elif readstate_value == '11':
                            initialblock_list.append(NOOP_element)

                elif use_idle:
                    if use_offset_before:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(NOOP_element)

                    else:
                        if readstate_value == '00':
                            initialblock_list.append(DDRFNOTidle_element)
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '01':
                            initialblock_list.append(MWidle_element)

                        elif readstate_value == '10':
                            initialblock_list.append(DDRFNOTidle_element)

                        elif readstate_value == '11':
                            initialblock_list.append(NOOP_element)

                else:
                    initialblock_list.append(NOOP_element)

                initialblock_list.append(CQ1pix_element)
                for k, pulse in enumerate(pulse_blockC1q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)



        readblock_list=[]

        for i, state in enumerate(readstate_value):
            if state == '00':
                readblock_list.append(NOOP_element)
                if use_DD and not use_offset_before:
                    for k, pulse in enumerate(pulse_blockDD):
                        readblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockDD2):
                        readblock_list.append(pulse)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)

            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)

                if use_DD and not use_offset_before:
                    readblock_list.append(MWidle_element)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)

            if state == '10':
                readblock_list.append(readCQ1pix_element)
                if use_DD and not use_offset_before:
                    for k, pulse in enumerate(pulse_blockDD):
                        readblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockDD2):
                        readblock_list.append(pulse)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)
            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readCQ1pix_element)

                if use_DD and not use_offset_before:
                    readblock_list.append(NOOP_element)
                elif use_offset_before:
                    readblock_list.append(NOOP_element)
                else:
                    readblock_list.append(NOOP_element)


        opersblock_list = []
        opersblock_list.append(UCQ1pihalfx_element)
        for k, pulse in enumerate(pulse_blockC1q2):
            opersblock_list.append(pulse)

        for i, pulse in enumerate(initialblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(opersblock_list):
            statetomo_block.append(pulse)
        for i, pulse in enumerate(readblock_list):
            statetomo_block.append(pulse)
        statetomo_block.append(readRabix13_element)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        statetomo_block.append(delay_element)

        if alternating:
            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(opersblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(readblock_list):
                statetomo_block.append(pulse)
            statetomo_block.append(readRabiy13_element)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)

        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_initreadtest(self, name='initreadtest', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                    NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9, use_DDRF=True,
                                  RF_freq0=5.1e6, RF_amp0=0.02,  RF_freq1=5.1e6, RF_amp1=0.02, RF_pi=20e-6, cyclesf=9, DD_N=2, rot_phase=0, Rotationangle=90, Read_state=TQstates.State00,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value = Initial_state.value
        readstate_value = Read_state.value
        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        q1phasex = 0.0
        q1phasey = 90.0
        q2phasex =0.0
        q2phasey = 90.0
        q2phasesx = [0.0, 0.0 ]
        q2phasesy = [90.0, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)

        CQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        readCQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex )

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                   increment=0,
                                                   amp=NV_Cpi_amp,
                                                   freq=NV_Cpi_freq1,
                                                   phase=q1phasey)

        CQ2pix_element = self._get_rf_element(length= RF_pi,
                                                  increment=0,
                                                  amp=RF_amp0,
                                                  freq=RF_freq0,
                                                  phase=q2phasex)

        CQ2pihalfx_element = self._get_rf_element(length=RF_pi/2,
                                                  increment=0,
                                                  amp=RF_amp0,
                                                  freq=RF_freq0,
                                                  phase=q2phasex)
        CQ2pihalfy_element = self._get_rf_element(length=RF_pi/2,
                                                   increment=0,
                                                   amp=RF_amp0,
                                                   freq=RF_freq0,
                                                   phase=q2phasey)

        cQ2pix_element = self._get_rf_element(length= RF_pi,
                                                  increment=0,
                                                  amp=RF_amp1,
                                                  freq=RF_freq1,
                                                  phase=q2phasex) # selective RF for NV Ms = 1

        cQ2pihalfx_element = self._get_rf_element(length=RF_pi/2,
                                                  increment=0,
                                                  amp=RF_amp1,
                                                  freq=RF_freq1,
                                                  phase=q2phasex) # selective RF for NV Ms = 1
        cQ2pihalfy_element = self._get_rf_element(length=RF_pi/2,
                                                   increment=0,
                                                   amp=RF_amp1,
                                                   freq=RF_freq1,
                                                   phase=q2phasey) # selective RF for NV Ms = 1

        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)

        readRabix13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasex)

        readRabiy13_element = self._get_mw_element(length=0.0e-9,
                                                 increment=tau_step,
                                                 amp=NV_Cpi_amp,
                                                 freq=NV_Cpi_freq1,
                                                 phase=q1phasey)
        UCQ1Rxphase_element = self._get_mw_element(length=(self.rabi_period / 4)* (Rotationangle/90),
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)
        UCQ1Ryphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (Rotationangle / 90),
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)


        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasey)

        MWidle_element = self._get_idle_element(length=NV_Cpi_len, increment=0)
        RFidle_element = self._get_idle_element(length=RF_pi, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau ,
                                 q2phasex)
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)


        readphase = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau + (self.rabi_period / 4),
                                 q2phasex)

        readpulse_blockC0q2 = []
        readtau_countc0 = 1
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                    #k=1
                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                else:

                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=2

                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=3
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=4
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=5
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=6
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=7
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=8
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=9
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=10
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=11
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=12
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

        readpulse_blockC1q2 = []
        readtau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                    # k=1
                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                else:

                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=2

                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=3
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=4
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=5
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=6
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=7
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=8
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=9
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=10
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=11
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=12
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

        readpulse_blockucq2 = []
        readtau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)




        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                initialblock_list.append(RFidle_element)
                initialblock_list.append(RFidle_element)
                initialblock_list.append(MWidle_element)
                initialblock_list.append(MWidle_element)
                initialblock_list.append(NOOP_element)
            if state == '01':
                initialblock_list.append(MWidle_element)
                initialblock_list.append(MWidle_element)
                if use_DDRF:
                    for k, pulse in enumerate(pulse_blockC0q2):
                        initialblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockucq2):
                        initialblock_list.append(pulse)
                else:
                    initialblock_list.append(CQ2pix_element)
            if state == '10':
                initialblock_list.append(RFidle_element)
                initialblock_list.append(RFidle_element)
                initialblock_list.append(CQ1pix_element)
            if state == '11':
                initialblock_list.append(CQ1pix_element)
                if use_DDRF:
                    for k, pulse in enumerate(pulse_blockC1q2):
                        initialblock_list.append(pulse)
                    for uk, pulse in enumerate(pulse_blockucq2):
                        initialblock_list.append(pulse)
                else:
                    initialblock_list.append(cQ2pix_element)

        opersblock_list = []
        opersblock_list.append(UCQ1pihalfx_element)
        for k, pulse in enumerate(pulse_blockC1q2):
            opersblock_list.append(pulse)
        opersblock_list.append(UCQ1Rxphase_element)
        opersblock_list.append(UCQ1pihalfx_element)

        readblock_list=[]

        for i, state in enumerate(readstate_value):
            if state == '00':
                readblock_list.append(NOOP_element)
                readblock_list.append(readRabix13_element)
            if state == '01':
                if use_DDRF:
                    for k, pulse in enumerate(readpulse_blockC0q2):
                        readblock_list.append(pulse)
                    for uk, pulse in enumerate(readpulse_blockucq2):
                        readblock_list.append(pulse)
                else:
                    readblock_list.append(CQ2pix_element)
                readblock_list.append(readRabix13_element)
            if state == '10':
                readblock_list.append(readCQ1pix_element)
                readblock_list.append(readRabix13_element)
            if state == '11':
                if use_DDRF:
                    for k, pulse in enumerate(readpulse_blockC1q2):
                        readblock_list.append(pulse)
                    for uk, pulse in enumerate(readpulse_blockucq2):
                        readblock_list.append(pulse)
                else:
                    readblock_list.append(cQ2pix_element)
                readblock_list.append(readCQ1pix_element)
                readblock_list.append(readRabix13_element)

        readblockalt_list = []
        for i, state in enumerate(readstate_value):
            if state == '00':
                readblockalt_list.append(NOOP_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '01':
                if use_DDRF:
                    for k, pulse in enumerate(readpulse_blockC0q2):
                        readblockalt_list.append(pulse)
                    for uk, pulse in enumerate(readpulse_blockucq2):
                        readblockalt_list.append(pulse)
                else:
                    readblockalt_list.append(CQ2pix_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '10':
                readblockalt_list.append(readCQ1pix_element)
                readblockalt_list.append(readRabiy13_element)
            if state == '11':
                if use_DDRF:
                    for k, pulse in enumerate(readpulse_blockC1q2):
                        readblockalt_list.append(pulse)
                    for uk, pulse in enumerate(readpulse_blockucq2):
                        readblockalt_list.append(pulse)
                else:
                    readblockalt_list.append(cQ2pix_element)
                readblockalt_list.append(readCQ1pix_element)
                readblockalt_list.append(readRabiy13_element)


        for i, pulse in enumerate(initialblock_list):
            statetomo_block.append(pulse)
        #for i, pulse in enumerate(opersblock_list):
        #    statetomo_block.append(pulse)
        for i, pulse in enumerate(readblock_list):
            statetomo_block.append(pulse)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        statetomo_block.append(delay_element)

        if alternating:
            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            #for i, pulse in enumerate(opersblock_list):
            #    statetomo_block.append(pulse)
            for i, pulse in enumerate(readblockalt_list):
                statetomo_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)



        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_entanglecircuit5(self, name='entangle_circuit5', Initial_state=TQstates.State00, NV_Cpi_len=1.0e-6,
                                    NV_Cpi_amp=0.05, NV_Cpi_freq1=1.432e9,
                                  RF_freq0=5.1e6, RF_amp0=0.02,  RF_freq1=5.1e6, RF_amp1=0.02, cyclesf=9, DD_N=2, rot_phase=0, Read_state=TQstates.State00,
                                  angle_step=45, num_of_points=9, rot_Y=False, incl_pi_len=False,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        initstate_value=Initial_state.value
        readstate_value = Read_state.value
        #print(initstate_value,readstate_value)
        # get tau array for measurement ticks
        angle_array = (0) + np.arange(num_of_points) * (angle_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        q1phasex = 0.0
        q1phasey = 90.0
        q2phasex =0.0
        q2phasey = 90.0
        q2phasesx = [0.0, 0.0 ]
        q2phasesy = [90.0, 90.0]

        UCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pix_element = self._get_mw_element(length=self.rabi_period /2,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)
        readUCQ1pihalfx_element = self._get_mw_element(length=self.rabi_period /4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=q1phasex)

        UCQ1pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasey)
        UCQ1pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=q1phasex)

        CQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        readCQ1pix_element = self._get_mw_element(length= NV_Cpi_len,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)

        CQ1pihalfx_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                  increment=0,
                                                  amp=NV_Cpi_amp,
                                                  freq=NV_Cpi_freq1,
                                                  phase=q1phasex)
        CQ1pihalfy_element = self._get_mw_element(length=NV_Cpi_len /2,
                                                   increment=0,
                                                   amp=NV_Cpi_amp,
                                                   freq=NV_Cpi_freq1,
                                                   phase=q1phasey)

        NOOP_element = self._get_idle_element(length=0.0e-9,
                                              increment=0)




        MWpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                 increment=0,
                                                 amp=self.microwave_amplitude,
                                                 freq=self.microwave_frequency,
                                                 phase=q1phasex)
        MWpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=q1phasey)

        MWidle_element = self._get_idle_element(length=self.rabi_period / 2, increment=0)

        tau = cyclesf * (1 / RF_freq1) + 1.0e-9
        pulse_blockC0q2 = []
        pulse_blockDD = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau + (self.rabi_period / 4),
                                     q2phasex)
        else:
            phase = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau,
                                     q2phasex)
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        pulse_blockDD2 = []
        tau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)



        if incl_pi_len:
            readphase = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau + (self.rabi_period / 4),
                                     q2phasex)
        else:
            readphase = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau,
                                     q2phasex)

        readpulse_blockC0q2 = []
        readtau_countc0 = 1
        for n in range(1, DD_N+1):
            if n%4==1:
                if n!=1:
                    del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                    #k=1
                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180 +rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                else:

                    if readtau_countc0 % 2 != 0:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase)

                    readpulse_blockC0q2.append(tauidle_element)
                    readpulse_blockC0q2.append(RFtau_element)
                    readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=2

                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=3
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=4
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=5
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=6
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=7
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=8
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=9
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC0q2[len(readpulse_blockC0q2)-3:len(readpulse_blockC0q2)]
                #k=10
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpiy_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=11
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

                readpulse_blockC0q2.append(MWpix_element)
                readtau_countc0 = readtau_countc0 + 1

                #k=12
                if readtau_countc0 % 2 != 0:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc0-1)*readphase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                readpulse_blockC0q2.append(tauidle_element)
                readpulse_blockC0q2.append(RFtau_element)
                readpulse_blockC0q2.append(tauidle_element)

        readpulse_blockC1q2 = []
        readtau_countc1 = 1
        for n in range(1, DD_N + 1):
            if n % 4 == 1:
                if n != 1:
                    del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                    # k=1
                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                else:

                    if readtau_countc1 % 2 == 0:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    readpulse_blockC1q2.append(tauidle_element)
                    readpulse_blockC1q2.append(RFtau_element)
                    readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=2

                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=3
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=4
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=5
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=6
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=7
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=8
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=9
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del readpulse_blockC1q2[len(readpulse_blockC1q2) - 3:len(readpulse_blockC1q2)]
                # k=10
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpiy_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=11
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

                readpulse_blockC1q2.append(MWpix_element)
                readtau_countc1 = readtau_countc1 + 1

                # k=12
                if readtau_countc1 % 2 == 0:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((readtau_countc1 - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                readpulse_blockC1q2.append(tauidle_element)
                readpulse_blockC1q2.append(RFtau_element)
                readpulse_blockC1q2.append(tauidle_element)

        readpulse_blockucq2 = []
        readtau_countuc = (2 * DD_N) + 1
        for j in range(1, DD_N + 1):
            if j % 4 == 1:
                if j != 1:
                    del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                    # k=1
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2*tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=RF_phase2)

                    readpulse_blockucq2.append(tauidle_element)
                    readpulse_blockucq2.append(RFtau_element2)
                    readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 2:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=4
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 3:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=7
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

            if j % 4 == 0:
                del readpulse_blockucq2[len(readpulse_blockucq2) - 3:len(readpulse_blockucq2)]
                # k=10
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpiy_element)
                readtau_countuc = readtau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)

                readpulse_blockucq2.append(MWpix_element)
                readtau_countuc = readtau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((readtau_countuc - 1) * readphase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp1,
                                                          freq=RF_freq1,
                                                          phase=RF_phase2)

                readpulse_blockucq2.append(tauidle_element)
                readpulse_blockucq2.append(RFtau_element2)
                readpulse_blockucq2.append(tauidle_element)


        DDRFNOTidle_element = self._get_idle_element(length=(((4 * tau) + (2 * (self.rabi_period / 2))) * DD_N) * 2,
                                                  increment=0)
        MWidle_element = self._get_idle_element(length=NV_Cpi_len,
                                                  increment=0)

        statetomo_block = PulseBlock(name=name)

        initialblock_list=[]
        for i, state in enumerate(initstate_value):
            if state == '00':
                initialblock_list.append(NOOP_element)

            if state == '01':
                for k, pulse in enumerate(pulse_blockC0q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)

            if state == '10':

                initialblock_list.append(CQ1pix_element)

            if state == '11':

                initialblock_list.append(CQ1pix_element)
                for k, pulse in enumerate(pulse_blockC1q2):
                    initialblock_list.append(pulse)
                for uk, pulse in enumerate(pulse_blockucq2):
                    initialblock_list.append(pulse)



        readblock_list=[]

        for i, state in enumerate(readstate_value):
            if state == '00':
                readblock_list.append(NOOP_element)

            if state == '01':
                for k, pulse in enumerate(readpulse_blockC0q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)

            if state == '10':
                readblock_list.append(readCQ1pix_element)

            if state == '11':
                for k, pulse in enumerate(readpulse_blockC1q2):
                    readblock_list.append(pulse)
                for uk, pulse in enumerate(readpulse_blockucq2):
                    readblock_list.append(pulse)
                readblock_list.append(readCQ1pix_element)


        for angle in angle_array:
            UCQ1Rxphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (angle / 90),
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=q1phasex)
            UCQ1Ryphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (angle / 90),
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=q1phasey)

            opersblock_list = []
            opersblock_list.append(UCQ1pihalfx_element)
            for k, pulse in enumerate(pulse_blockC1q2):
                opersblock_list.append(pulse)
            if rot_Y:
                opersblock_list.append(UCQ1Ryphase_element)
                opersblock_list.append(UCQ1pihalfy_element)
            else:
                opersblock_list.append(UCQ1Rxphase_element)
                opersblock_list.append(UCQ1pihalfx_element)


            for i, pulse in enumerate(initialblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(opersblock_list):
                statetomo_block.append(pulse)
            for i, pulse in enumerate(readblock_list):
                statetomo_block.append(pulse)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)
            statetomo_block.append(delay_element)


        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 1 * num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = angle_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_AXY(self, name='axy8', tau_start=0.5e-6, tau_step=10.0e-9, num_of_points=50,
                    xy8_order=4,
                    f1=1.0, f2=0.0, f3=0.0, f4=0.0,
                    scale_tau2_first=1., scale_tau2_last=1.,
                    init_pihalf_pulse=True, Init_phase=90, Read_phase=90, laser_on=20.0e-9, laser_off=60.0e-9):

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()



        # get tau array for measurement ticks
        start_tau_spacing = self.tau_2_pulse_spacing(tau_start)
        tau_array = start_tau_spacing + np.arange(num_of_points, dtype='float64') * tau_step

        # check if all pi pulses fit in tau, i.e. if the rabi period is short enough
        if (5 * self.rabi_period / 2) > tau_array.min():
            self.log.error('Unable to create AXY sequence. Rabi period too long for minimum tau.')
            return created_blocks, created_ensembles, created_sequences

        # calculate the relative spacings of the composite pulse.
        spacings = self._get_axy_spacing(f1e=f1, f2e=f2, f3e=f3, f4e=f4)
        # Determine a scale factor for each tau
        tau_factors = np.zeros(6, dtype='float64')
        tau_factors[0] = spacings[0]
        tau_factors[1] = spacings[1] - spacings[0]
        tau_factors[2] = spacings[2] - spacings[1]
        tau_factors[3] = tau_factors[2]
        tau_factors[4] = tau_factors[1]
        tau_factors[5] = tau_factors[0]

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_delay_gate_element()

        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)


        # Create pihalf block
        dd_block = PulseBlock(name=name)


        for i, tau in enumerate(tau_array):
            # Create the different tau elements
            first_tau = self._get_idle_element(
                length=scale_tau2_first*tau_factors[0] * 2 * tau - (self.rabi_period / 4), increment=0)
            last_tau = self._get_idle_element(
                length=scale_tau2_last*tau_factors[0] * 2 * tau - (self.rabi_period / 4), increment=0)
            tau1_raw_element = self._get_idle_element(length=tau_factors[0] * 2 * tau, increment=0)
            tau6_raw_element = self._get_idle_element(length=tau_factors[5] * 2 * tau, increment=0)
            tau1_element = self._get_idle_element(
                length=tau_factors[0] * 2 * tau - (self.rabi_period / 2), increment=0)
            tau2_element = self._get_idle_element(
                length=tau_factors[1] * 2 * tau - (self.rabi_period / 2), increment=0)
            tau3_element = self._get_idle_element(
                length=tau_factors[2] * 2 * tau - (self.rabi_period / 2), increment=0)
            tau4_element = self._get_idle_element(
                length=tau_factors[3] * 2 * tau - (self.rabi_period / 2), increment=0)
            tau5_element = self._get_idle_element(
                length=tau_factors[4] * 2 * tau - (self.rabi_period / 2), increment=0)
            tau6_element = self._get_idle_element(
                length=tau_factors[5] * 2 * tau - (self.rabi_period / 2), increment=0)

            if init_pihalf_pulse:
                dd_block.append(self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=Init_phase))
            # Fill the PulseBlock with elements
            for n in range(xy8_order):
                # X
                if n == 0:
                    dd_block.append(first_tau)
                else:
                    dd_block.append(tau1_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau2_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau3_element)
                dd_block.append(pix_90_element)
                dd_block.append(tau4_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau5_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau6_raw_element)
                # Y
                dd_block.append(tau6_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau5_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau4_element)
                dd_block.append(piy_90_element)
                dd_block.append(tau3_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau2_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau1_raw_element)
                # X
                dd_block.append(tau1_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau2_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau3_element)
                dd_block.append(pix_90_element)
                dd_block.append(tau4_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau5_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau6_raw_element)
                # Y
                dd_block.append(tau6_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau5_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau4_element)
                dd_block.append(piy_90_element)
                dd_block.append(tau3_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau2_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau1_raw_element)
                ###############################################
                # Y
                dd_block.append(tau1_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau2_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau3_element)
                dd_block.append(piy_90_element)
                dd_block.append(tau4_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau5_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau6_raw_element)
                # X
                dd_block.append(tau6_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau5_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau4_element)
                dd_block.append(pix_90_element)
                dd_block.append(tau3_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau2_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau1_raw_element)
                # Y
                dd_block.append(tau1_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau2_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau3_element)
                dd_block.append(piy_90_element)
                dd_block.append(tau4_element)
                dd_block.append(piy_0_element)
                dd_block.append(tau5_element)
                dd_block.append(piy_30_element)
                dd_block.append(tau6_raw_element)
                # X
                dd_block.append(tau6_element)
                dd_block.append(pix_30_element)
                dd_block.append(tau5_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau4_element)
                dd_block.append(pix_90_element)
                dd_block.append(tau3_element)
                dd_block.append(pix_0_element)
                dd_block.append(tau2_element)
                dd_block.append(pix_30_element)
                if n == (xy8_order - 1):
                    dd_block.append(last_tau)
                else:
                    dd_block.append(tau1_raw_element)


            if init_pihalf_pulse:
                dd_block.append(self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=Read_phase)) #changed on 29.03. previously init = 0, read =0
            for i, laser_trig in enumerate(laser_block):
                dd_block.append(laser_trig)
            dd_block.append(delay_element)
            dd_block.append(waiting_element)


        created_blocks.append(dd_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dd_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_AXYOrder(self, name='axy8_order', tau=0.5e-6, num_of_points=50,
                    f1=1.0, f2=0.0, f3=0.0, f4=0.0,
                    scale_tau2_first=1., scale_tau2_last=1.,
                    init_pihalf_pulse=True, laser_on=20.0e-9, laser_off=60.0e-9):

        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()



        # get tau array for measurement ticks
        start_tau_spacing = self.tau_2_pulse_spacing(tau)
        order_array = 1 + np.arange(num_of_points, dtype='float64') * 1

        # check if all pi pulses fit in tau, i.e. if the rabi period is short enough
        if (5 * self.rabi_period / 2) > tau:
            self.log.error('Unable to create AXY sequence. Rabi period too long for minimum tau.')
            return created_blocks, created_ensembles, created_sequences

        # calculate the relative spacings of the composite pulse.
        spacings = self._get_axy_spacing(f1e=f1, f2e=f2, f3e=f3, f4e=f4)
        # Determine a scale factor for each tau
        tau_factors = np.zeros(6, dtype='float64')
        tau_factors[0] = spacings[0]
        tau_factors[1] = spacings[1] - spacings[0]
        tau_factors[2] = spacings[2] - spacings[1]
        tau_factors[3] = tau_factors[2]
        tau_factors[4] = tau_factors[1]
        tau_factors[5] = tau_factors[0]

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_delay_gate_element()

        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)


        # Create pihalf block
        dd_block = PulseBlock(name=name)



        # Create the different tau elements
        first_tau = self._get_idle_element(
            length=scale_tau2_first*tau_factors[0] * 2 * tau - (self.rabi_period / 4), increment=0)
        last_tau = self._get_idle_element(
            length=scale_tau2_last*tau_factors[0] * 2 * tau - (self.rabi_period / 4), increment=0)
        tau1_raw_element = self._get_idle_element(length=tau_factors[0] * 2 * tau, increment=0)
        tau6_raw_element = self._get_idle_element(length=tau_factors[5] * 2 * tau, increment=0)
        tau1_element = self._get_idle_element(
            length=tau_factors[0] * 2 * tau - (self.rabi_period / 2), increment=0)
        tau2_element = self._get_idle_element(
            length=tau_factors[1] * 2 * tau - (self.rabi_period / 2), increment=0)
        tau3_element = self._get_idle_element(
            length=tau_factors[2] * 2 * tau - (self.rabi_period / 2), increment=0)
        tau4_element = self._get_idle_element(
            length=tau_factors[3] * 2 * tau - (self.rabi_period / 2), increment=0)
        tau5_element = self._get_idle_element(
            length=tau_factors[4] * 2 * tau - (self.rabi_period / 2), increment=0)
        tau6_element = self._get_idle_element(
            length=tau_factors[5] * 2 * tau - (self.rabi_period / 2), increment=0)

        pulse_block=[]
        for n in range(1, num_of_points+1):
            if n % 2 !=0:
                if n!=1:
                    del pulse_block[len(pulse_block) - 1:len(pulse_block)]
                    pulse_block.append(tau1_raw_element)
                if n == 1:
                    pulse_block.append(first_tau)
                else:
                    pulse_block.append(tau1_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau6_raw_element)
                # Y
                pulse_block.append(tau6_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau1_raw_element)
                # X
                pulse_block.append(tau1_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau6_raw_element)
                # Y
                pulse_block.append(tau6_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(last_tau)

            else:
                del pulse_block[len(pulse_block) - 1:len(pulse_block)]
                pulse_block.append(tau1_raw_element)
                # Y
                pulse_block.append(tau1_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau6_raw_element)
                # X
                pulse_block.append(tau6_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau1_raw_element)
                # Y
                pulse_block.append(tau1_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau6_raw_element)
                # X
                pulse_block.append(tau6_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(last_tau)


            if init_pihalf_pulse:
                dd_block.append(pihalf_element)
            for i, pulse in enumerate(pulse_block):
                dd_block.append(pulse)
            if init_pihalf_pulse:
                dd_block.append(pihalf_element)
            for i, laser_trig in enumerate(laser_block):
                dd_block.append(laser_trig)
            dd_block.append(delay_element)
            dd_block.append(waiting_element)


        created_blocks.append(dd_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((dd_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['labels'] = ('Tau', 'Signal')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    @staticmethod
    def _get_axy_spacing(f1e=1.0, f2e=0.0, f3e=0.0, f4e=0.0):
        import scipy.optimize as optim
        # Initial angles for solver
        x0 = np.array([0.1 * np.pi, 0.3 * np.pi, 0.6 * np.pi, 0.9 * np.pi], dtype='float64')

        # define function to solve
        def kdd5even(x):
            theta1 = x[0]
            theta2 = x[1]
            theta3 = x[2]
            theta4 = x[3]

            theta5 = theta2 + theta4 - (theta1 + theta3) + np.pi / 2

            return_val = np.zeros(4, dtype='float64')
            return_val[0] = f1e - 4 / (1 * np.pi) * (
                        np.sin(1 * theta1) + np.sin(1 * theta3) + np.sin(1 * theta5) - np.sin(1 * theta2) - np.sin(
                    1 * theta4))
            return_val[1] = f2e - 4 / (2 * np.pi) * (
                        np.sin(2 * theta1) + np.sin(2 * theta3) + np.sin(2 * theta5) - np.sin(2 * theta2) - np.sin(
                    2 * theta4))
            return_val[2] = f3e - 4 / (3 * np.pi) * (
                        np.sin(3 * theta1) + np.sin(3 * theta3) + np.sin(3 * theta5) - np.sin(3 * theta2) - np.sin(
                    3 * theta4))
            return_val[3] = f4e - 4 / (4 * np.pi) * (
                        np.sin(4 * theta1) + np.sin(4 * theta3) + np.sin(4 * theta5) - np.sin(4 * theta2) - np.sin(
                    4 * theta4))
            return return_val

        # Solve for kdd5even(x) = 0
        solved_x = optim.fsolve(kdd5even, x0)
        solved_x = np.append(solved_x,
                             solved_x[1] + solved_x[3] - (solved_x[0] + solved_x[2]) + np.pi / 2)
        return solved_x / (2 * np.pi)

