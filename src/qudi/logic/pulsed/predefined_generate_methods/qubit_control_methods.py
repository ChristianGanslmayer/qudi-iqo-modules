# -*- coding: utf-8 -*-

"""
This file contains the Qudi Predefined Methods for sequence generator

Qudi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Qudi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Qudi. If not, see <http://www.gnu.org/licenses/>.use_DD

Copyright (c) the Qudi Developers. See the COPYRIGHT.txt file at the
top-level directory of this distribution and at <https://github.com/Ulm-IQO/qudi/>
"""

import numpy as np
from qudi.logic.pulsed.pulse_objects import PulseBlock, PulseBlockEnsemble, PulseSequence
from qudi.logic.pulsed.pulse_objects import PredefinedGeneratorBase
from qudi.logic.pulsed.sampling_functions import SamplingFunctions
from qudi.util.helpers import csv_2_list
from qudi.util.network import netobtain
from enum import Enum

class StateTomography(Enum):
    State0 = ['NOOP']
    State1 = ['pix']
    State3 = ['pihalfx']
    State4 = ['pihalfy']

class SingleQubitStates(Enum):
    State0 = ['NOOP']
    State1 = ['pix']
    State2 = ['pihalfx']
    State3 = ['pihalfy']

class SingleQubitGates(Enum):
    GateX = ['X']
    GatesqX = ['sqX']
    GateY = ['Y']
    GateZ = ['Z']
    GatesqZ = ['sqZ']
    GateH = ['H']
    GateN = ['NOOP']

class TQstates(Enum):
    State00 = ['00']
    State01 = ['01']
    State10 = ['10']
    State11 = ['11']

class TQQPTstates(Enum):
    State00 = ['00']
    State01 = ['01']
    State02 = ['0X']
    State03 = ['0Y']
    State04 = ['10']
    State05 = ['11']
    State06 = ['1X']
    State07 = ['1Y']
    State08 = ['X0']
    State09 = ['X1']
    State10 = ['XX']
    State11 = ['XY']
    State12 = ['Y0']
    State13 = ['Y1']
    State14 = ['YX']
    State15 = ['YY']

class TQQPTReadstates(Enum):
    ReadIZ = ['IZ']
    ReadIX = ['IX']
    ReadIY = ['IY']
    ReadZI = ['ZI']
    ReadZZ = ['ZZ']
    ReadZX = ['ZX']
    ReadZY = ['ZY']
    ReadXI = ['XI']
    ReadXZ = ['XZ']
    ReadXX = ['XX']
    ReadXY = ['XY']
    ReadYI = ['YI']
    ReadYZ = ['YZ']
    ReadYX = ['YX']
    ReadYY = ['YY']

class TQreadout(Enum):
    RO1 = ['RO1']
    RO2 = ['RO2']
    RO3 = ['RO3']
    RO4 = ['RO4']
    RO5 = ['RO5']
    RO6 = ['RO6']

class Gates(Enum):
    NOOP = ['NOOP']
    CnNOTe = ['CnNOTe']
    CeNOTn = ['CeNOTn']
    ucq1Sqrtx = ['UCQ1pihalfx']
    ucq1Sqrtz = ['UCQ1pihalfz']
    ucq1pi = ['UCQ1pi']
    ucq2Sqrtx = ['UCQ2pihalfx']
    ucq2Sqrtz = ['UCQ2pihalfz']
    ucq2pi = ['UCQ2pi']
    C0NOTn = ['C0NOTn']
    C1NOTn = ['C1NOTn']
    ucq3Sqrtx = ['UCQ2pihalfx']
    ucq3Sqrtz = ['UCQ2pihalfz']
    ucq3pi = ['UCQ2pi']
    CeROTn2 = ['CeROTn2']
    CeROTn2N2 = ['CeROTn2_2']
    CeROTn2N3 = ['CeROTn2_3']
    CeROTn2N4 = ['CeROTn2_4']


class QubitControlPredefinedGenerator(PredefinedGeneratorBase):
    """

    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    ################################################################################################
    #                             Generation methods for waveforms                                 #
    ################################################################################################

    def exp_round(value, N):
        exponent = np.ceil(np.log10(value))
        return 10 ** exponent * round(value * 10 ** (-exponent), N)

    def _inst_phase(self, freq1, freq2, tauT, tau, phase):
        instantaneous_phase = (2 * np.pi * freq1 * tauT) * (180.0 / np.pi)
        phase_diff = (2 * np.pi * (freq2 - freq1) * tau) * (180.0 / np.pi)
        return (instantaneous_phase + phase_diff + phase)%360


    def generate_singleQB1QPT(self, name='SingleQB1QPT', Init_state=SingleQubitStates.State0, Gate=SingleQubitGates.GateX,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value

        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))


        pix_element = self._get_mw_element(length=self.rabi_period /2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period /2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)

        pihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        pihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=90)
        NOOP_element = self._get_idle_element(length=self.rabi_period /2,
                                                 increment=0)

        if gate_value == ["Z"]:
            readRabix_element = self._get_mw_element(length=0.0e-9,
                                                     increment=tau_step,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=180)

            readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                     increment=tau_step,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=270)

        else:
            readRabix_element = self._get_mw_element(length=0.0e-9,
                                                     increment=tau_step,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=0)

            readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                     increment=tau_step,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=90)


        statetomo_block = PulseBlock(name=name)

        for i, pulse in enumerate(state_value):
            if pulse =='pix':
                statetomo_block.append(pix_element)
            elif pulse =='pihalfx':
                statetomo_block.append(pihalfx_element)
            elif pulse =='pihalfy':
                statetomo_block.append(pihalfy_element)
            elif pulse =='NOOP':
                statetomo_block.append(NOOP_element)
        for i, pulse in enumerate(gate_value):
            if pulse =='X':
                statetomo_block.append(pix_element)
            elif pulse =='Y':
                statetomo_block.append(piy_element)
            elif pulse =='Z':
                statetomo_block.append(self._get_idle_element(length=0.0e-9,
                                              increment=0.0e-9))
            elif pulse =='H':
                statetomo_block.append(pihalfy_element)
                statetomo_block.append(pix_element)

        statetomo_block.append(readRabix_element)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        if alternating:
            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    statetomo_block.append(pix_element)
                elif pulse == 'pihalfx':
                    statetomo_block.append(pihalfx_element)
                elif pulse == 'pihalfy':
                    statetomo_block.append(pihalfy_element)
                elif pulse == 'NOOP':
                    statetomo_block.append(NOOP_element)

            for i, pulse in enumerate(gate_value):
                if pulse == 'X':
                    statetomo_block.append(pix_element)
                elif pulse == 'Y':
                    statetomo_block.append(piy_element)
                elif pulse == 'Z':
                    statetomo_block.append(self._get_idle_element(length=0.0e-9,
                                              increment=0.0e-9))
                elif pulse == 'H':
                    statetomo_block.append(pihalfy_element)
                    statetomo_block.append(pix_element)

            statetomo_block.append(readRabiy_element)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)


        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_singleQB2QPT(self, name='SingleQB2QPT', NV_ms1=True, Init_state=SingleQubitStates.State0, Gate=SingleQubitGates.GateX,
                                  RF_freq1=5.1e6, RF_amp1=0.02,  RF_freq2=5.1e6, RF_amp2=0.02, RF_pi=20.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value

        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        freqs = [RF_freq1, RF_freq2]
        amps = [RF_amp1, RF_amp2]
        phasesx = [0.0, 0.0]
        phasesy = [90.0, 90.0]

        pix_element = self._get_multiple_rf_element(length=RF_pi,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        piy_element = self._get_multiple_rf_element(length=RF_pi,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        pihalfx_element = self._get_multiple_rf_element(length=RF_pi/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        pihalfy_element = self._get_multiple_rf_element(length=RF_pi/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        NOOP_element = self._get_idle_element(length=RF_pi,
                                              increment=0)
        if gate_value == ["Z"]:
            phasesx = [180.0, 180.0]
            phasesy = [270.0, 270.0]

            readRabix_element = self._get_multiple_rf_element(length=0.0e-9,
                                               increment=tau_step,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            readRabiy_element = self._get_multiple_rf_element(length=0.0e-9,
                                               increment=tau_step,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)

        else:
            phasesx = [0.0, 0.0]
            phasesy = [90.0, 90.0]

            readRabix_element = self._get_multiple_rf_element(length=0.0e-9,
                                               increment=tau_step,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesx)

            readRabiy_element = self._get_multiple_rf_element(length=0.0e-9,
                                               increment=tau_step,
                                               amps=amps,
                                               freqs=freqs,
                                               phases=phasesy)

        statetomo_block = PulseBlock(name=name)
        if NV_ms1:
            NVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=0)
            statetomo_block.append(NVpix_element)
        else:
            NVpix_element = self._get_idle_element(length=self.rabi_period / 2,
                                              increment=0)
            statetomo_block.append(NVpix_element)

        for i, pulse in enumerate(state_value):
            if pulse =='pix':
                statetomo_block.append(pix_element)
            elif pulse =='pihalfx':
                statetomo_block.append(pihalfx_element)
            elif pulse =='pihalfy':
                statetomo_block.append(pihalfy_element)
            elif pulse =='NOOP':
                statetomo_block.append(NOOP_element)
        for i, pulse in enumerate(gate_value):
            if pulse == 'X':
                statetomo_block.append(pix_element)
            elif pulse == 'Y':
                statetomo_block.append(piy_element)
            elif pulse == 'Z':
                statetomo_block.append(self._get_idle_element(length=0.0e-9,
                                              increment=0.0e-9))
            elif pulse == 'H':
                statetomo_block.append(pihalfy_element)
                statetomo_block.append(pix_element)

        statetomo_block.append(readRabix_element)
        if NV_ms1:
            NVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                               increment=0,
                                               amp=self.microwave_amplitude,
                                               freq=self.microwave_frequency,
                                               phase=0)
            statetomo_block.append(NVpix_element)
        else:
            NVpix_element = self._get_idle_element(length=self.rabi_period / 2,
                                              increment=0)
            statetomo_block.append(NVpix_element)
        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        if alternating:
            if NV_ms1:
                NVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                     increment=0,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=0)
                statetomo_block.append(NVpix_element)
            else:
                NVpix_element = self._get_idle_element(length=self.rabi_period / 2,
                                                       increment=0)
                statetomo_block.append(NVpix_element)
            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    statetomo_block.append(pix_element)
                elif pulse == 'pihalfx':
                    statetomo_block.append(pihalfx_element)
                elif pulse == 'pihalfy':
                    statetomo_block.append(pihalfy_element)
                elif pulse == 'NOOP':
                    statetomo_block.append(NOOP_element)
            for i, pulse in enumerate(gate_value):
                if pulse == 'X':
                    statetomo_block.append(pix_element)
                elif pulse == 'Y':
                    statetomo_block.append(piy_element)
                elif pulse == 'Z':
                    statetomo_block.append(self._get_idle_element(length=0.0e-9,
                                              increment=0.0e-9))
                elif pulse == 'H':
                    statetomo_block.append(pihalfy_element)
                    statetomo_block.append(pix_element)

            statetomo_block.append(readRabiy_element)
            if NV_ms1:
                NVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                     increment=0,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=0)
                statetomo_block.append(NVpix_element)
            else:
                NVpix_element = self._get_idle_element(length=self.rabi_period / 2,
                                                       increment=0)
                statetomo_block.append(NVpix_element)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)

        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_singleQB2DDQPT(self, name='SingleQB2DDQPT', NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, RF_freq0=5.096e6,
                              RF_freq1=5.1e6, RF_amp1=0.02, cyclesf=11, N_pi=4, RF_pi=20.0e-6,
                              num_of_points=50, read_phase=90,
                              laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value

        # get tau array for measurement ticks
        tau_array = 2 + np.arange(num_of_points) * (2)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                               increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpix_element = self._get_mw_element(length=self.rabi_period /2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        MWpiy_element = self._get_mw_element(length=self.rabi_period /2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)


        tau = cyclesf * (1 / RF_freq1) + 1.0e-9

        cycles = ((2 * np.pi * RF_freq1) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq1)
        tau_idle = ((tau) - tau_pulse) / 2
        phasex = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 0)


        pulse_blockucRx = []
        tau_countcx = 1
        for n in range(1, N_pi + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockucRx[len(pulse_blockucRx) - 3:len(pulse_blockucRx)]
                    # k=1

                    RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucRx.append(tauidle_element)
                    pulse_blockucRx.append(RFtau_element)
                    pulse_blockucRx.append(tauidle_element)

                else:
                    RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucRx.append(tauidle_element)
                    pulse_blockucRx.append(RFtau_element)
                    pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpix_element)
                tau_countcx = tau_countcx + 1

                # k=2


                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpiy_element)
                tau_countcx = tau_countcx + 1

                # k=3
                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockucRx[len(pulse_blockucRx) - 3:len(pulse_blockucRx)]
                # k=4
                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpix_element)
                tau_countcx = tau_countcx + 1

                # k=5
                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpiy_element)
                tau_countcx = tau_countcx + 1

                # k=6
                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockucRx[len(pulse_blockucRx) - 3:len(pulse_blockucRx)]
                # k=7
                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpiy_element)
                tau_countcx = tau_countcx + 1

                # k=8
                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpix_element)
                tau_countcx = tau_countcx + 1

                # k=9

                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockucRx[len(pulse_blockucRx) - 3:len(pulse_blockucRx)]
                # k=10

                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpiy_element)
                tau_countcx = tau_countcx + 1

                # k=11

                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

                pulse_blockucRx.append(MWpix_element)
                tau_countcx = tau_countcx + 1

                # k=12

                RF_phase = np.mod(((tau_countcx - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRx.append(tauidle_element)
                pulse_blockucRx.append(RFtau_element)
                pulse_blockucRx.append(tauidle_element)

        phasey = self._inst_phase(RF_freq1,
                                 RF_freq0,
                                 0.0,
                                 tau,
                                 90)


        pulse_blockucRy = []
        tau_countcy = 1
        for n in range(1, N_pi + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockucRy[len(pulse_blockucRy) - 3:len(pulse_blockucRy)]
                    # k=1

                    RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucRy.append(tauidle_element)
                    pulse_blockucRy.append(RFtau_element)
                    pulse_blockucRy.append(tauidle_element)

                else:
                    RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucRy.append(tauidle_element)
                    pulse_blockucRy.append(RFtau_element)
                    pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpix_element)
                tau_countcy = tau_countcy + 1

                # k=2

                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpiy_element)
                tau_countcy = tau_countcy + 1

                # k=3
                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockucRy[len(pulse_blockucRy) - 3:len(pulse_blockucRy)]
                # k=4
                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpix_element)
                tau_countcy = tau_countcy + 1

                # k=5
                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpiy_element)
                tau_countcy = tau_countcy + 1

                # k=6
                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockucRy[len(pulse_blockucRy) - 3:len(pulse_blockucRy)]
                # k=7
                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpiy_element)
                tau_countcy = tau_countcy + 1

                # k=8
                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpix_element)
                tau_countcy = tau_countcy + 1

                # k=9

                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockucRy[len(pulse_blockucRy) - 3:len(pulse_blockucRy)]
                # k=10

                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpiy_element)
                tau_countcy = tau_countcy + 1

                # k=11

                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

                pulse_blockucRy.append(MWpix_element)
                tau_countcy = tau_countcy + 1

                # k=12

                RF_phase = np.mod(((tau_countcy - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRy.append(tauidle_element)
                pulse_blockucRy.append(RFtau_element)
                pulse_blockucRy.append(tauidle_element)

        pulse_blockucpi_2x = []
        tau_countcx2 = 1
        for n in range(1, int(N_pi/2) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockucpi_2x[len(pulse_blockucpi_2x) - 3:len(pulse_blockucpi_2x)]
                    # k=1

                    RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucpi_2x.append(tauidle_element)
                    pulse_blockucpi_2x.append(RFtau_element)
                    pulse_blockucpi_2x.append(tauidle_element)

                else:
                    RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucpi_2x.append(tauidle_element)
                    pulse_blockucpi_2x.append(RFtau_element)
                    pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpix_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=2

                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpiy_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=3
                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockucpi_2x[len(pulse_blockucpi_2x) - 3:len(pulse_blockucpi_2x)]
                # k=4
                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpix_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=5
                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpiy_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=6
                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockucpi_2x[len(pulse_blockucpi_2x) - 3:len(pulse_blockucpi_2x)]
                # k=7
                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpiy_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=8
                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpix_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=9

                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockucpi_2x[len(pulse_blockucpi_2x) - 3:len(pulse_blockucpi_2x)]
                # k=10

                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpiy_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=11

                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

                pulse_blockucpi_2x.append(MWpix_element)
                tau_countcx2 = tau_countcx2 + 1

                # k=12

                RF_phase = np.mod(((tau_countcx2 - 1) * phasex), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2x.append(tauidle_element)
                pulse_blockucpi_2x.append(RFtau_element)
                pulse_blockucpi_2x.append(tauidle_element)

        pulse_blockucpi_2y = []
        tau_countcy2 = 1
        for n in range(1, int(N_pi/2) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockucpi_2y[len(pulse_blockucpi_2y) - 3:len(pulse_blockucpi_2y)]
                    # k=1

                    RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucpi_2y.append(tauidle_element)
                    pulse_blockucpi_2y.append(RFtau_element)
                    pulse_blockucpi_2y.append(tauidle_element)

                else:
                    RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucpi_2y.append(tauidle_element)
                    pulse_blockucpi_2y.append(RFtau_element)
                    pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpix_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=2

                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpiy_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=3
                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockucpi_2y[len(pulse_blockucpi_2y) - 3:len(pulse_blockucpi_2y)]
                # k=4
                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpix_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=5
                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpiy_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=6
                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockucpi_2y[len(pulse_blockucpi_2y) - 3:len(pulse_blockucpi_2y)]
                # k=7
                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpiy_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=8
                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpix_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=9

                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockucpi_2y[len(pulse_blockucpi_2y) - 3:len(pulse_blockucpi_2y)]
                # k=10

                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpiy_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=11

                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)

                pulse_blockucpi_2y.append(MWpix_element)
                tau_countcy2 = tau_countcy2 + 1

                # k=12

                RF_phase = np.mod(((tau_countcy2 - 1) * phasey), 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucpi_2y.append(tauidle_element)
                pulse_blockucpi_2y.append(RFtau_element)
                pulse_blockucpi_2y.append(tauidle_element)


        if gate_value == ['Z']:
            phaseread = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau,
                                     180)

        else:
            phaseread = self._inst_phase(RF_freq1,
                                     RF_freq0,
                                     0.0,
                                     tau,
                                     0)




        NOOP_element = self._get_idle_element(length=RF_pi,
                                              increment=0)


        statetomo_block = PulseBlock(name=name)

        pulse_blockucRead = []
        tau_countc = 1
        for n in range(1, num_of_points + 1):

            if NV_ms1:
                NVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                                     increment=0,
                                                     amp=self.microwave_amplitude,
                                                     freq=self.microwave_frequency,
                                                     phase=0)
                statetomo_block.append(NVpix_element)
            else:
                NVpix_element = self._get_idle_element(length=self.rabi_period / 2,
                                                       increment=0)
                statetomo_block.append(NVpix_element)

            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    for i, pulselist in enumerate(pulse_blockucRx):
                        statetomo_block.append(pulselist)
                elif pulse == 'pihalfx':
                    for i, pulselist in enumerate(pulse_blockucpi_2x):
                        statetomo_block.append(pulselist)
                elif pulse == 'pihalfy':
                    for i, pulselist in enumerate(pulse_blockucpi_2y):
                        statetomo_block.append(pulselist)
                elif pulse == 'NOOP':
                    statetomo_block.append(NOOP_element)
            for i, pulse in enumerate(gate_value):
                if pulse == 'X':
                    for i, pulselist in enumerate(pulse_blockucRx):
                        statetomo_block.append(pulselist)
                elif pulse == 'Y':
                    for i, pulselist in enumerate(pulse_blockucRy):
                        statetomo_block.append(pulselist)
                elif pulse == 'Z':
                    statetomo_block.append(self._get_idle_element(length=0.0e-9,
                                                                  increment=0.0e-9))
                elif pulse == 'H':
                    for i, pulselist in enumerate(pulse_blockucpi_2y):
                        statetomo_block.append(pulselist)

            if n % 4 == 1:
                if n != 1:
                    del pulse_blockucRead[len(pulse_blockucRead) - 3:len(pulse_blockucRead)]
                    # k=1

                    RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucRead.append(tauidle_element)
                    pulse_blockucRead.append(RFtau_element)
                    pulse_blockucRead.append(tauidle_element)

                else:
                    RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=RF_phase)

                    pulse_blockucRead.append(tauidle_element)
                    pulse_blockucRead.append(RFtau_element)
                    pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpix_element)
                tau_countc = tau_countc + 1

                # k=2


                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpiy_element)
                tau_countc = tau_countc + 1

                # k=3
                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockucRead[len(pulse_blockucRead) - 3:len(pulse_blockucRead)]
                # k=4
                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpix_element)
                tau_countc = tau_countc + 1

                # k=5
                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpiy_element)
                tau_countc = tau_countc + 1

                # k=6
                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockucRead[len(pulse_blockucRead) - 3:len(pulse_blockucRead)]
                # k=7
                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpiy_element)
                tau_countc = tau_countc + 1

                # k=8
                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpix_element)
                tau_countc = tau_countc + 1

                # k=9

                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockucRead[len(pulse_blockucRead) - 3:len(pulse_blockucRead)]
                # k=10

                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpiy_element)
                tau_countc = tau_countc + 1

                # k=11

                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

                pulse_blockucRead.append(MWpix_element)
                tau_countc = tau_countc + 1

                # k=12

                RF_phase = np.mod(((tau_countc - 1) * phaseread)+read_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp1,
                                                     freq=RF_freq1,
                                                     phase=RF_phase)

                pulse_blockucRead.append(tauidle_element)
                pulse_blockucRead.append(RFtau_element)
                pulse_blockucRead.append(tauidle_element)

            for i, pulselist in enumerate(pulse_blockucRead):
                statetomo_block.append(pulselist)
            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)


        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    # def generate_singleQB3DDQPT2(self, name='SingleQB3DDQPT2',NV_ms1=True, Init_state=SingleQubitStates.State0,
    #                           Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4,
    #                       tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6,
    #                      polariz=True, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
    #     """
    #
    #     """
    #     created_blocks = list()
    #     created_ensembles = list()
    #     created_sequences = list()
    #
    #     # get tau array for measurement ticks
    #     order_array = 1 + np.arange(1)
    #     # calculate "real" start length of tau due to finite pi-pulse length
    #     state_value = Init_state.value
    #     gate_value = Gate.value
    #
    #     # create the elements
    #     waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
    #     #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
    #     delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
    #     laser_block = []
    #     laser_reps = int(self.laser_length / (laser_on + laser_off))
    #     for n in range(laser_reps):
    #         laser_block.append(self._get_laser_element(length=laser_on, increment=0))
    #         laser_block.append(self._get_idle_element(length=laser_off, increment=0))
    #     initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
    #                                           increment=0,
    #                                           amp=self.microwave_amplitude,
    #                                           freq=self.microwave_frequency,
    #                                           phase=90)
    #     pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
    #                                               increment=0,
    #                                               amp=self.microwave_amplitude,
    #                                               freq=self.microwave_frequency,
    #                                               phase=0)
    #
    #     pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
    #                                                 increment=0,
    #                                                 amp=self.microwave_amplitude,
    #                                                 freq=self.microwave_frequency,
    #                                                 phase=0)
    #     pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
    #                                                increment=0,
    #                                                amp=self.microwave_amplitude,
    #                                                freq=self.microwave_frequency,
    #                                                phase=0)
    #     pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
    #                                                 increment=0,
    #                                                 amp=self.microwave_amplitude,
    #                                                 freq=self.microwave_frequency,
    #                                                 phase=90)
    #
    #     pix_element = self._get_mw_element(length=self.rabi_period / 2,
    #                                        increment=0,
    #                                        amp=self.microwave_amplitude,
    #                                        freq=self.microwave_frequency,
    #                                        phase=0)
    #     piy_element = self._get_mw_element(length=self.rabi_period / 2,
    #                                        increment=0,
    #                                        amp=self.microwave_amplitude,
    #                                        freq=self.microwave_frequency,
    #                                        phase=90)
    #     tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
    #     tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)
    #
    #     tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
    #     tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)
    #
    #     tau_element = self._get_idle_element(length=tau_uncond, increment=0)
    #     NOOP_element = self._get_idle_element(length=0,
    #                                           increment=0)
    #     # Create block and append to created_blocks list
    #     xy8_block = PulseBlock(name=name)
    #     pihalfX_list = []
    #
    #     for n in range(1, pihalfX_order+1):
    #         if n % 4 == 1:
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(pix_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(piy_element)
    #             pihalfX_list.append(tauhalfX_element)
    #         if n % 4 == 2:
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(pix_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(piy_element)
    #             pihalfX_list.append(tauhalfX_element)
    #         if n % 4 == 3:
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(piy_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(pix_element)
    #             pihalfX_list.append(tauhalfX_element)
    #         if n % 4 == 0:
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(piy_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(tauhalfX_element)
    #             pihalfX_list.append(pix_element)
    #             pihalfX_list.append(tauhalfX_element)
    #
    #     pihalfZ_list = []
    #
    #     for m in range(1, pihalfZ_order+1):
    #         if m % 4 == 1:
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(pix_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(piy_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #         if m % 4 == 2:
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(pix_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(piy_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #         if m % 4 == 3:
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(piy_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(pix_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #         if m % 4 == 0:
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(piy_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #             pihalfZ_list.append(pix_element)
    #             pihalfZ_list.append(tauhalfZ_element)
    #
    #     Z_list = []
    #
    #     for m in range(1, (2*pihalfZ_order)+1):
    #         if m % 4 == 1:
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(pix_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(piy_element)
    #             Z_list.append(tauhalfZ_element)
    #         if m % 4 == 2:
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(pix_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(piy_element)
    #             Z_list.append(tauhalfZ_element)
    #         if m % 4 == 3:
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(piy_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(pix_element)
    #             Z_list.append(tauhalfZ_element)
    #         if m % 4 == 0:
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(piy_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(tauhalfZ_element)
    #             Z_list.append(pix_element)
    #             Z_list.append(tauhalfZ_element)
    #
    #     pulseqX_list = []
    #
    #     for k in range(1, uncond_pi_order+1):
    #         if k % 4 == 1:
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(pix_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(piy_element)
    #             pulseqX_list.append(tau_element)
    #         if k % 4 == 2:
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(pix_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(piy_element)
    #             pulseqX_list.append(tau_element)
    #         if k % 4 == 3:
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(piy_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(pix_element)
    #             pulseqX_list.append(tau_element)
    #         if k % 4 == 0:
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(piy_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(tau_element)
    #             pulseqX_list.append(pix_element)
    #             pulseqX_list.append(tau_element)
    #
    #     pulseqXhalf_list = []
    #
    #     for k in range(1, int(uncond_pi_order/2)+1):
    #         if k % 4 == 1:
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(pix_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(piy_element)
    #             pulseqXhalf_list.append(tau_element)
    #         if k % 4 == 2:
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(pix_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(piy_element)
    #             pulseqXhalf_list.append(tau_element)
    #         if k % 4 == 3:
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(piy_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(pix_element)
    #             pulseqXhalf_list.append(tau_element)
    #         if k % 4 == 0:
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(piy_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(tau_element)
    #             pulseqXhalf_list.append(pix_element)
    #             pulseqXhalf_list.append(tau_element)
    #
    #
    #     if polariz:
    #         xy8_block.append(initpihalf_element)
    #         for i, init in enumerate(pihalfX_list):
    #             xy8_block.append(init)
    #         xy8_block.append(pihalfafterX_element)
    #
    #         for i, zopr in enumerate(pihalfZ_list):
    #             xy8_block.append(zopr)
    #
    #         for i, init in enumerate(pihalfX_list):
    #             xy8_block.append(init)
    #         for i, laser_trig in enumerate(laser_block):
    #             xy8_block.append(laser_trig)
    #         xy8_block.append(delay_element)
    #         xy8_block.append(waiting_element)
    #
    #     if NV_ms1:
    #         xy8_block.append(pix_element)
    #
    #     for i, pulse in enumerate(state_value):
    #         if pulse == 'pix':
    #             for i, pulselist in enumerate(pulseqX_list):
    #                 xy8_block.append(pulselist)
    #         elif pulse == 'pihalfx':
    #             for i, pulselist in enumerate(pulseqXhalf_list):
    #                 xy8_block.append(pulselist)
    #         elif pulse == 'pihalfy':
    #             for i, pulselist in enumerate(pulseqXhalf_list):
    #                 xy8_block.append(pulselist)
    #             for i, pulselist in enumerate(pihalfZ_list):
    #                 xy8_block.append(pulselist)
    #         elif pulse == 'NOOP':
    #             xy8_block.append(NOOP_element)
    #     for i, pulse in enumerate(gate_value):
    #         if pulse == 'X':
    #             for i, pulselist in enumerate(pulseqX_list):
    #                 xy8_block.append(pulselist)
    #         elif pulse == 'Y':
    #             for i, pulselist in enumerate(pulseqX_list):
    #                 xy8_block.append(pulselist)
    #         elif pulse == 'Z':
    #             for i, pulselist in enumerate(Z_list):
    #                 xy8_block.append(pulselist)
    #         elif pulse == 'H':
    #             for i, pulselist in enumerate(pulseqXhalf_list):
    #                 xy8_block.append(pulselist)
    #             for i, pulselist in enumerate(pihalfZ_list):
    #                 xy8_block.append(pulselist)
    #             for i, pulselist in enumerate(pulseqX_list):
    #                 xy8_block.append(pulselist)
    #
    #     if NV_ms1:
    #         xy8_block.append(pix_element)
    #
    #     if readZ:
    #         for i, init in enumerate(pihalfX_list):
    #             xy8_block.append(init)
    #     if readY or readZ:
    #         for i, zopr in enumerate(pihalfZ_list):
    #             xy8_block.append(zopr)
    #     xy8_block.append(pihalf_read1_element)
    #     for i, init in enumerate(pihalfX_list):
    #         xy8_block.append(init)
    #     xy8_block.append(pihalf_read2_element)
    #     for i, laser_trig in enumerate(laser_block):
    #         xy8_block.append(laser_trig)
    #     xy8_block.append(delay_element)
    #     xy8_block.append(waiting_element)
    #
    #     created_blocks.append(xy8_block)
    #
    #     # Create block ensemble
    #     block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
    #     block_ensemble.append((xy8_block.name, 0))
    #
    #     self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)
    #
    #     # add metadata to invoke settings later on
    #     if polariz:
    #         number_of_lasers = 2 * 1
    #         ignore_list = [x for x in range(0, 2 * 1, 2)]
    #     else:
    #         number_of_lasers = 1
    #         ignore_list = list()
    #     block_ensemble.measurement_information['alternating'] = False
    #     block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
    #     block_ensemble.measurement_information['controlled_variable'] = order_array
    #     block_ensemble.measurement_information['units'] = ('s', '')
    #     block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
    #     block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
    #         ensemble=block_ensemble, created_blocks=created_blocks)
    #
    #     # append ensemble to created ensembles
    #     created_ensembles.append(block_ensemble)
    #     return created_blocks, created_ensembles, created_sequences

    def generate_singleQB3DDQPT(self, name='SingleQB3DDQPT',NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, num_of_points=50, multiplicity=1,
                         polariz=True, rabiY=True, readY=True, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = np.arange(num_of_points +1)*multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        #laser_element = self._get_laser_gate_element(length=self.laser_length, increment=0)
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseqX_list = []

        for k in range(1, uncond_pi_order+1):
            if k % 4 == 1:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 2:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 3:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 0:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)

        pulseqXhalf_list = []

        for k in range(1, int(uncond_pi_order/2)+1):
            if k % 4 == 1:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 2:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 3:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 0:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)


        pulseq_list = []
        for k in range(1, (num_of_points*multiplicity)+1):
            if k % multiplicity ==0 or k==1:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, pulse in enumerate(state_value):
                    if pulse == 'pix':
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'pihalfx':
                        for i, pulselist in enumerate(pulseqXhalf_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'pihalfy':
                        for i, pulselist in enumerate(pulseqXhalf_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfZ_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'NOOP':
                        xy8_block.append(NOOP_element)
                for i, pulse in enumerate(gate_value):
                    if pulse == 'X':
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'Y':
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'Z':
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'H':
                        for i, pulselist in enumerate(pulseqXhalf_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfZ_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'NOOP':
                        xy8_block.append(NOOP_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, gate in enumerate(pulseq_list):
                    xy8_block.append(gate)
                if rabiY:
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)

                if readZ:
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                if readY or readZ:
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if k % 4 == 1:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 2:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 3:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 4 == 0:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)




        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points +1)
            ignore_list = [x for x in range(0, 2 * (num_of_points+1), 2)]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_singleQB3DDQPT2(self, name='SingleQB3DDQPT2',NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, cond_gate=True,
                                 num_of_points=50, multiplicity=1, tau_read=271.5e-9,
                         polariz=True, readX=False, readY=False, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = np.arange(num_of_points +1)*multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        tau_readelement = self._get_idle_element(length=tau_read, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseqX_list = []

        for k in range(1, uncond_pi_order+1):
            if k % 4 == 1:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 2:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 3:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 0:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)

        pulseqXhalf_list = []

        for k in range(1, int(uncond_pi_order/2)+1):
            if k % 4 == 1:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 2:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 3:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 0:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)


        pulseq_list = []
        for k in range(1, (num_of_points*multiplicity)+1):
            if k % multiplicity ==0 or k==1:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, pulse in enumerate(state_value):
                    if pulse == 'pix':
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'pihalfx':
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'pihalfy':
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfZ_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'NOOP':
                        xy8_block.append(NOOP_element)
                for i, pulse in enumerate(gate_value):
                    if pulse == 'X':
                        if cond_gate:
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(pulseqX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'Y':
                        if cond_gate:
                            for i, pulselist in enumerate(pulseqX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(pulseqX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'Z':
                        if cond_gate:
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'H':
                        if cond_gate:
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pihalfZ_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pulseqX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(pulseqXhalf_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pihalfZ_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pulseqX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'NOOP':
                        xy8_block.append(NOOP_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, gate in enumerate(pulseq_list):
                    xy8_block.append(gate)

                if readX:
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                    for i, pulselist in enumerate(pulseqXhalf_list):
                        xy8_block.append(pulselist)
                elif readY:
                    for i, pulselist in enumerate(pulseqXhalf_list):
                        xy8_block.append(pulselist)
                elif readZ:
                    xy8_block.append(NOOP_element)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if k % 4 == 1:
                pulseq_list.append(tau_readelement)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_readelement)
            if k % 4 == 2:
                pulseq_list.append(tau_readelement)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_readelement)
            if k % 4 == 3:
                pulseq_list.append(tau_readelement)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_readelement)
            if k % 4 == 0:
                pulseq_list.append(tau_readelement)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(tau_readelement)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_readelement)




        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points +1)
            ignore_list = [x for x in range(0, 2 * (num_of_points+1), 2)]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_singleQB3DDQPT3(self, name='SingleQB3DDQPT3',NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, cond_gate=True,
                                 num_of_points=50, tau_step=271.5e-9,
                         polariz=True, num_pol=2, readX=False, readY=False, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks

        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        #tau_readelement = self._get_idle_element(length=tau_read, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseqX_list = []

        for k in range(1, uncond_pi_order+1):
            if k % 4 == 1:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 2:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 3:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)
            if k % 4 == 0:
                pulseqX_list.append(tau_element)
                pulseqX_list.append(piy_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(tau_element)
                pulseqX_list.append(pix_element)
                pulseqX_list.append(tau_element)

        pulseqXhalf_list = []

        for k in range(1, int(uncond_pi_order/2)+1):
            if k % 4 == 1:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 2:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 3:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)
            if k % 4 == 0:
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(piy_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(tau_element)
                pulseqXhalf_list.append(pix_element)
                pulseqXhalf_list.append(tau_element)


        pulseq_list = []
        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        for tau in tau_array:
            if polariz:
                for n in range(1, num_pol+1):
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

            if NV_ms1:
                xy8_block.append(pix_element)

            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                elif pulse == 'pihalfx':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                elif pulse == 'pihalfy':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)
                elif pulse == 'NOOP':
                    xy8_block.append(NOOP_element)
            for i, pulse in enumerate(gate_value):
                if pulse == 'X':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'Y':
                    if cond_gate:
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'Z':
                    if cond_gate:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                elif pulse == 'H':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfZ_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(pulseqXhalf_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfZ_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pulseqX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'NOOP':
                    xy8_block.append(NOOP_element)

            if NV_ms1:
                xy8_block.append(pix_element)

            if readX:
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                for i, pulselist in enumerate(pulseqXhalf_list):
                    xy8_block.append(pulselist)
            elif readY:
                for i, pulselist in enumerate(pulseqXhalf_list):
                    xy8_block.append(pulselist)
            elif readZ:
                xy8_block.append(NOOP_element)

            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            for i, zopr in enumerate(pihalfZ_list):
                xy8_block.append(zopr)
            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            xy8_block.append(self._get_mw_element(length=tau,
                                                  increment=0.0e-9,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0))
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)
        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = (num_pol+1) * (num_of_points +1)
            laser_list = [x for x in range(0, (num_pol+1) * (num_of_points+1), 1)]
            ignore_list = [laser_list[i] for i in range(len(laser_list)) if i%(num_pol+1)!=num_pol]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_xy2_initgate2(self, name='xy2_init2', init_phase=90, tauhalf_x=0.5e-6, pihalfX_order=4,
                               uctauhalf_x=0.5e-6, ucpi_order=4, pihalf_after_x=True,
                              pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9,
                              num_of_points=50, multiplicity=1,
                              init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, projX=False, projZ=True,
                              laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = np.arange(num_of_points + 1) * multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)
        tauhalfX_element = self._get_idle_element(length=tauhalf_x, increment=0)
        tauX_element = self._get_idle_element(length=2 * tauhalf_x, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)

        uctauhalfX_element = self._get_idle_element(length=uctauhalf_x, increment=0)

        tau_element = self._get_idle_element(length=tau_gate, increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order + 1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        ucpihalfX_list = []
        for n in range(1, int(ucpi_order/2) + 1):
            if n % 4 == 1:
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(pix_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(piy_element)
                ucpihalfX_list.append(uctauhalfX_element)
            if n % 4 == 2:
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(pix_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(piy_element)
                ucpihalfX_list.append(uctauhalfX_element)
            if n % 4 == 3:
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(piy_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(pix_element)
                ucpihalfX_list.append(uctauhalfX_element)
            if n % 4 == 0:
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(piy_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(uctauhalfX_element)
                ucpihalfX_list.append(pix_element)
                ucpihalfX_list.append(uctauhalfX_element)

        ucpiX_list = []
        for n in range(1, (ucpi_order) + 1):
            if n % 4 == 1:
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(pix_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(piy_element)
                ucpiX_list.append(uctauhalfX_element)
            if n % 4 == 2:
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(pix_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(piy_element)
                ucpiX_list.append(uctauhalfX_element)
            if n % 4 == 3:
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(piy_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(pix_element)
                ucpiX_list.append(uctauhalfX_element)
            if n % 4 == 0:
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(piy_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(uctauhalfX_element)
                ucpiX_list.append(pix_element)
                ucpiX_list.append(uctauhalfX_element)

        Z_list = []

        for m in range(1, pihalfZ_order + 1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulseq_list = []

        for k in range(1, (num_of_points * multiplicity) + 1):
            if k % multiplicity == 0 or k == 1:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    if pihalf_after_x:
                        xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if init_ms1:
                    xy8_block.append(pix_element)
                for i, gate in enumerate(pulseq_list):
                    xy8_block.append(gate)
                if init_ms1:
                    xy8_block.append(pix_element)

                if projX:
                    xy8_block.append(pihalf_read1_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalf_read2_element)

                if projZ:
                    for i, init in enumerate(ucpihalfX_list):
                        xy8_block.append(init)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)
                    xy8_block.append(pihalf_read1_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalf_read2_element)

                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)
            if k % 4 == 1:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 2:
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
            if k % 4 == 3:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
            if k % 4 == 0:
                pulseq_list.append(tau_element)
                pulseq_list.append(piy_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(tau_element)
                pulseq_list.append(pix_element)
                pulseq_list.append(tau_element)
        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points + 1)
            ignore_list = [x for x in range(0, 2 * (num_of_points + 1), 2)]
        else:
            number_of_lasers = num_of_points + 1
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_Axy4_initgate(self, name='axy4_initgate', init_phase=90, ctau_x=0.5e-6, pihalfX_order=4,
                               uctau_x=0.5e-6, ucpi_order=4, pihalf_after_x=True,
                              pihalf_after_x_phase=0, tauhalf_z=0.01e-6, pihalfZ_order=4, tau_gate=20e-9, f1=1.0,
                              num_of_points=50, multiplicity=1,
                              init_ms1=True, polariz=True, read_phase1=0, read_phase2=90, projX=False, projZ=True,
                              laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = np.arange(num_of_points + 1) * multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=init_phase)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=pihalf_after_x_phase)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase1)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=read_phase2)

        # Use a 180 deg phase shiftet pulse as 3pihalf pulse if microwave channel is analog
        if self.microwave_channel.startswith('a'):
            pi3half_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=init_phase + 180)
        else:
            pi3half_element = self._get_mw_element(length=3 * self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        # calculate the relative spacings of the composite pulse.
        spacings = self._get_axy_spacing(f1e=f1, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factors = np.zeros(6, dtype='float64')
        tau_factors[0] = spacings[0]
        tau_factors[1] = spacings[1] - spacings[0]
        tau_factors[2] = spacings[2] - spacings[1]
        tau_factors[3] = tau_factors[2]
        tau_factors[4] = tau_factors[1]
        tau_factors[5] = tau_factors[0]

        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)

        first_taucx = self._get_idle_element(
            length=1.0*tau_factors[0] * 2 * ctau_x - (self.rabi_period / 4), increment=0)
        last_taucx = self._get_idle_element(
            length=1.0*tau_factors[0] * 2 * ctau_x - (self.rabi_period / 4), increment=0)
        tau1cx_raw_element = self._get_idle_element(length=tau_factors[0] * 2 * ctau_x, increment=0)
        tau6cx_raw_element = self._get_idle_element(length=tau_factors[5] * 2 * ctau_x, increment=0)
        tau1cx_element = self._get_idle_element(
            length=tau_factors[0] * 2 * ctau_x - (self.rabi_period / 2), increment=0)
        tau2cx_element = self._get_idle_element(
            length=tau_factors[1] * 2 * ctau_x - (self.rabi_period / 2), increment=0)
        tau3cx_element = self._get_idle_element(
            length=tau_factors[2] * 2 * ctau_x - (self.rabi_period / 2), increment=0)
        tau4cx_element = self._get_idle_element(
            length=tau_factors[3] * 2 * ctau_x - (self.rabi_period / 2), increment=0)
        tau5cx_element = self._get_idle_element(
            length=tau_factors[4] * 2 * ctau_x - (self.rabi_period / 2), increment=0)
        tau6cx_element = self._get_idle_element(
            length=tau_factors[5] * 2 * ctau_x - (self.rabi_period / 2), increment=0)

        first_tauucx = self._get_idle_element(
            length=1.0*tau_factors[0] * 2 * uctau_x - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1.0*tau_factors[0] * 2 * uctau_x - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factors[0] * 2 * uctau_x, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factors[5] * 2 * uctau_x, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factors[0] * 2 * uctau_x - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factors[1] * 2 * uctau_x - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factors[2] * 2 * uctau_x - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factors[3] * 2 * uctau_x - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factors[4] * 2 * uctau_x - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factors[5] * 2 * uctau_x - (self.rabi_period / 2), increment=0)

        first_tau = self._get_idle_element(
            length=1.0*tau_factors[0] * 2 * tau_gate - (self.rabi_period / 4), increment=0)
        last_tau = self._get_idle_element(
            length=1.0*tau_factors[0] * 2 * tau_gate - (self.rabi_period / 4), increment=0)
        tau1_raw_element = self._get_idle_element(length=tau_factors[0] * 2 * tau_gate, increment=0)
        tau6_raw_element = self._get_idle_element(length=tau_factors[5] * 2 * tau_gate, increment=0)
        tau1_element = self._get_idle_element(
            length=tau_factors[0] * 2 * tau_gate - (self.rabi_period / 2), increment=0)
        tau2_element = self._get_idle_element(
            length=tau_factors[1] * 2 * tau_gate - (self.rabi_period / 2), increment=0)
        tau3_element = self._get_idle_element(
            length=tau_factors[2] * 2 * tau_gate - (self.rabi_period / 2), increment=0)
        tau4_element = self._get_idle_element(
            length=tau_factors[3] * 2 * tau_gate - (self.rabi_period / 2), increment=0)
        tau5_element = self._get_idle_element(
            length=tau_factors[4] * 2 * tau_gate - (self.rabi_period / 2), increment=0)
        tau6_element = self._get_idle_element(
            length=tau_factors[5] * 2 * tau_gate - (self.rabi_period / 2), increment=0)

        tauhalfZ_element = self._get_idle_element(length=tauhalf_z, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tauhalf_z, increment=0)



        tau_element = self._get_idle_element(length=tau_gate, increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []


        for n in range(1, pihalfX_order+1):
            if n % 2 !=0:
                if n!=1:
                    del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                    pihalfX_list.append(tau1cx_raw_element)
                if n == 1:
                    pihalfX_list.append(first_taucx)
                else:
                    pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # X
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(last_taucx)

            else:
                del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(last_taucx)


        ucpihalfX_list = []
        for n in range(1, int(ucpi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (ucpi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        Z_list = []

        for m in range(1, pihalfZ_order + 1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        pulse_block=[]

        for k in range(1, (num_of_points * multiplicity) + 1):
            if k % multiplicity == 0 or k == 1:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    if pihalf_after_x:
                        xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if init_ms1:
                    xy8_block.append(pix_element)
                for i, gate in enumerate(pulse_block):
                    xy8_block.append(gate)
                if init_ms1:
                    xy8_block.append(pix_element)

                if projX:
                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)
                    xy8_block.append(pihalf_read1_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalf_read2_element)

                if projZ:
                    for i, init in enumerate(ucpihalfX_list):
                        xy8_block.append(init)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)
                    xy8_block.append(pihalf_read1_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalf_read2_element)

                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if k % 2 !=0:
                if k!=1:
                    del pulse_block[len(pulse_block) - 1:len(pulse_block)]
                    pulse_block.append(tau1_raw_element)
                if k == 1:
                    pulse_block.append(first_tau)
                else:
                    pulse_block.append(tau1_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau6_raw_element)
                # Y
                pulse_block.append(tau6_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau1_raw_element)
                # X
                pulse_block.append(tau1_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau6_raw_element)
                # Y
                pulse_block.append(tau6_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(last_tau)

            else:
                del pulse_block[len(pulse_block) - 1:len(pulse_block)]
                pulse_block.append(tau1_raw_element)
                # Y
                pulse_block.append(tau1_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau6_raw_element)
                # X
                pulse_block.append(tau6_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau1_raw_element)
                # Y
                pulse_block.append(tau1_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau6_raw_element)
                # X
                pulse_block.append(tau6_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(last_tau)


        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points + 1)
            ignore_list = [x for x in range(0, 2 * (num_of_points + 1), 2)]
        else:
            number_of_lasers = num_of_points + 1
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_singleQB3ADDQPT2(self, name='SingleQB3ADDQPT2',NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4, f1_c=1.0,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, f1_uc=1.0, cond_gate=True,
                                 num_of_points=50, multiplicity=1, tau_read=271.5e-9, f1_r=1.0,
                         polariz=True, readX=False, readY=False, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        order_array = np.arange(num_of_points +1)*multiplicity
        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        # calculate the relative spacings of the composite pulse.
        spacingsc = self._get_axy_spacing(f1e=f1_c, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsc = np.zeros(6, dtype='float64')
        tau_factorsc[0] = spacingsc[0]
        tau_factorsc[1] = spacingsc[1] - spacingsc[0]
        tau_factorsc[2] = spacingsc[2] - spacingsc[1]
        tau_factorsc[3] = tau_factorsc[2]
        tau_factorsc[4] = tau_factorsc[1]
        tau_factorsc[5] = tau_factorsc[0]

        spacingsuc = self._get_axy_spacing(f1e=f1_uc, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsuc = np.zeros(6, dtype='float64')
        tau_factorsuc[0] = spacingsuc[0]
        tau_factorsuc[1] = spacingsuc[1] - spacingsuc[0]
        tau_factorsuc[2] = spacingsuc[2] - spacingsuc[1]
        tau_factorsuc[3] = tau_factorsuc[2]
        tau_factorsuc[4] = tau_factorsuc[1]
        tau_factorsuc[5] = tau_factorsuc[0]

        spacingsr = self._get_axy_spacing(f1e=f1_r, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsr = np.zeros(6, dtype='float64')
        tau_factorsr[0] = spacingsr[0]
        tau_factorsr[1] = spacingsr[1] - spacingsr[0]
        tau_factorsr[2] = spacingsr[2] - spacingsr[1]
        tau_factorsr[3] = tau_factorsr[2]
        tau_factorsr[4] = tau_factorsr[1]
        tau_factorsr[5] = tau_factorsr[0]




        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)

        first_taucx = self._get_idle_element(
            length=1.0*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        last_taucx = self._get_idle_element(
            length=1.0*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        tau1cx_raw_element = self._get_idle_element(length=tau_factorsc[0] * 2 * tau_condX, increment=0)
        tau6cx_raw_element = self._get_idle_element(length=tau_factorsc[5] * 2 * tau_condX, increment=0)
        tau1cx_element = self._get_idle_element(
            length=tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau2cx_element = self._get_idle_element(
            length=tau_factorsc[1] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau3cx_element = self._get_idle_element(
            length=tau_factorsc[2] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau4cx_element = self._get_idle_element(
            length=tau_factorsc[3] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau5cx_element = self._get_idle_element(
            length=tau_factorsc[4] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau6cx_element = self._get_idle_element(
            length=tau_factorsc[5] * 2 * tau_condX - (self.rabi_period / 2), increment=0)

        first_tauucx = self._get_idle_element(
            length=1.0*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1.0*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factorsuc[0] * 2 * tau_uncond, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factorsuc[5] * 2 * tau_uncond, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factorsuc[1] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factorsuc[2] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factorsuc[3] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factorsuc[4] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factorsuc[5] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)

        first_tau = self._get_idle_element(
            length=1.0*tau_factorsr[0] * 2 * tau_read - (self.rabi_period / 4), increment=0)
        last_tau = self._get_idle_element(
            length=1.0*tau_factorsr[0] * 2 * tau_read - (self.rabi_period / 4), increment=0)
        tau1_raw_element = self._get_idle_element(length=tau_factorsr[0] * 2 * tau_read, increment=0)
        tau6_raw_element = self._get_idle_element(length=tau_factorsr[5] * 2 * tau_read, increment=0)
        tau1_element = self._get_idle_element(
            length=tau_factorsr[0] * 2 * tau_read - (self.rabi_period / 2), increment=0)
        tau2_element = self._get_idle_element(
            length=tau_factorsr[1] * 2 * tau_read - (self.rabi_period / 2), increment=0)
        tau3_element = self._get_idle_element(
            length=tau_factorsr[2] * 2 * tau_read - (self.rabi_period / 2), increment=0)
        tau4_element = self._get_idle_element(
            length=tau_factorsr[3] * 2 * tau_read - (self.rabi_period / 2), increment=0)
        tau5_element = self._get_idle_element(
            length=tau_factorsr[4] * 2 * tau_read - (self.rabi_period / 2), increment=0)
        tau6_element = self._get_idle_element(
            length=tau_factorsr[5] * 2 * tau_read - (self.rabi_period / 2), increment=0)


        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        tau_readelement = self._get_idle_element(length=tau_read, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []


        for n in range(1, pihalfX_order+1):
            if n % 2 !=0:
                if n!=1:
                    del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                    pihalfX_list.append(tau1cx_raw_element)
                if n == 1:
                    pihalfX_list.append(first_taucx)
                else:
                    pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # X
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(last_taucx)

            else:
                del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(last_taucx)


        ucpihalfX_list = []
        for n in range(1, int(uncond_pi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (uncond_pi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        Z_list = []

        for m in range(1, pihalfZ_order + 1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)


        pulse_block=[]

        for k in range(1, (num_of_points * multiplicity) + 1):
            if k % multiplicity == 0 or k == 1:
                if polariz:
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, pulse in enumerate(state_value):
                    if pulse == 'pix':
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'pihalfx':
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'pihalfy':
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                    elif pulse == 'NOOP':
                        xy8_block.append(NOOP_element)
                for i, pulse in enumerate(gate_value):
                    if pulse == 'X':
                        if cond_gate:
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(ucpiX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'sqX':
                        if cond_gate:
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(ucpihalfX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'Y':
                        if cond_gate:
                            for i, pulselist in enumerate(ucpiX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(ucpiX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'Z':
                        if cond_gate:
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'H':
                        if cond_gate:
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(pihalfX_list):
                                xy8_block.append(pulselist)
                        else:
                            for i, pulselist in enumerate(ucpihalfX_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(Z_list):
                                xy8_block.append(pulselist)
                            for i, pulselist in enumerate(ucpiX_list):
                                xy8_block.append(pulselist)
                    elif pulse == 'NOOP':
                        xy8_block.append(NOOP_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, gate in enumerate(pulse_block):
                    xy8_block.append(gate)

                if readX:
                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)
                    for i, pulselist in enumerate(ucpihalfX_list):
                        xy8_block.append(pulselist)
                elif readY:
                    for i, pulselist in enumerate(ucpihalfX_list):
                        xy8_block.append(pulselist)
                elif readZ:
                    xy8_block.append(NOOP_element)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if k % 2 !=0:
                if k!=1:
                    del pulse_block[len(pulse_block) - 1:len(pulse_block)]
                    pulse_block.append(tau1_raw_element)
                if k == 1:
                    pulse_block.append(first_tau)
                else:
                    pulse_block.append(tau1_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau6_raw_element)
                # Y
                pulse_block.append(tau6_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau1_raw_element)
                # X
                pulse_block.append(tau1_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau6_raw_element)
                # Y
                pulse_block.append(tau6_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(last_tau)

            else:
                del pulse_block[len(pulse_block) - 1:len(pulse_block)]
                pulse_block.append(tau1_raw_element)
                # Y
                pulse_block.append(tau1_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau6_raw_element)
                # X
                pulse_block.append(tau6_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau1_raw_element)
                # Y
                pulse_block.append(tau1_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau2_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau3_element)
                pulse_block.append(piy_90_element)
                pulse_block.append(tau4_element)
                pulse_block.append(piy_0_element)
                pulse_block.append(tau5_element)
                pulse_block.append(piy_30_element)
                pulse_block.append(tau6_raw_element)
                # X
                pulse_block.append(tau6_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(tau5_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau4_element)
                pulse_block.append(pix_90_element)
                pulse_block.append(tau3_element)
                pulse_block.append(pix_0_element)
                pulse_block.append(tau2_element)
                pulse_block.append(pix_30_element)
                pulse_block.append(last_tau)




        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points +1)
            ignore_list = [x for x in range(0, 2 * (num_of_points+1), 2)]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = order_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_singleQB3ADDQPT3(self, name='SingleQB3ADDQPT3',NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4, f1_c=1.0,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, f1_uc=1.0, cond_gate=True,
                                 num_of_points=50, tau_step=271.5e-9,
                         polariz=True, num_pol=2, readX=False, readY=False, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = np.arange(num_of_points +1)*tau_step
        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        # calculate the relative spacings of the composite pulse.
        spacingsc = self._get_axy_spacing(f1e=f1_c, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsc = np.zeros(6, dtype='float64')
        tau_factorsc[0] = spacingsc[0]
        tau_factorsc[1] = spacingsc[1] - spacingsc[0]
        tau_factorsc[2] = spacingsc[2] - spacingsc[1]
        tau_factorsc[3] = tau_factorsc[2]
        tau_factorsc[4] = tau_factorsc[1]
        tau_factorsc[5] = tau_factorsc[0]

        spacingsuc = self._get_axy_spacing(f1e=f1_uc, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsuc = np.zeros(6, dtype='float64')
        tau_factorsuc[0] = spacingsuc[0]
        tau_factorsuc[1] = spacingsuc[1] - spacingsuc[0]
        tau_factorsuc[2] = spacingsuc[2] - spacingsuc[1]
        tau_factorsuc[3] = tau_factorsuc[2]
        tau_factorsuc[4] = tau_factorsuc[1]
        tau_factorsuc[5] = tau_factorsuc[0]

        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)

        first_taucx = self._get_idle_element(
            length=1*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        last_taucx = self._get_idle_element(
            length=1*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        tau1cx_raw_element = self._get_idle_element(length=tau_factorsc[0] * 2 * tau_condX, increment=0)
        tau6cx_raw_element = self._get_idle_element(length=tau_factorsc[5] * 2 * tau_condX, increment=0)
        tau1cx_element = self._get_idle_element(
            length=tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau2cx_element = self._get_idle_element(
            length=tau_factorsc[1] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau3cx_element = self._get_idle_element(
            length=tau_factorsc[2] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau4cx_element = self._get_idle_element(
            length=tau_factorsc[3] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau5cx_element = self._get_idle_element(
            length=tau_factorsc[4] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau6cx_element = self._get_idle_element(
            length=tau_factorsc[5] * 2 * tau_condX - (self.rabi_period / 2), increment=0)

        first_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factorsuc[0] * 2 * tau_uncond, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factorsuc[5] * 2 * tau_uncond, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factorsuc[1] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factorsuc[2] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factorsuc[3] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factorsuc[4] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factorsuc[5] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)


        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)


        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []


        for n in range(1, pihalfX_order+1):
            if n % 2 !=0:
                if n!=1:
                    del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                    pihalfX_list.append(tau1cx_raw_element)
                if n == 1:
                    pihalfX_list.append(first_taucx)
                else:
                    pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # X
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(last_taucx)

            else:
                del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(last_taucx)


        ucpihalfX_list = []
        for n in range(1, int(uncond_pi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (uncond_pi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        Z_list = []

        for m in range(1, pihalfZ_order + 1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)



        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        for tau in tau_array:
            if polariz:
                for n in range(1, num_pol+1):
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                elif pulse == 'pihalfx':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                elif pulse == 'pihalfy':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(Z_list):
                        xy8_block.append(pulselist)
                elif pulse == 'NOOP':
                    xy8_block.append(NOOP_element)

            if NV_ms1:
                xy8_block.append(pix_element)
            for i, pulse in enumerate(gate_value):
                if pulse == 'X':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'sqX':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpihalfX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'Y':
                    if cond_gate:
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'Z':
                    if cond_gate:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)

                elif pulse == 'sqZ':
                    if cond_gate:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)

                    else:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)

                elif pulse == 'H':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'NOOP':
                    xy8_block.append(NOOP_element)

            if NV_ms1:
                xy8_block.append(pix_element)

            if readX:
                ###order of x and z changed on 8.01 after the first full run
                for i, read in enumerate(Z_list):
                    xy8_block.append(read)
                for i, read in enumerate(ucpihalfX_list):
                    xy8_block.append(read)
            elif readY:
                for i, read in enumerate(ucpihalfX_list):
                    xy8_block.append(read)
            elif readZ:
                xy8_block.append(NOOP_element)

            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            for i, zopr in enumerate(Z_list):
                xy8_block.append(zopr)
            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            xy8_block.append(self._get_mw_element(length=tau,
                                                  increment=0.0e-9,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0))
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = (num_pol+1) * (num_of_points +1)
            laser_list = [x for x in range(0, (num_pol+1) * (num_of_points+1), 1)]
            ignore_list = [laser_list[i] for i in range(len(laser_list)) if i%(num_pol+1)!=num_pol]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_singleQB3ADDQPT4(self, name='SingleQB3ADDQPT4',NV_ms1=True, Init_state=SingleQubitStates.State0,
                              Gate=SingleQubitGates.GateX, tau_condX=0.5e-6, pihalfX_order=4,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, f1_uc=1.0, cond_gate=True,
                                 num_of_points=50, tau_step=271.5e-9,
                         polariz=True, num_pol=2, readX=False, readY=False, readZ=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks
        tau_array = np.arange(num_of_points +1)*tau_step
        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)


        spacingsuc = self._get_axy_spacing(f1e=f1_uc, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsuc = np.zeros(6, dtype='float64')
        tau_factorsuc[0] = spacingsuc[0]
        tau_factorsuc[1] = spacingsuc[1] - spacingsuc[0]
        tau_factorsuc[2] = spacingsuc[2] - spacingsuc[1]
        tau_factorsuc[3] = tau_factorsuc[2]
        tau_factorsuc[4] = tau_factorsuc[1]
        tau_factorsuc[5] = tau_factorsuc[0]

        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)

        first_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factorsuc[0] * 2 * tau_uncond, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factorsuc[5] * 2 * tau_uncond, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factorsuc[1] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factorsuc[2] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factorsuc[3] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factorsuc[4] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factorsuc[5] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)

        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)


        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)


        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)


        ucpihalfX_list = []
        for n in range(1, int(uncond_pi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (uncond_pi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        Z_list = []

        for m in range(1, pihalfZ_order + 1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)



        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        for tau in tau_array:
            if polariz:
                for n in range(1, num_pol+1):
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)

                    for i, zopr in enumerate(Z_list):
                        xy8_block.append(zopr)

                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)

            for i, pulse in enumerate(state_value):
                if pulse == 'pix':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                elif pulse == 'pihalfx':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                elif pulse == 'pihalfy':
                    for i, pulselist in enumerate(pihalfX_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(Z_list):
                        xy8_block.append(pulselist)
                elif pulse == 'NOOP':
                    xy8_block.append(NOOP_element)

            if NV_ms1:
                xy8_block.append(pix_element)
            for i, pulse in enumerate(gate_value):
                if pulse == 'X':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'sqX':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpihalfX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'Y':
                    if cond_gate:
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'Z':
                    if cond_gate:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)

                elif pulse == 'sqZ':
                    if cond_gate:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)

                    else:
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)

                elif pulse == 'H':
                    if cond_gate:
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(pihalfX_list):
                            xy8_block.append(pulselist)
                    else:
                        for i, pulselist in enumerate(ucpihalfX_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(Z_list):
                            xy8_block.append(pulselist)
                        for i, pulselist in enumerate(ucpiX_list):
                            xy8_block.append(pulselist)
                elif pulse == 'NOOP':
                    xy8_block.append(NOOP_element)

            if NV_ms1:
                xy8_block.append(pix_element)

            if readX:
                ###order of x and z changed on 8.01 after the first full run
                xy8_block.append(NOOP_element)
            elif readY:
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)
            elif readZ:
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(Z_list):
                    xy8_block.append(zopr)


            xy8_block.append(pihalf_read1_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            xy8_block.append(pihalf_read2_element)
            xy8_block.append(self._get_mw_element(length=tau,
                                                  increment=0.0e-9,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0))
            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = (num_pol+1) * (num_of_points +1)
            laser_list = [x for x in range(0, (num_pol+1) * (num_of_points+1), 1)]
            ignore_list = [laser_list[i] for i in range(len(laser_list)) if i%(num_pol+1)!=num_pol]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    @staticmethod
    def _get_axy_spacing(f1e=1.0, f2e=0.0, f3e=0.0, f4e=0.0):
        import scipy.optimize as optim
        # Initial angles for solver
        x0 = np.array([0.1 * np.pi, 0.3 * np.pi, 0.6 * np.pi, 0.9 * np.pi], dtype='float64')

        # define function to solve
        def kdd5even(x):
            theta1 = x[0]
            theta2 = x[1]
            theta3 = x[2]
            theta4 = x[3]

            theta5 = theta2 + theta4 - (theta1 + theta3) + np.pi / 2

            return_val = np.zeros(4, dtype='float64')
            return_val[0] = f1e - 4 / (1 * np.pi) * (
                        np.sin(1 * theta1) + np.sin(1 * theta3) + np.sin(1 * theta5) - np.sin(1 * theta2) - np.sin(
                    1 * theta4))
            return_val[1] = f2e - 4 / (2 * np.pi) * (
                        np.sin(2 * theta1) + np.sin(2 * theta3) + np.sin(2 * theta5) - np.sin(2 * theta2) - np.sin(
                    2 * theta4))
            return_val[2] = f3e - 4 / (3 * np.pi) * (
                        np.sin(3 * theta1) + np.sin(3 * theta3) + np.sin(3 * theta5) - np.sin(3 * theta2) - np.sin(
                    3 * theta4))
            return_val[3] = f4e - 4 / (4 * np.pi) * (
                        np.sin(4 * theta1) + np.sin(4 * theta3) + np.sin(4 * theta5) - np.sin(4 * theta2) - np.sin(
                    4 * theta4))
            return return_val

        # Solve for kdd5even(x) = 0
        solved_x = optim.fsolve(kdd5even, x0)
        solved_x = np.append(solved_x,
                             solved_x[1] + solved_x[3] - (solved_x[0] + solved_x[2]) + np.pi / 2)
        return solved_x / (2 * np.pi)



    def generate_TQQB12QPT(self, name='TQQB12QPT', Init_state=TQQPTstates.State00, Gate=Gates.NOOP, Readout=TQreadout.RO1,
                                  RF_freq1=5.1e6, RF_amp1=0.02,  RF_freq2=5.1e6, RF_amp2=0.02, RF_pi_len1=20.0e-6, RF_pi_len2=20.0e-6,
                                  NV_freq=1.44e9, NV_freq2=1.44e9, NV_amp=0.05, NV_pi_len=2.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value
        read_value= Readout.value

        # get tau array for measurement ticks
        tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        freqs = [RF_freq1, RF_freq2]
        amps = [RF_amp1, RF_amp2]
        phasesx = [0.0, 0.0]
        phasesy = [90.0, 90.0]

        if RF_pi_len1 > RF_pi_len2:
            RF_pi_len = RF_pi_len2
        else:
            RF_pi_len = RF_pi_len1


        Npix_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npiy_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        Npihalfx_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npihalfy_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        cNVpix_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpiy_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        cNVpihalfx_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpihalfy_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        NVpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NVpihalfx_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpihalfy_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NOOP_element = self._get_idle_element(length=NV_pi_len,
                                              increment=0)

        cN1pix_element = self._get_rf_element(length=RF_pi_len1,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1piy_element = self._get_rf_element(length=RF_pi_len1,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN1pihalfx_element = self._get_rf_element(length=RF_pi_len1/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1pihalfy_element = self._get_rf_element(length=RF_pi_len1/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN2pix_element = self._get_rf_element(length=RF_pi_len2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2piy_element = self._get_rf_element(length=RF_pi_len2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)

        cN2pihalfx_element = self._get_rf_element(length=RF_pi_len2/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2pihalfy_element = self._get_rf_element(length=RF_pi_len2/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)



        statetomo_block = PulseBlock(name=name)


        for i, pulse in enumerate(state_value):
            if pulse =='00':
                statetomo_block.append(NOOP_element)
            elif pulse =='01':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npix_element)
            elif pulse =='0X':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npihalfx_element)
            elif pulse =='0Y':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90))
                statetomo_block.append(Npihalfy_element)

            elif pulse =='10':
                statetomo_block.append(NVpix_element)
            elif pulse =='11':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npix_element)
                statetomo_block.append(NVpix_element)
            elif pulse =='1X':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npihalfx_element)
                statetomo_block.append(NVpix_element)
            elif pulse =='1Y':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90))
                statetomo_block.append(Npihalfy_element)
                statetomo_block.append(NVpix_element)

            elif pulse =='X0':
                statetomo_block.append(NVpihalfx_element)
            elif pulse =='X1':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npix_element)
                statetomo_block.append(NVpihalfx_element)
            elif pulse =='XX':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npihalfx_element)
                statetomo_block.append(NVpihalfx_element)
            elif pulse =='XY':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90))
                statetomo_block.append(Npihalfy_element)
                statetomo_block.append(NVpihalfx_element)

            elif pulse =='Y0':
                statetomo_block.append(NVpihalfy_element)
            elif pulse =='Y1':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npix_element)
                statetomo_block.append(NVpihalfy_element)
            elif pulse =='YX':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))
                statetomo_block.append(Npihalfx_element)
                statetomo_block.append(NVpihalfy_element)
            elif pulse =='YY':
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90))
                statetomo_block.append(Npihalfy_element)
                statetomo_block.append(NVpihalfy_element)

        for i, gate in enumerate(gate_value):
            if gate == 'CnNOTe':
                statetomo_block.append(cNVpix_element)
            else:
                statetomo_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        for i, pulse in enumerate(read_value):
            if pulse == 'RO1':
                readRabix_element = self._get_mw_element(length=0.0e-9,
                                                                  increment=tau_step,
                                                                  amp=NV_amp,
                                                                  freq=NV_freq,
                                                                  phase=0)

                statetomo_block.append(readRabix_element)

            elif pulse == 'RO2':
                readRabix_element = self._get_rf_element(length=0.0e-9,
                                                         increment=tau_step,
                                                         amp=RF_amp1,
                                                         freq=RF_freq1,
                                                         phase=0)

                statetomo_block.append(readRabix_element)

            elif pulse == 'RO3':
                readRabix_element = self._get_rf_element(length=0.0e-9,
                                                         increment=tau_step,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=0)

                statetomo_block.append(readRabix_element)
                statetomo_block.append(NVpix_element)

            elif pulse == 'RO4':
                readRabix_element = self._get_mw_element(length=0.0e-9,
                                                         increment=tau_step,
                                                         amp=NV_amp,
                                                         freq=NV_freq,
                                                         phase=0)

                statetomo_block.append(cN1pix_element)
                statetomo_block.append(readRabix_element)
                # readRabix_element = self._get_rf_element(length=0.0e-9,
                #                                          increment=tau_step,
                #                                          amp=RF_amp1,
                #                                          freq=RF_freq2,
                #                                          phase=0)
                #
                # statetomo_block.append(cNVpix_element)
                # statetomo_block.append(readRabix_element)


            elif pulse == 'RO5':
                # readRabix_element = self._get_rf_element(length=0.0e-9,
                #                                         increment=tau_step,
                #                                         amp=RF_amp2,
                #                                         freq=RF_freq2,
                #                                         phase=0)
                #
                # statetomo_block.append(cNVpix_element)
                # statetomo_block.append(readRabix_element)
                # statetomo_block.append(cNVpix_element)

                readRabix_element = self._get_mw_element(length=0.0e-9,
                                                         increment=tau_step,
                                                         amp=NV_amp,
                                                         freq=NV_freq,
                                                         phase=0)

                statetomo_block.append(cN2pix_element)
                statetomo_block.append(readRabix_element)

            elif pulse == 'RO6':
                readRabix_element = self._get_mw_element(length=0.0e-9,
                                                        increment=tau_step,
                                                        amp=NV_amp,
                                                        freq=NV_freq,
                                                        phase=0)
                if RF_pi_len1 > RF_pi_len2:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0))
                else:
                    statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0))

                statetomo_block.append(Npix_element)
                statetomo_block.append(readRabix_element)

        for i, laser_trig in enumerate(laser_block):
            statetomo_block.append(laser_trig)
        statetomo_block.append(waiting_element)
        if alternating:
            for i, pulse in enumerate(state_value):
                if pulse == '00':
                    statetomo_block.append(NOOP_element)
                elif pulse == '01':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npix_element)
                elif pulse == '0X':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npihalfx_element)
                elif pulse == '0Y':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=90))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=90))
                    statetomo_block.append(Npihalfy_element)

                elif pulse == '10':
                    statetomo_block.append(NVpix_element)
                elif pulse == '11':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npix_element)
                    statetomo_block.append(NVpix_element)
                elif pulse == '1X':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npihalfx_element)
                    statetomo_block.append(NVpix_element)
                elif pulse == '1Y':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=90))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=90))
                    statetomo_block.append(Npihalfy_element)
                    statetomo_block.append(NVpix_element)

                elif pulse == 'X0':
                    statetomo_block.append(NVpihalfx_element)
                elif pulse == 'X1':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npix_element)
                    statetomo_block.append(NVpihalfx_element)
                elif pulse == 'XX':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npihalfx_element)
                    statetomo_block.append(NVpihalfx_element)
                elif pulse == 'XY':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=90))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=90))
                    statetomo_block.append(Npihalfy_element)
                    statetomo_block.append(NVpihalfx_element)

                elif pulse == 'Y0':
                    statetomo_block.append(NVpihalfy_element)
                elif pulse == 'Y1':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npix_element)
                    statetomo_block.append(NVpihalfy_element)
                elif pulse == 'YX':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npihalfx_element)
                    statetomo_block.append(NVpihalfy_element)
                elif pulse == 'YY':
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2)/2,
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=90))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1)/2,
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=90))
                    statetomo_block.append(Npihalfy_element)
                    statetomo_block.append(NVpihalfy_element)

            for i, gate in enumerate(gate_value):
                if gate == 'CnNOTe':
                    statetomo_block.append(cNVpix_element)
                else:
                    statetomo_block.append(self._get_idle_element(length=0.0e-9, increment=0))

            for i, pulse in enumerate(read_value):
                if pulse == 'RO1':
                    readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                             increment=tau_step,
                                                             amp=NV_amp,
                                                             freq=NV_freq,
                                                             phase=90)
                    statetomo_block.append(readRabiy_element)

                elif pulse == 'RO2':
                    readRabiy_element = self._get_rf_element(length=0.0e-9,
                                                             increment=tau_step,
                                                             amp=RF_amp1,
                                                             freq=RF_freq1,
                                                             phase=90)
                    statetomo_block.append(readRabiy_element)

                elif pulse == 'RO3':
                    readRabiy_element = self._get_rf_element(length=0.0e-9,
                                                             increment=tau_step,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=90)
                    statetomo_block.append(readRabiy_element)
                    statetomo_block.append(NVpix_element)

                elif pulse == 'RO4':
                    readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                             increment=tau_step,
                                                             amp=NV_amp,
                                                             freq=NV_freq,
                                                             phase=90)

                    statetomo_block.append(cN1pix_element)
                    statetomo_block.append(readRabiy_element)
                    # readRabiy_element = self._get_rf_element(length=0.0e-9,
                    #                                          increment=tau_step,
                    #                                          amp=RF_amp1,
                    #                                          freq=RF_freq1,
                    #                                          phase=90)
                    # statetomo_block.append(cNVpix_element)
                    # statetomo_block.append(readRabiy_element)

                elif pulse == 'RO5':
                    readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                             increment=tau_step,
                                                             amp=NV_amp,
                                                             freq=NV_freq,
                                                             phase=90)

                    statetomo_block.append(cN2pix_element)
                    statetomo_block.append(readRabiy_element)
                    # readRabiy_element = self._get_rf_element(length=0.0e-9,
                    #                                          increment=tau_step,
                    #                                          amp=RF_amp2,
                    #                                          freq=RF_freq2,
                    #                                          phase=90)
                    # statetomo_block.append(cNVpix_element)
                    # statetomo_block.append(readRabiy_element)
                    # statetomo_block.append(cNVpix_element)

                elif pulse == 'RO6':
                    readRabiy_element = self._get_mw_element(length=0.0e-9,
                                                             increment=tau_step,
                                                             amp=NV_amp,
                                                             freq=NV_freq,
                                                             phase=90)
                    if RF_pi_len1 > RF_pi_len2:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len1 - RF_pi_len2),
                                                                    increment=0,
                                                                    amp=RF_amp1,
                                                                    freq=RF_freq1,
                                                                    phase=0))
                    else:
                        statetomo_block.append(self._get_rf_element(length=(RF_pi_len2 - RF_pi_len1),
                                                                    increment=0,
                                                                    amp=RF_amp2,
                                                                    freq=RF_freq2,
                                                                    phase=0))
                    statetomo_block.append(Npix_element)
                    statetomo_block.append(readRabiy_element)

            for i, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)


        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, num_of_points - 1))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_TQQB12DDQPT(self, name='TQQB12DDQPT', Init_state=TQQPTstates.State00, Gate=Gates.NOOP, Readout=TQreadout.RO1,
                                  RF_freq1=5.1e6, RF_amp1=0.02,  RF_freq2=5.1e6, RF_amp2=0.02, RF_pi_len=20.0e-6, cyclesf=11, DD_Pi_N=6,
                                  rot_phase = 0.0, NV_freq=1.44e9, NV_freq2=1.44e9, NV_amp=0.05, NV_pi_len=2.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, incl_pi_len=False, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value
        read_value= Readout.value


        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        MWpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tau = cyclesf * (1 / RF_freq2) + 1.0e-9
        pulse_blockC0q2 = []
        pulse_blockDD = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq2) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq2)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq2,
                                     RF_freq1,
                                     0.0,
                                     tau + (self.rabi_period/4),
                                     0)
        else:
            phase = self._inst_phase(RF_freq2,
                                     RF_freq1,
                                     0.0,
                                     tau,
                                     0)

        pulse_blockucq2Pi = []
        pulse_blockDD2Pi = []
        tau_countucPi = 1
        for j in range(1, int(DD_Pi_N) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                    del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2Pi.append(tauidle_element)
                    pulse_blockucq2Pi.append(RFtau_element2)
                    pulse_blockucq2Pi.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2Pi.append(tauidle_element)
                    pulse_blockDD2Pi.append(DDidle_element2)
                    pulse_blockDD2Pi.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2Pi.append(tauidle_element)
                    pulse_blockucq2Pi.append(RFtau_element2)
                    pulse_blockucq2Pi.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2Pi.append(tauidle_element)
                    pulse_blockDD2Pi.append(DDidle_element2)
                    pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=4
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=7
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=10
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

        for n in range(1, int(DD_Pi_N/2)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, int(DD_Pi_N/2) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        pulse_blockDD2 = []
        tau_countuc = (2 * (DD_Pi_N/2)) + 1
        for j in range(1, int(DD_Pi_N/2) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

        pulse_blockC0q2pi_halfx = []
        pulse_blockDDpi_halfx= []
        tau_countc0pi_halfx = 1
        for n in range(1, int(DD_Pi_N/4)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                    del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                    #k=1
                    if tau_countc0pi_halfx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfx.append(tauidle_element)
                    pulse_blockC0q2pi_halfx.append(RFtau_element)
                    pulse_blockC0q2pi_halfx.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfx.append(tauidle_element)
                    pulse_blockDDpi_halfx.append(DDidle_element)
                    pulse_blockDDpi_halfx.append(tauidle_element)

                else:

                    if tau_countc0pi_halfx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfx.append(tauidle_element)
                    pulse_blockC0q2pi_halfx.append(RFtau_element)
                    pulse_blockC0q2pi_halfx.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfx.append(tauidle_element)
                    pulse_blockDDpi_halfx.append(DDidle_element)
                    pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=2

                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=3
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=4
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=5
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=6
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=7
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=8
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=9
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=10
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=11
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=12
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

        pulse_blockC1q2pi_halfx = []
        tau_countc1pi_halfx = 1
        for n in range(1, int(DD_Pi_N/4) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                    # k=1
                    if tau_countc1pi_halfx % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfx.append(tauidle_element)
                    pulse_blockC1q2pi_halfx.append(RFtau_element)
                    pulse_blockC1q2pi_halfx.append(tauidle_element)

                else:

                    if tau_countc1pi_halfx % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfx.append(tauidle_element)
                    pulse_blockC1q2pi_halfx.append(RFtau_element)
                    pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=2

                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=3
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=4
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=5
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=6
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=7
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=8
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=9
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=10
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=11
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=12
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

        pulse_blockucq2pi_halfx = []
        pulse_blockDD2pi_halfx = []
        tau_countucpi_halfx = (2 * (DD_Pi_N/4)) + 1
        for j in range(1, int(DD_Pi_N/4) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                    del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfx.append(tauidle_element)
                    pulse_blockucq2pi_halfx.append(RFtau_element2)
                    pulse_blockucq2pi_halfx.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfx.append(tauidle_element)
                    pulse_blockDD2pi_halfx.append(DDidle_element2)
                    pulse_blockDD2pi_halfx.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfx.append(tauidle_element)
                    pulse_blockucq2pi_halfx.append(RFtau_element2)
                    pulse_blockucq2pi_halfx.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfx.append(tauidle_element)
                    pulse_blockDD2pi_halfx.append(DDidle_element2)
                    pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=4
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=7
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=10
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)


        pulse_blockC0q2pi_halfy = []
        pulse_blockDDpi_halfy= []
        tau_countc0pi_halfy = 1
        for n in range(1, int(DD_Pi_N/4)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                    del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                    #k=1
                    if tau_countc0pi_halfy % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfy.append(tauidle_element)
                    pulse_blockC0q2pi_halfy.append(RFtau_element)
                    pulse_blockC0q2pi_halfy.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfy.append(tauidle_element)
                    pulse_blockDDpi_halfy.append(DDidle_element)
                    pulse_blockDDpi_halfy.append(tauidle_element)

                else:

                    if tau_countc0pi_halfy % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfy.append(tauidle_element)
                    pulse_blockC0q2pi_halfy.append(RFtau_element)
                    pulse_blockC0q2pi_halfy.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfy.append(tauidle_element)
                    pulse_blockDDpi_halfy.append(DDidle_element)
                    pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=2

                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=3
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=4
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=5
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=6
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=7
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=8
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=9
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=10
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=11
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=12
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)


        pulse_blockC1q2pi_halfy = []
        tau_countc1pi_halfy = 1
        for n in range(1, int(DD_Pi_N/4) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                    # k=1
                    if tau_countc1pi_halfy % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfy.append(tauidle_element)
                    pulse_blockC1q2pi_halfy.append(RFtau_element)
                    pulse_blockC1q2pi_halfy.append(tauidle_element)

                else:

                    if tau_countc1pi_halfy % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfy.append(tauidle_element)
                    pulse_blockC1q2pi_halfy.append(RFtau_element)
                    pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=2

                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=3
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=4
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=5
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=6
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=7
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=8
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=9
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=10
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=11
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=12
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

        pulse_blockucq2pi_halfy = []
        pulse_blockDD2pi_halfy = []
        tau_countucpi_halfy = (2 * (DD_Pi_N/4)) + 1
        for j in range(1, int(DD_Pi_N/4) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                    del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfy.append(tauidle_element)
                    pulse_blockucq2pi_halfy.append(RFtau_element2)
                    pulse_blockucq2pi_halfy.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfy.append(tauidle_element)
                    pulse_blockDD2pi_halfy.append(DDidle_element2)
                    pulse_blockDD2pi_halfy.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfy.append(tauidle_element)
                    pulse_blockucq2pi_halfy.append(RFtau_element2)
                    pulse_blockucq2pi_halfy.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfy.append(tauidle_element)
                    pulse_blockDD2pi_halfy.append(DDidle_element2)
                    pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=4
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=7
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=10
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)


        freqs = [RF_freq1, RF_freq2]
        amps = [RF_amp1, RF_amp2]
        phasesx = [0.0, 0.0]
        phasesy = [90.0, 90.0]

        Npix_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npiy_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        Npihalfx_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npihalfy_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        cNVpix_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpiy_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        cNVpihalfx_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpihalfy_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        NVpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NVpihalfx_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpihalfy_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NOOP_element = self._get_idle_element(length=NV_pi_len,
                                              increment=0)

        cN1pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1piy_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN1pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN2pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2piy_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)

        cN2pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)



        statetomo_block = PulseBlock(name=name)
        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                init_block.append(cN1pix_element)
            elif pulse =='0X':
                init_block.append(cN1pihalfx_element)
            elif pulse =='0Y':
                init_block.append(cN1pihalfy_element)

            elif pulse =='10':
                init_block.append(NVpix_element)
            elif pulse =='11':
                init_block.append(cN1pix_element)
                init_block.append(NVpix_element)
            elif pulse =='1X':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpix_element)
            elif pulse =='1Y':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpix_element)

            elif pulse =='X0':
                init_block.append(NVpihalfx_element)
            elif pulse =='X1':
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XX':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XY':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(NVpihalfy_element)
            elif pulse =='Y1':
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YX':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YY':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CnNOTe':
                gate_block.append(cNVpix_element)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        if read_value == ['RO1']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO2']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (DD_Pi_N/4)

            for i in range(0, num_of_points):
                read_c0q2xblock = []
                read_ucq2xblock = []
                read_c0q2yblock = []
                read_ucq2yblock = []
                tau_countc0readx = 1
                tau_countc0ready = 1
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)


                for n in range(1, (i*int(DD_Pi_N / 4)) + 1):
                    if n % 4 == 1:
                        if n != 1:
                            del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                            # k=1
                            if tau_countc0readx % 2 != 0:
                                RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2xblock.append(tauidle_element)
                            read_c0q2xblock.append(RFtau_element)
                            read_c0q2xblock.append(tauidle_element)

                        else:

                            if tau_countc0readx % 2 != 0:
                                RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2xblock.append(tauidle_element)
                            read_c0q2xblock.append(RFtau_element)
                            read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpix_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=2

                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpiy_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=3
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    if n % 4 == 2:
                        del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                        # k=4
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpix_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=5
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpiy_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=6
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    if n % 4 == 3:
                        del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                        # k=7
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpiy_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=8
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpix_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=9
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    if n % 4 == 0:

                        del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                        # k=10
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpiy_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=11
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                        read_c0q2xblock.append(MWpix_element)
                        tau_countc0readx = tau_countc0readx + 1

                        # k=12
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                tau_countucreadx = (2 * (i*int(DD_Pi_N / 4))) + 1
                for n in range(1, (i*int(DD_Pi_N / 4)) + 1):
                    if n % 4 == 1:
                        if n != 1:
                            del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                            # k=1

                            RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2xblock.append(tauidle_element)
                            read_ucq2xblock.append(RFtau_element)
                            read_ucq2xblock.append(tauidle_element)

                        else:

                            RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2xblock.append(tauidle_element)
                            read_ucq2xblock.append(RFtau_element)
                            read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=2

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=3

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    if n % 4 == 2:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=4

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=5

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=6

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    if n % 4 == 3:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=7

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=8

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=9

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    if n % 4 == 0:

                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=10

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=11

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=12

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                for k, readx in enumerate(read_c0q2xblock):
                    statetomo_block.append(readx)
                for k, readx in enumerate(read_ucq2xblock):
                    statetomo_block.append(readx)
                for k, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)


                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)

                    for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                        if n % 4 == 1:
                            if n != 1:
                                del read_c0q2yblock[len(read_c0q2yblock) - 3:len(read_c0q2yblock)]
                                # k=1
                                if tau_countc0ready % 2 != 0:
                                    RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                                else:
                                    RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_c0q2yblock.append(tauidle_element)
                                read_c0q2yblock.append(RFtau_element)
                                read_c0q2yblock.append(tauidle_element)

                            else:

                                if tau_countc0ready % 2 != 0:
                                    RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                                else:
                                    RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_c0q2yblock.append(tauidle_element)
                                read_c0q2yblock.append(RFtau_element)
                                read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpix_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=2

                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpiy_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=3
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                        if n % 4 == 2:
                            del read_c0q2yblock[len(read_c0q2yblock) - 3:len(read_c0q2yblock)]
                            # k=4
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpix_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=5
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpiy_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=6
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                        if n % 4 == 3:
                            del read_c0q2yblock[len(read_c0q2yblock) - 3:len(read_c0q2yblock)]
                            # k=7
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpiy_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=8
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpix_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=9
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                        if n % 4 == 0:

                            del read_c0q2yblock[len(read_c0q2yblock) - 3:len(read_c0q2yblock)]
                            # k=10
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpiy_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=11
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                            read_c0q2yblock.append(MWpix_element)
                            tau_countc0ready = tau_countc0ready + 1

                            # k=12
                            if tau_countc0ready % 2 != 0:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc0ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c0q2yblock.append(tauidle_element)
                            read_c0q2yblock.append(RFtau_element)
                            read_c0q2yblock.append(tauidle_element)

                    tau_countucready = (2 * (i * int(DD_Pi_N / 4))) + 1
                    for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                        if n % 4 == 1:
                            if n != 1:
                                del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                                # k=1

                                RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_ucq2yblock.append(tauidle_element)
                                read_ucq2yblock.append(RFtau_element)
                                read_ucq2yblock.append(tauidle_element)

                            else:

                                RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_ucq2yblock.append(tauidle_element)
                                read_ucq2yblock.append(RFtau_element)
                                read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=2

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=3

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                        if n % 4 == 2:
                            del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                            # k=4

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=5

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=6

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                        if n % 4 == 3:
                            del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                            # k=7

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=8

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=9

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                        if n % 4 == 0:
                            del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                            # k=10

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=11

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=12

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                    for k, ready in enumerate(read_c0q2yblock):
                        statetomo_block.append(ready)
                    for k, ready in enumerate(read_ucq2yblock):
                        statetomo_block.append(ready)
                    for k, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO3']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (DD_Pi_N / 4)

            for i in range(0, num_of_points):
                read_c1q2xblock = []
                read_ucq2xblock = []
                read_c1q2yblock = []
                read_ucq2yblock = []
                tau_countc1readx = 1
                tau_countc1ready = 1
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)

                for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                    if n % 4 == 1:
                        if n != 1:
                            del read_c1q2xblock[len(read_c1q2xblock) - 3:len(read_c1q2xblock)]
                            # k=1
                            if tau_countc1readx % 2 == 0:
                                RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2xblock.append(tauidle_element)
                            read_c1q2xblock.append(RFtau_element)
                            read_c1q2xblock.append(tauidle_element)

                        else:

                            if tau_countc1readx % 2 == 0:
                                RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2xblock.append(tauidle_element)
                            read_c1q2xblock.append(RFtau_element)
                            read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpix_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=2

                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpiy_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=3
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                    if n % 4 == 2:
                        del read_c1q2xblock[len(read_c1q2xblock) - 3:len(read_c1q2xblock)]
                        # k=4
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpix_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=5
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpiy_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=6
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                    if n % 4 == 3:
                        del read_c1q2xblock[len(read_c1q2xblock) - 3:len(read_c1q2xblock)]
                        # k=7
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpiy_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=8
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpix_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=9
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                    if n % 4 == 0:

                        del read_c1q2xblock[len(read_c1q2xblock) - 3:len(read_c1q2xblock)]
                        # k=10
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpiy_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=11
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                        read_c1q2xblock.append(MWpix_element)
                        tau_countc1readx = tau_countc1readx + 1

                        # k=12
                        if tau_countc1readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 180 + 0, 360)
                        else:
                            RF_phase = np.mod(((tau_countc1readx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c1q2xblock.append(tauidle_element)
                        read_c1q2xblock.append(RFtau_element)
                        read_c1q2xblock.append(tauidle_element)

                tau_countucreadx = (2 * (i * int(DD_Pi_N / 4))) + 1
                for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                    if n % 4 == 1:
                        if n != 1:
                            del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                            # k=1

                            RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2xblock.append(tauidle_element)
                            read_ucq2xblock.append(RFtau_element)
                            read_ucq2xblock.append(tauidle_element)

                        else:

                            RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2xblock.append(tauidle_element)
                            read_ucq2xblock.append(RFtau_element)
                            read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=2

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=3

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    if n % 4 == 2:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=4

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=5

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=6

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    if n % 4 == 3:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=7

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=8

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=9

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    if n % 4 == 0:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=10

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpiy_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=11

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                        read_ucq2xblock.append(MWpix_element)
                        tau_countucreadx = tau_countucreadx + 1

                        # k=12

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + 0, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                for k, readx in enumerate(read_c1q2xblock):
                    statetomo_block.append(readx)
                for k, readx in enumerate(read_ucq2xblock):
                    statetomo_block.append(readx)
                for k, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)

                    for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                        if n % 4 == 1:
                            if n != 1:
                                del read_c1q2yblock[len(read_c1q2yblock) - 3:len(read_c1q2yblock)]
                                # k=1
                                if tau_countc1ready % 2 == 0:
                                    RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                                else:
                                    RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_c1q2yblock.append(tauidle_element)
                                read_c1q2yblock.append(RFtau_element)
                                read_c1q2yblock.append(tauidle_element)

                            else:

                                if tau_countc1ready % 2 == 0:
                                    RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                                else:
                                    RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_c1q2yblock.append(tauidle_element)
                                read_c1q2yblock.append(RFtau_element)
                                read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpix_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=2

                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpiy_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=3
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                        if n % 4 == 2:
                            del read_c1q2yblock[len(read_c1q2yblock) - 3:len(read_c1q2yblock)]
                            # k=4
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpix_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=5
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpiy_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=6
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                        if n % 4 == 3:
                            del read_c1q2yblock[len(read_c1q2yblock) - 3:len(read_c1q2yblock)]
                            # k=7
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpiy_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=8
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpix_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=9
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                        if n % 4 == 0:

                            del read_c1q2yblock[len(read_c1q2yblock) - 3:len(read_c1q2yblock)]
                            # k=10
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpiy_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=11
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                            read_c1q2yblock.append(MWpix_element)
                            tau_countc1ready = tau_countc1ready + 1

                            # k=12
                            if tau_countc1ready % 2 == 0:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 180 + 90, 360)
                            else:
                                RF_phase = np.mod(((tau_countc1ready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_c1q2yblock.append(tauidle_element)
                            read_c1q2yblock.append(RFtau_element)
                            read_c1q2yblock.append(tauidle_element)

                    tau_countucready = (2 * (i * int(DD_Pi_N / 4))) + 1
                    for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                        if n % 4 == 1:
                            if n != 1:
                                del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                                # k=1

                                RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_ucq2yblock.append(tauidle_element)
                                read_ucq2yblock.append(RFtau_element)
                                read_ucq2yblock.append(tauidle_element)

                            else:

                                RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                     increment=0,
                                                                     amp=RF_amp2,
                                                                     freq=RF_freq2,
                                                                     phase=RF_phase)

                                read_ucq2yblock.append(tauidle_element)
                                read_ucq2yblock.append(RFtau_element)
                                read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=2

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=3

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                        if n % 4 == 2:
                            del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                            # k=4

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=5

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=6

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                        if n % 4 == 3:
                            del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                            # k=7

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=8

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=9

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                        if n % 4 == 0:
                            del read_ucq2yblock[len(read_ucq2yblock) - 3:len(read_ucq2yblock)]
                            # k=10

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpiy_element)
                            tau_countucready = tau_countucready + 1

                            # k=11

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                            read_ucq2yblock.append(MWpix_element)
                            tau_countucready = tau_countucready + 1

                            # k=12

                            RF_phase = np.mod(((tau_countucready - 1) * phase) + 90, 360)

                            tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                            RFtau_element = self._get_rf_element(length=tau_pulse,
                                                                 increment=0,
                                                                 amp=RF_amp2,
                                                                 freq=RF_freq2,
                                                                 phase=RF_phase)

                            read_ucq2yblock.append(tauidle_element)
                            read_ucq2yblock.append(RFtau_element)
                            read_ucq2yblock.append(tauidle_element)

                    for k, ready in enumerate(read_c1q2yblock):
                        statetomo_block.append(ready)
                    for k, ready in enumerate(read_ucq2yblock):
                        statetomo_block.append(ready)
                    for k, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO4']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockC0q2):
                    statetomo_block.append(pulse)
                for i, pulse in enumerate(pulse_blockucq2):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockC0q2):
                        statetomo_block.append(pulse)
                    for i, pulse in enumerate(pulse_blockucq2):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO5']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockC1q2):
                    statetomo_block.append(pulse)
                for i, pulse in enumerate(pulse_blockucq2):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockC1q2):
                        statetomo_block.append(pulse)
                    for i, pulse in enumerate(pulse_blockucq2):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO6']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockucq2Pi):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockucq2Pi):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)




        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_QB2DDRFCal(self, name='QB2DDRFCal',
                                  RF_freq1=5.1e6,  RF_freq2=5.1e6, RF_amp2=0.02,  cyclesf=11, DD_Pi_N=6,
                                  rot_phase = 0.0, num_of_points=50, incl_pi_len = False,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()



        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        MWpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tau = cyclesf * (1 / RF_freq2) + 1.0e-9

        cycles = ((2 * np.pi * RF_freq2) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq2)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq2,
                                     RF_freq1,
                                     0.0,
                                     tau + (self.rabi_period/4),
                                     0)
        else:
            phase = self._inst_phase(RF_freq2,
                                     RF_freq1,
                                     0.0,
                                     tau,
                                     0)

        statetomo_block = PulseBlock(name=name)
        for i in range(0, num_of_points):
            read_c0q2xblock = []
            read_ucq2xblock = []

            tau_countc0readx = 1

            for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                if n % 4 == 1:
                    if n != 1:
                        del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                        # k=1
                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    else:

                        if tau_countc0readx % 2 != 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=2

                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=3
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                if n % 4 == 2:
                    del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                    # k=4
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=5
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=6
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                if n % 4 == 3:
                    del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                    # k=7
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=8
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=9
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                if n % 4 == 0:

                    del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                    # k=10
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=11
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=12
                    if tau_countc0readx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

            tau_countucreadx = (2 * (i * int(DD_Pi_N / 4))) + 1
            for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                if n % 4 == 1:
                    if n != 1:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=1

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    else:

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=2

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=3

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                if n % 4 == 2:
                    del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                    # k=4

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=5

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=6

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                if n % 4 == 3:
                    del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                    # k=7

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=8

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=9

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                if n % 4 == 0:
                    del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                    # k=10

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=11

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=12

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

            for k, readx in enumerate(read_c0q2xblock):
                statetomo_block.append(readx)
            for k, readx in enumerate(read_ucq2xblock):
                statetomo_block.append(readx)
            for k, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)

        tau_array = (0.0e-9) + np.arange(num_of_points) * (DD_Pi_N / 4)
        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers =  num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_QB2DDRFCal2(self, name='QB2DDRFCal2',
                                  RF_freq1=5.1e6,  RF_freq2=5.1e6, RF_amp2=0.02,  cyclesf=11, DD_Pi_N=6,
                                  rot_phase = 0.0, num_of_points=50, incl_pi_len = False,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()



        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        MWpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tau = cyclesf * (1 / RF_freq2) + 1.0e-9

        cycles = ((2 * np.pi * RF_freq2) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq2)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq2,
                                     RF_freq1,
                                     0.0,
                                     tau + (self.rabi_period/4),
                                     0)
        else:
            phase = self._inst_phase(RF_freq2,
                                     RF_freq1,
                                     0.0,
                                     tau,
                                     0)

        statetomo_block = PulseBlock(name=name)
        for i in range(0, num_of_points):
            read_c0q2xblock = []
            read_ucq2xblock = []

            tau_countc0readx = 1

            for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                if n % 4 == 1:
                    if n != 1:
                        del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                        # k=1
                        if tau_countc0readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    else:

                        if tau_countc0readx % 2 == 0:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                        else:
                            RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_c0q2xblock.append(tauidle_element)
                        read_c0q2xblock.append(RFtau_element)
                        read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=2

                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=3
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                if n % 4 == 2:
                    del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                    # k=4
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=5
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=6
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                if n % 4 == 3:
                    del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                    # k=7
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=8
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=9
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                if n % 4 == 0:

                    del read_c0q2xblock[len(read_c0q2xblock) - 3:len(read_c0q2xblock)]
                    # k=10
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpiy_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=11
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

                    read_c0q2xblock.append(MWpix_element)
                    tau_countc0readx = tau_countc0readx + 1

                    # k=12
                    if tau_countc0readx % 2 == 0:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0readx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_c0q2xblock.append(tauidle_element)
                    read_c0q2xblock.append(RFtau_element)
                    read_c0q2xblock.append(tauidle_element)

            tau_countucreadx = (2 * (i * int(DD_Pi_N / 4))) + 1
            for n in range(1, (i * int(DD_Pi_N / 4)) + 1):
                if n % 4 == 1:
                    if n != 1:
                        del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                        # k=1

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                        RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    else:

                        RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                        tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                        RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                        read_ucq2xblock.append(tauidle_element)
                        read_ucq2xblock.append(RFtau_element)
                        read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=2

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=3

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                if n % 4 == 2:
                    del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                    # k=4

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=5

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=6

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                if n % 4 == 3:
                    del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                    # k=7

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=8

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=9

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                if n % 4 == 0:
                    del read_ucq2xblock[len(read_ucq2xblock) - 3:len(read_ucq2xblock)]
                    # k=10

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpiy_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=11

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

                    read_ucq2xblock.append(MWpix_element)
                    tau_countucreadx = tau_countucreadx + 1

                    # k=12

                    RF_phase = np.mod(((tau_countucreadx - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    read_ucq2xblock.append(tauidle_element)
                    read_ucq2xblock.append(RFtau_element)
                    read_ucq2xblock.append(tauidle_element)

            statetomo_block.append(MWpix_element)
            for k, readx in enumerate(read_c0q2xblock):
                statetomo_block.append(readx)
            for k, readx in enumerate(read_ucq2xblock):
                statetomo_block.append(readx)
            statetomo_block.append(MWpix_element)
            for k, laser_trig in enumerate(laser_block):
                statetomo_block.append(laser_trig)
            statetomo_block.append(waiting_element)

        tau_array = (0.0e-9) + np.arange(num_of_points) * (DD_Pi_N / 4)
        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers =  num_of_points
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_TQQB12DDQPT2(self, name='TQQB12DDQPT2', Init_state=TQQPTstates.State00, Gate=Gates.NOOP, Readout=TQreadout.RO1,
                                  RF_freq1=5.1e6, RF_amp1=0.02, hyp_freq=5.096e6, RF_freq2=5.1e6, RF_amp2=0.02, RF_pi_len=20.0e-6, cyclesf=11, DD_Pi_N=6,
                                  rot_phase = 0.0, NV_freq=1.44e9, NV_freq2=1.44e9, NV_amp=0.05, NV_pi_len=2.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, incl_pi_len=False, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value
        read_value= Readout.value


        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        MWpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tau = cyclesf * (1 / RF_freq2) + 1.0e-9
        pulse_blockC0q2 = []
        pulse_blockDD = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq2) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq2)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq2,
                                     hyp_freq,
                                     0.0,
                                     tau + (self.rabi_period/4),
                                     0)
        else:
            phase = self._inst_phase(RF_freq2,
                                     hyp_freq,
                                     0.0,
                                     tau,
                                     0)

        pulse_blockucq2Pi = []
        pulse_blockDD2Pi = []
        tau_countucPi = 1
        for j in range(1, int(DD_Pi_N) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                    del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2Pi.append(tauidle_element)
                    pulse_blockucq2Pi.append(RFtau_element2)
                    pulse_blockucq2Pi.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2Pi.append(tauidle_element)
                    pulse_blockDD2Pi.append(DDidle_element2)
                    pulse_blockDD2Pi.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2Pi.append(tauidle_element)
                    pulse_blockucq2Pi.append(RFtau_element2)
                    pulse_blockucq2Pi.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2Pi.append(tauidle_element)
                    pulse_blockDD2Pi.append(DDidle_element2)
                    pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=4
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=7
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=10
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

        for n in range(1, int(DD_Pi_N/2)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, int(DD_Pi_N/2) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        pulse_blockDD2 = []
        tau_countuc = (2 * (DD_Pi_N/2)) + 1
        for j in range(1, int(DD_Pi_N/2) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

        pulse_blockC0q2pi_halfx = []
        pulse_blockDDpi_halfx= []
        tau_countc0pi_halfx = 1
        for n in range(1, int(DD_Pi_N/4)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                    del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                    #k=1
                    if tau_countc0pi_halfx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfx.append(tauidle_element)
                    pulse_blockC0q2pi_halfx.append(RFtau_element)
                    pulse_blockC0q2pi_halfx.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfx.append(tauidle_element)
                    pulse_blockDDpi_halfx.append(DDidle_element)
                    pulse_blockDDpi_halfx.append(tauidle_element)

                else:

                    if tau_countc0pi_halfx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfx.append(tauidle_element)
                    pulse_blockC0q2pi_halfx.append(RFtau_element)
                    pulse_blockC0q2pi_halfx.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfx.append(tauidle_element)
                    pulse_blockDDpi_halfx.append(DDidle_element)
                    pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=2

                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=3
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=4
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=5
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=6
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=7
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=8
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=9
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=10
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=11
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=12
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

        pulse_blockC1q2pi_halfx = []
        tau_countc1pi_halfx = 1
        for n in range(1, int(DD_Pi_N/4) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                    # k=1
                    if tau_countc1pi_halfx % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfx.append(tauidle_element)
                    pulse_blockC1q2pi_halfx.append(RFtau_element)
                    pulse_blockC1q2pi_halfx.append(tauidle_element)

                else:

                    if tau_countc1pi_halfx % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfx.append(tauidle_element)
                    pulse_blockC1q2pi_halfx.append(RFtau_element)
                    pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=2

                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=3
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=4
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=5
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=6
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=7
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=8
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=9
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=10
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=11
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=12
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

        pulse_blockucq2pi_halfx = []
        pulse_blockDD2pi_halfx = []
        tau_countucpi_halfx = (2 * (DD_Pi_N/4)) + 1
        for j in range(1, int(DD_Pi_N/4) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                    del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfx.append(tauidle_element)
                    pulse_blockucq2pi_halfx.append(RFtau_element2)
                    pulse_blockucq2pi_halfx.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfx.append(tauidle_element)
                    pulse_blockDD2pi_halfx.append(DDidle_element2)
                    pulse_blockDD2pi_halfx.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfx.append(tauidle_element)
                    pulse_blockucq2pi_halfx.append(RFtau_element2)
                    pulse_blockucq2pi_halfx.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfx.append(tauidle_element)
                    pulse_blockDD2pi_halfx.append(DDidle_element2)
                    pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=4
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=7
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=10
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)


        pulse_blockC0q2pi_halfy = []
        pulse_blockDDpi_halfy= []
        tau_countc0pi_halfy = 1
        for n in range(1, int(DD_Pi_N/4)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                    del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                    #k=1
                    if tau_countc0pi_halfy % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfy.append(tauidle_element)
                    pulse_blockC0q2pi_halfy.append(RFtau_element)
                    pulse_blockC0q2pi_halfy.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfy.append(tauidle_element)
                    pulse_blockDDpi_halfy.append(DDidle_element)
                    pulse_blockDDpi_halfy.append(tauidle_element)

                else:

                    if tau_countc0pi_halfy % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfy.append(tauidle_element)
                    pulse_blockC0q2pi_halfy.append(RFtau_element)
                    pulse_blockC0q2pi_halfy.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfy.append(tauidle_element)
                    pulse_blockDDpi_halfy.append(DDidle_element)
                    pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=2

                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=3
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=4
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=5
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=6
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=7
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=8
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=9
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=10
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=11
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=12
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)


        pulse_blockC1q2pi_halfy = []
        tau_countc1pi_halfy = 1
        for n in range(1, int(DD_Pi_N/4) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                    # k=1
                    if tau_countc1pi_halfy % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfy.append(tauidle_element)
                    pulse_blockC1q2pi_halfy.append(RFtau_element)
                    pulse_blockC1q2pi_halfy.append(tauidle_element)

                else:

                    if tau_countc1pi_halfy % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfy.append(tauidle_element)
                    pulse_blockC1q2pi_halfy.append(RFtau_element)
                    pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=2

                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=3
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=4
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=5
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=6
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=7
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=8
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=9
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=10
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=11
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=12
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

        pulse_blockucq2pi_halfy = []
        pulse_blockDD2pi_halfy = []
        tau_countucpi_halfy = (2 * (DD_Pi_N/4)) + 1
        for j in range(1, int(DD_Pi_N/4) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                    del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfy.append(tauidle_element)
                    pulse_blockucq2pi_halfy.append(RFtau_element2)
                    pulse_blockucq2pi_halfy.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfy.append(tauidle_element)
                    pulse_blockDD2pi_halfy.append(DDidle_element2)
                    pulse_blockDD2pi_halfy.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfy.append(tauidle_element)
                    pulse_blockucq2pi_halfy.append(RFtau_element2)
                    pulse_blockucq2pi_halfy.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfy.append(tauidle_element)
                    pulse_blockDD2pi_halfy.append(DDidle_element2)
                    pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=4
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=7
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=10
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)


        freqs = [RF_freq1, RF_freq2]
        amps = [RF_amp1, RF_amp2]
        phasesx = [0.0, 0.0]
        phasesy = [90.0, 90.0]

        Npix_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npiy_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        Npihalfx_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npihalfy_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        cNVpix_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpiy_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        cNVpihalfx_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpihalfy_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        NVpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NVpihalfx_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpihalfy_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NOOP_element = self._get_idle_element(length=NV_pi_len,
                                              increment=0)

        cN1pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1piy_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN1pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN2pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2piy_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)

        cN2pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)



        statetomo_block = PulseBlock(name=name)
        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                init_block.append(cN1pix_element)
            elif pulse =='0X':
                init_block.append(cN1pihalfx_element)
            elif pulse =='0Y':
                init_block.append(cN1pihalfy_element)

            elif pulse =='10':
                init_block.append(NVpix_element)
            elif pulse =='11':
                init_block.append(cN1pix_element)
                init_block.append(NVpix_element)
            elif pulse =='1X':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpix_element)
            elif pulse =='1Y':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpix_element)

            elif pulse =='X0':
                init_block.append(NVpihalfx_element)
            elif pulse =='X1':
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XX':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XY':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(NVpihalfy_element)
            elif pulse =='Y1':
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YX':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YY':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CnNOTe':
                gate_block.append(cNVpix_element)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        if read_value == ['RO1']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO2']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))
                for k, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)


                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))

                    for k, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO3']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(NVpix_element)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))

                for k, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(NVpix_element)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))


                    for k, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO4']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockC0q2):
                    statetomo_block.append(pulse)
                for i, pulse in enumerate(pulse_blockucq2):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockC0q2):
                        statetomo_block.append(pulse)
                    for i, pulse in enumerate(pulse_blockucq2):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO5']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockC1q2):
                    statetomo_block.append(pulse)
                for i, pulse in enumerate(pulse_blockucq2):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockC1q2):
                        statetomo_block.append(pulse)
                    for i, pulse in enumerate(pulse_blockucq2):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO6']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockucq2Pi):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockucq2Pi):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)




        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_TQQB12DDQPT3(self, name='TQQB12DDQPT3', Init_state=TQQPTstates.State00, Gate=Gates.NOOP, Readout=TQreadout.RO1,
                                  RF_freq1=5.1e6, RF_amp1=0.02, hyp_freq=5.096e6, RF_freq2=5.1e6, RF_amp2=0.02, RF_pi_len=20.0e-6, cyclesf=11, DD_Pi_N=6,
                                  rot_phase = 0.0, NV_freq=1.44e9, NV_freq2=1.44e9, NV_amp=0.05, NV_pi_len=2.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, incl_pi_len=False, alternating=True,
                                  laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value
        read_value= Readout.value


        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))

        MWpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        MWpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tau = cyclesf * (1 / RF_freq2) + 1.0e-9
        pulse_blockC0q2 = []
        pulse_blockDD = []
        tau_countc0 = 1
        cycles = ((2 * np.pi * RF_freq2) * (tau)) // (2 * np.pi)
        tau_pulse = (2 * np.pi * cycles) / (2 * np.pi * RF_freq2)
        tau_idle = ((tau) - tau_pulse) / 2
        if incl_pi_len:
            phase = self._inst_phase(RF_freq2,
                                     hyp_freq,
                                     0.0,
                                     tau + (self.rabi_period/4),
                                     0)
        else:
            phase = self._inst_phase(RF_freq2,
                                     hyp_freq,
                                     0.0,
                                     tau,
                                     0)

        pulse_blockucq2Pi = []
        pulse_blockDD2Pi = []
        tau_countucPi = 1
        for j in range(1, int(DD_Pi_N) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                    del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2Pi.append(tauidle_element)
                    pulse_blockucq2Pi.append(RFtau_element2)
                    pulse_blockucq2Pi.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2Pi.append(tauidle_element)
                    pulse_blockDD2Pi.append(DDidle_element2)
                    pulse_blockDD2Pi.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2Pi.append(tauidle_element)
                    pulse_blockucq2Pi.append(RFtau_element2)
                    pulse_blockucq2Pi.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2Pi.append(tauidle_element)
                    pulse_blockDD2Pi.append(DDidle_element2)
                    pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=4
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=7
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2Pi[len(pulse_blockucq2Pi) - 3:len(pulse_blockucq2Pi)]
                del pulse_blockDD2Pi[len(pulse_blockDD2Pi) - 3:len(pulse_blockDD2Pi)]
                # k=10
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpiy_element)
                pulse_blockDD2Pi.append(MWpiy_element)
                tau_countucPi = tau_countucPi + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

                pulse_blockucq2Pi.append(MWpix_element)
                pulse_blockDD2Pi.append(MWpix_element)
                tau_countucPi = tau_countucPi + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucPi - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2Pi.append(tauidle_element)
                pulse_blockucq2Pi.append(RFtau_element2)
                pulse_blockucq2Pi.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2Pi.append(tauidle_element)
                pulse_blockDD2Pi.append(DDidle_element2)
                pulse_blockDD2Pi.append(tauidle_element)

        for n in range(1, int(DD_Pi_N/2)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                    del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                    #k=1
                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                else:

                    if tau_countc0 % 2 != 0:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2.append(tauidle_element)
                    pulse_blockC0q2.append(RFtau_element)
                    pulse_blockC0q2.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD.append(tauidle_element)
                    pulse_blockDD.append(DDidle_element)
                    pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=2

                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=3
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=4
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=5
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=6
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=7
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=8
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=9
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2[len(pulse_blockC0q2)-3:len(pulse_blockC0q2)]
                del pulse_blockDD[len(pulse_blockDD) - 3:len(pulse_blockDD)]
                #k=10
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpiy_element)
                pulse_blockDD.append(MWpiy_element)
                tau_countc0 = tau_countc0 + 1

                #k=11
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

                pulse_blockC0q2.append(MWpix_element)
                pulse_blockDD.append(MWpix_element)
                tau_countc0 = tau_countc0 + 1

                #k=12
                if tau_countc0 % 2 != 0:
                    RF_phase = np.mod(((tau_countc0-1)*phase) + 180+rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc0-1)*phase)+rot_phase, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2.append(tauidle_element)
                pulse_blockC0q2.append(RFtau_element)
                pulse_blockC0q2.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD.append(tauidle_element)
                pulse_blockDD.append(DDidle_element)
                pulse_blockDD.append(tauidle_element)

        pulse_blockC1q2 = []
        tau_countc1 = 1
        for n in range(1, int(DD_Pi_N/2) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                    # k=1
                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                else:

                    if tau_countc1 % 2 == 0:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2.append(tauidle_element)
                    pulse_blockC1q2.append(RFtau_element)
                    pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=2

                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=3
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=4
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=5
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=6
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=7
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=8
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=9
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2[len(pulse_blockC1q2) - 3:len(pulse_blockC1q2)]
                # k=10
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpiy_element)
                tau_countc1 = tau_countc1 + 1

                # k=11
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

                pulse_blockC1q2.append(MWpix_element)
                tau_countc1 = tau_countc1 + 1

                # k=12
                if tau_countc1 % 2 == 0:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + 180 + rot_phase, 360)
                else:
                    RF_phase = np.mod(((tau_countc1 - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2.append(tauidle_element)
                pulse_blockC1q2.append(RFtau_element)
                pulse_blockC1q2.append(tauidle_element)

        pulse_blockucq2 = []
        pulse_blockDD2 = []
        tau_countuc = (2 * (DD_Pi_N/2)) + 1
        for j in range(1, int(DD_Pi_N/2) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                    del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2.append(tauidle_element)
                    pulse_blockucq2.append(RFtau_element2)
                    pulse_blockucq2.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2.append(tauidle_element)
                    pulse_blockDD2.append(DDidle_element2)
                    pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=2
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=3
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=4
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=5
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=6
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=7
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=8
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=9
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2[len(pulse_blockucq2) - 3:len(pulse_blockucq2)]
                del pulse_blockDD2[len(pulse_blockDD2) - 3:len(pulse_blockDD2)]
                # k=10
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpiy_element)
                pulse_blockDD2.append(MWpiy_element)
                tau_countuc = tau_countuc + 1

                # k=11
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

                pulse_blockucq2.append(MWpix_element)
                pulse_blockDD2.append(MWpix_element)
                tau_countuc = tau_countuc + 1

                # k=12
                RF_phase2 = np.mod(((tau_countuc - 1) * phase) + rot_phase, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2.append(tauidle_element)
                pulse_blockucq2.append(RFtau_element2)
                pulse_blockucq2.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2.append(tauidle_element)
                pulse_blockDD2.append(DDidle_element2)
                pulse_blockDD2.append(tauidle_element)

        pulse_blockC0q2pi_halfx = []
        pulse_blockDDpi_halfx= []
        tau_countc0pi_halfx = 1
        for n in range(1, int(DD_Pi_N/4)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                    del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                    #k=1
                    if tau_countc0pi_halfx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfx.append(tauidle_element)
                    pulse_blockC0q2pi_halfx.append(RFtau_element)
                    pulse_blockC0q2pi_halfx.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfx.append(tauidle_element)
                    pulse_blockDDpi_halfx.append(DDidle_element)
                    pulse_blockDDpi_halfx.append(tauidle_element)

                else:

                    if tau_countc0pi_halfx % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfx.append(tauidle_element)
                    pulse_blockC0q2pi_halfx.append(RFtau_element)
                    pulse_blockC0q2pi_halfx.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfx.append(tauidle_element)
                    pulse_blockDDpi_halfx.append(DDidle_element)
                    pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=2

                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=3
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=4
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=5
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=6
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=7
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=8
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=9
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2pi_halfx[len(pulse_blockC0q2pi_halfx)-3:len(pulse_blockC0q2pi_halfx)]
                del pulse_blockDDpi_halfx[len(pulse_blockDDpi_halfx) - 3:len(pulse_blockDDpi_halfx)]
                #k=10
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpiy_element)
                pulse_blockDDpi_halfx.append(MWpiy_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=11
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

                pulse_blockC0q2pi_halfx.append(MWpix_element)
                pulse_blockDDpi_halfx.append(MWpix_element)
                tau_countc0pi_halfx = tau_countc0pi_halfx + 1

                #k=12
                if tau_countc0pi_halfx % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase) + 180+0, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfx-1)*phase)+0, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfx.append(tauidle_element)
                pulse_blockC0q2pi_halfx.append(RFtau_element)
                pulse_blockC0q2pi_halfx.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfx.append(tauidle_element)
                pulse_blockDDpi_halfx.append(DDidle_element)
                pulse_blockDDpi_halfx.append(tauidle_element)

        pulse_blockC1q2pi_halfx = []
        tau_countc1pi_halfx = 1
        for n in range(1, int(DD_Pi_N/4) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                    # k=1
                    if tau_countc1pi_halfx % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfx.append(tauidle_element)
                    pulse_blockC1q2pi_halfx.append(RFtau_element)
                    pulse_blockC1q2pi_halfx.append(tauidle_element)

                else:

                    if tau_countc1pi_halfx % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfx.append(tauidle_element)
                    pulse_blockC1q2pi_halfx.append(RFtau_element)
                    pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=2

                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=3
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=4
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=5
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=6
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=7
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=8
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=9
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2pi_halfx[len(pulse_blockC1q2pi_halfx) - 3:len(pulse_blockC1q2pi_halfx)]
                # k=10
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpiy_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=11
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

                pulse_blockC1q2pi_halfx.append(MWpix_element)
                tau_countc1pi_halfx = tau_countc1pi_halfx + 1

                # k=12
                if tau_countc1pi_halfx % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 180 + 0, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfx.append(tauidle_element)
                pulse_blockC1q2pi_halfx.append(RFtau_element)
                pulse_blockC1q2pi_halfx.append(tauidle_element)

        pulse_blockucq2pi_halfx = []
        pulse_blockDD2pi_halfx = []
        tau_countucpi_halfx = (2 * (DD_Pi_N/4)) + 1
        for j in range(1, int(DD_Pi_N/4) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                    del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfx.append(tauidle_element)
                    pulse_blockucq2pi_halfx.append(RFtau_element2)
                    pulse_blockucq2pi_halfx.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfx.append(tauidle_element)
                    pulse_blockDD2pi_halfx.append(DDidle_element2)
                    pulse_blockDD2pi_halfx.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfx.append(tauidle_element)
                    pulse_blockucq2pi_halfx.append(RFtau_element2)
                    pulse_blockucq2pi_halfx.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfx.append(tauidle_element)
                    pulse_blockDD2pi_halfx.append(DDidle_element2)
                    pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=4
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=7
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2pi_halfx[len(pulse_blockucq2pi_halfx) - 3:len(pulse_blockucq2pi_halfx)]
                del pulse_blockDD2pi_halfx[len(pulse_blockDD2pi_halfx) - 3:len(pulse_blockDD2pi_halfx)]
                # k=10
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpiy_element)
                pulse_blockDD2pi_halfx.append(MWpiy_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)

                pulse_blockucq2pi_halfx.append(MWpix_element)
                pulse_blockDD2pi_halfx.append(MWpix_element)
                tau_countucpi_halfx = tau_countucpi_halfx + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucpi_halfx - 1) * phase) + 0, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfx.append(tauidle_element)
                pulse_blockucq2pi_halfx.append(RFtau_element2)
                pulse_blockucq2pi_halfx.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfx.append(tauidle_element)
                pulse_blockDD2pi_halfx.append(DDidle_element2)
                pulse_blockDD2pi_halfx.append(tauidle_element)


        pulse_blockC0q2pi_halfy = []
        pulse_blockDDpi_halfy= []
        tau_countc0pi_halfy = 1
        for n in range(1, int(DD_Pi_N/4)+1):
            if n%4==1:
                if n!=1:
                    del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                    del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                    #k=1
                    if tau_countc0pi_halfy % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)


                    tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfy.append(tauidle_element)
                    pulse_blockC0q2pi_halfy.append(RFtau_element)
                    pulse_blockC0q2pi_halfy.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfy.append(tauidle_element)
                    pulse_blockDDpi_halfy.append(DDidle_element)
                    pulse_blockDDpi_halfy.append(tauidle_element)

                else:

                    if tau_countc0pi_halfy % 2 != 0:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase)

                    pulse_blockC0q2pi_halfy.append(tauidle_element)
                    pulse_blockC0q2pi_halfy.append(RFtau_element)
                    pulse_blockC0q2pi_halfy.append(tauidle_element)

                    DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDDpi_halfy.append(tauidle_element)
                    pulse_blockDDpi_halfy.append(DDidle_element)
                    pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=2

                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)


                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=3
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=4
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=5
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=6
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=7
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=8
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=9
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC0q2pi_halfy[len(pulse_blockC0q2pi_halfy)-3:len(pulse_blockC0q2pi_halfy)]
                del pulse_blockDDpi_halfy[len(pulse_blockDDpi_halfy) - 3:len(pulse_blockDDpi_halfy)]
                #k=10
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2*tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpiy_element)
                pulse_blockDDpi_halfy.append(MWpiy_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=11
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)

                pulse_blockC0q2pi_halfy.append(MWpix_element)
                pulse_blockDDpi_halfy.append(MWpix_element)
                tau_countc0pi_halfy = tau_countc0pi_halfy + 1

                #k=12
                if tau_countc0pi_halfy % 2 != 0:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase) + 180+90, 360)
                else:
                    RF_phase = np.mod(((tau_countc0pi_halfy-1)*phase)+90, 360)


                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                pulse_blockC0q2pi_halfy.append(tauidle_element)
                pulse_blockC0q2pi_halfy.append(RFtau_element)
                pulse_blockC0q2pi_halfy.append(tauidle_element)

                DDidle_element = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDDpi_halfy.append(tauidle_element)
                pulse_blockDDpi_halfy.append(DDidle_element)
                pulse_blockDDpi_halfy.append(tauidle_element)


        pulse_blockC1q2pi_halfy = []
        tau_countc1pi_halfy = 1
        for n in range(1, int(DD_Pi_N/4) + 1):
            if n % 4 == 1:
                if n != 1:
                    del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                    # k=1
                    if tau_countc1pi_halfy % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                    RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfy.append(tauidle_element)
                    pulse_blockC1q2pi_halfy.append(RFtau_element)
                    pulse_blockC1q2pi_halfy.append(tauidle_element)

                else:

                    if tau_countc1pi_halfy % 2 == 0:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                    else:
                        RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                    RFtau_element = self._get_rf_element(length=tau_pulse,
                                                         increment=0,
                                                         amp=RF_amp2,
                                                         freq=RF_freq2,
                                                         phase=RF_phase)

                    pulse_blockC1q2pi_halfy.append(tauidle_element)
                    pulse_blockC1q2pi_halfy.append(RFtau_element)
                    pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=2

                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=3
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 2:
                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=4
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=5
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=6
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 3:
                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=7
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=8
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=9
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

            if n % 4 == 0:

                del pulse_blockC1q2pi_halfy[len(pulse_blockC1q2pi_halfy) - 3:len(pulse_blockC1q2pi_halfy)]
                # k=10
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpiy_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=11
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=2 * tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

                pulse_blockC1q2pi_halfy.append(MWpix_element)
                tau_countc1pi_halfy = tau_countc1pi_halfy + 1

                # k=12
                if tau_countc1pi_halfy % 2 == 0:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 180 + 90, 360)
                else:
                    RF_phase = np.mod(((tau_countc1pi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)
                RFtau_element = self._get_rf_element(length=tau_pulse,
                                                     increment=0,
                                                     amp=RF_amp2,
                                                     freq=RF_freq2,
                                                     phase=RF_phase)

                pulse_blockC1q2pi_halfy.append(tauidle_element)
                pulse_blockC1q2pi_halfy.append(RFtau_element)
                pulse_blockC1q2pi_halfy.append(tauidle_element)

        pulse_blockucq2pi_halfy = []
        pulse_blockDD2pi_halfy = []
        tau_countucpi_halfy = (2 * (DD_Pi_N/4)) + 1
        for j in range(1, int(DD_Pi_N/4) + 1):
            if j % 4 == 1:
                if j != 1:
                    del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                    del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                    # k=1
                    RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)
                    RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfy.append(tauidle_element)
                    pulse_blockucq2pi_halfy.append(RFtau_element2)
                    pulse_blockucq2pi_halfy.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfy.append(tauidle_element)
                    pulse_blockDD2pi_halfy.append(DDidle_element2)
                    pulse_blockDD2pi_halfy.append(tauidle_element)

                else:
                    RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                    tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                    RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                             increment=0,
                                                             amp=RF_amp2,
                                                             freq=RF_freq2,
                                                             phase=RF_phase2)

                    pulse_blockucq2pi_halfy.append(tauidle_element)
                    pulse_blockucq2pi_halfy.append(RFtau_element2)
                    pulse_blockucq2pi_halfy.append(tauidle_element)

                    DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                    pulse_blockDD2pi_halfy.append(tauidle_element)
                    pulse_blockDD2pi_halfy.append(DDidle_element2)
                    pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=2
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=3
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 2:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=4
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=5
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=6
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 3:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=7
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=8
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=9
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

            if j % 4 == 0:
                del pulse_blockucq2pi_halfy[len(pulse_blockucq2pi_halfy) - 3:len(pulse_blockucq2pi_halfy)]
                del pulse_blockDD2pi_halfy[len(pulse_blockDD2pi_halfy) - 3:len(pulse_blockDD2pi_halfy)]
                # k=10
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpiy_element)
                pulse_blockDD2pi_halfy.append(MWpiy_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=11
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=2 * tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=2 * tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=2 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)

                pulse_blockucq2pi_halfy.append(MWpix_element)
                pulse_blockDD2pi_halfy.append(MWpix_element)
                tau_countucpi_halfy = tau_countucpi_halfy + 1

                # k=12
                RF_phase2 = np.mod(((tau_countucpi_halfy - 1) * phase) + 90, 360)

                tauidle_element = self._get_idle_element(length=tau_idle, increment=0)

                RFtau_element2 = self._get_rf_element(length=tau_pulse,
                                                          increment=0,
                                                          amp=RF_amp2,
                                                          freq=RF_freq2,
                                                          phase=RF_phase2)

                pulse_blockucq2pi_halfy.append(tauidle_element)
                pulse_blockucq2pi_halfy.append(RFtau_element2)
                pulse_blockucq2pi_halfy.append(tauidle_element)

                DDidle_element2 = self._get_idle_element(length=1 * tau_pulse, increment=0)

                pulse_blockDD2pi_halfy.append(tauidle_element)
                pulse_blockDD2pi_halfy.append(DDidle_element2)
                pulse_blockDD2pi_halfy.append(tauidle_element)


        freqs = [RF_freq1, RF_freq2]
        amps = [RF_amp1, RF_amp2]
        phasesx = [0.0, 0.0]
        phasesy = [90.0, 90.0]

        Npix_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npiy_element = self._get_multiple_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        Npihalfx_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesx)

        Npihalfy_element = self._get_multiple_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amps=amps,
                                           freqs=freqs,
                                           phases=phasesy)

        cNVpix_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpiy_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        cNVpihalfx_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpihalfy_element = self._get_mw_element(length=NV_pi_len/2,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=90)

        NVpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NVpihalfx_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpihalfy_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NOOP_element = self._get_idle_element(length=NV_pi_len,
                                              increment=0)

        cN1pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1piy_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN1pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)

        cN2pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2piy_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)

        cN2pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=0)

        cN2pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp2,
                                           freq=RF_freq2,
                                           phase=90)



        statetomo_block = PulseBlock(name=name)
        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                init_block.append(cN1pix_element)
            elif pulse =='0X':
                init_block.append(cN1pihalfx_element)
            elif pulse =='0Y':
                init_block.append(cN1pihalfy_element)

            elif pulse =='10':
                init_block.append(NVpix_element)
            elif pulse =='11':
                init_block.append(cN1pix_element)
                init_block.append(NVpix_element)
            elif pulse =='1X':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpix_element)
            elif pulse =='1Y':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpix_element)

            elif pulse =='X0':
                init_block.append(NVpihalfx_element)
            elif pulse =='X1':
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XX':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XY':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(NVpihalfy_element)
            elif pulse =='Y1':
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YX':
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YY':
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CnNOTe':
                gate_block.append(cNVpix_element)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        if read_value == ['RO1']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO2']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))
                for k, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)


                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))

                    for k, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO3']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(NVpix_element)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))

                for k, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(NVpix_element)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))


                    for k, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO4']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(cNVpix_element)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(cNVpix_element)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO5']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(NVpix_element)
                statetomo_block.append(cNVpix_element)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(NVpix_element)
                    statetomo_block.append(cNVpix_element)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO6']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                for i, pulse in enumerate(pulse_blockucq2Pi):
                    statetomo_block.append(pulse)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    for i, pulse in enumerate(pulse_blockucq2Pi):
                        statetomo_block.append(pulse)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)




        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_TQQB13DDQPT3(self, name='TQQB13DDQPT3',NV_ms1=True, Init_state=TQQPTstates.State00,
                              Gate=Gates.NOOP, tau_condX=0.5e-6, pihalfX_order=4,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, num_of_points=50,
                             cNV_freq=1444.0e6, cNV_amp=0.001, cNV_pi=2.4e-6, tau_step=20.0e-9,
                         polariz=True, num_pol=2, Read_state=TQQPTReadstates.ReadXI, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks

        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value
        read_value = Read_state.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)

        ucpulseqX_list = []

        for k in range(1, uncond_pi_order+1):
            if k % 4 == 1:
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(pix_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(piy_element)
                ucpulseqX_list.append(tau_element)
            if k % 4 == 2:
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(pix_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(piy_element)
                ucpulseqX_list.append(tau_element)
            if k % 4 == 3:
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(piy_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(pix_element)
                ucpulseqX_list.append(tau_element)
            if k % 4 == 0:
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(piy_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(tau_element)
                ucpulseqX_list.append(pix_element)
                ucpulseqX_list.append(tau_element)

        ucpulseqXhalf_list = []

        for k in range(1, int(uncond_pi_order/2)+1):
            if k % 4 == 1:
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(pix_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(piy_element)
                ucpulseqXhalf_list.append(tau_element)
            if k % 4 == 2:
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(pix_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(piy_element)
                ucpulseqXhalf_list.append(tau_element)
            if k % 4 == 3:
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(piy_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(pix_element)
                ucpulseqXhalf_list.append(tau_element)
            if k % 4 == 0:
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(piy_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(tau_element)
                ucpulseqXhalf_list.append(pix_element)
                ucpulseqXhalf_list.append(tau_element)

        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                for i, init in enumerate(ucpulseqX_list):
                    init_block.append(init)
            elif pulse =='0X':
                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
            elif pulse =='0Y':
                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)

            elif pulse =='10':
                init_block.append(ucNVpix_element)
            elif pulse =='11':

                for i, init in enumerate(ucpulseqX_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)
            elif pulse =='1X':

                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)
            elif pulse =='1Y':

                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)

            elif pulse =='X0':
                init_block.append(ucNVpihalfx_element)
            elif pulse =='X1':

                for i, init in enumerate(ucpulseqX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)
            elif pulse =='XX':

                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)
            elif pulse =='XY':

                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(ucNVpihalfy_element)
            elif pulse =='Y1':

                for i, init in enumerate(ucpulseqX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)
            elif pulse =='YX':

                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)
            elif pulse =='YY':

                for i, init in enumerate(ucpulseqXhalf_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CeROTn2':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeNOTn':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(ucpulseqXhalf_list):
                    gate_block.append(gate)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        pulseq_list = []
        if read_value == ['IZ'] or read_value == ['IX'] or read_value == ['IY']:
            tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
            for tau in tau_array:
                if polariz:
                    for n in range(1, num_pol + 1):
                        xy8_block.append(initpihalf_element)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)
                        xy8_block.append(pihalfafterX_element)
                        for i, zopr in enumerate(pihalfZ_list):
                            xy8_block.append(zopr)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)

                        for i, laser_trig in enumerate(laser_block):
                            xy8_block.append(laser_trig)
                        xy8_block.append(delay_element)
                        xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, init_pulse in enumerate(init_block):
                    xy8_block.append(init_pulse)
                for i, gate_pulse in enumerate(gate_block):
                    xy8_block.append(gate_pulse)


                if NV_ms1:
                    xy8_block.append(pix_element)

                if read_value == ['IX']:
                    ###order of x and z changed on 8.01 after the first full run
                    for i, read in enumerate(pihalfZ_list):
                        xy8_block.append(read)
                    for i, read in enumerate(ucpulseqXhalf_list):
                        xy8_block.append(read)
                if read_value == ['IY']:
                    for i, read in enumerate(ucpulseqXhalf_list):
                        xy8_block.append(read)

                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)


        pulseq_list = []
        if read_value == ['ZI'] or read_value == ['XI'] or read_value == ['YI']:
            tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
            for tau in tau_array:
                if polariz:
                    for n in range(1, num_pol + 1):
                        xy8_block.append(initpihalf_element)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)
                        xy8_block.append(pihalfafterX_element)
                        for i, zopr in enumerate(pihalfZ_list):
                            xy8_block.append(zopr)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)

                        for i, laser_trig in enumerate(laser_block):
                            xy8_block.append(laser_trig)
                        xy8_block.append(delay_element)
                        xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, init_pulse in enumerate(init_block):
                    xy8_block.append(init_pulse)
                for i, gate_pulse in enumerate(gate_block):
                    xy8_block.append(gate_pulse)

                if NV_ms1:
                    xy8_block.append(pix_element)

                if read_value == ['YI']:
                    xy8_block.append(ucNVpihalfx_element)


                if read_value == ['XI']:
                    xy8_block.append(ucNVpihalfy_element)


                xy8_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=cNV_amp,
                                                            freq=cNV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

        if read_value == ['ZZ'] or read_value == ['ZX'] or read_value == ['ZY']:
            tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
            for tau in tau_array:
                if polariz:
                    for n in range(1, num_pol + 1):
                        xy8_block.append(initpihalf_element)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)
                        xy8_block.append(pihalfafterX_element)
                        for i, zopr in enumerate(pihalfZ_list):
                            xy8_block.append(zopr)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)

                        for i, laser_trig in enumerate(laser_block):
                            xy8_block.append(laser_trig)
                        xy8_block.append(delay_element)
                        xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, init_pulse in enumerate(init_block):
                    xy8_block.append(init_pulse)
                for i, gate_pulse in enumerate(gate_block):
                    xy8_block.append(gate_pulse)

                if NV_ms1:
                    xy8_block.append(pix_element)

                if read_value == ['ZX']:
                    xy8_block.append(NOOP_element)

                if read_value == ['ZY']:
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)

                if read_value == ['ZZ']:
                    for i, pulselist in enumerate(ucpulseqXhalf_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)

                xy8_block.append(ucNVpihalfy_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)


        if read_value == ['XX'] or read_value == ['XY'] or read_value == ['XZ']:
            tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
            for tau in tau_array:
                if polariz:
                    for n in range(1, num_pol + 1):
                        xy8_block.append(initpihalf_element)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)
                        xy8_block.append(pihalfafterX_element)
                        for i, zopr in enumerate(pihalfZ_list):
                            xy8_block.append(zopr)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)

                        for i, laser_trig in enumerate(laser_block):
                            xy8_block.append(laser_trig)
                        xy8_block.append(delay_element)
                        xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, init_pulse in enumerate(init_block):
                    xy8_block.append(init_pulse)
                for i, gate_pulse in enumerate(gate_block):
                    xy8_block.append(gate_pulse)

                if NV_ms1:
                    xy8_block.append(pix_element)

                if read_value == ['XX']:
                    xy8_block.append(NOOP_element)

                if read_value == ['XY']:
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)

                if read_value == ['XZ']:
                    for i, pulselist in enumerate(ucpulseqXhalf_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)



                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=cNV_amp,
                                                            freq=cNV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

        if read_value == ['YX'] or read_value == ['YY'] or read_value == ['YZ']:
            tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
            for tau in tau_array:
                if polariz:
                    for n in range(1, num_pol + 1):
                        xy8_block.append(initpihalf_element)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)
                        xy8_block.append(pihalfafterX_element)
                        for i, zopr in enumerate(pihalfZ_list):
                            xy8_block.append(zopr)
                        for i, init in enumerate(pihalfX_list):
                            xy8_block.append(init)

                        for i, laser_trig in enumerate(laser_block):
                            xy8_block.append(laser_trig)
                        xy8_block.append(delay_element)
                        xy8_block.append(waiting_element)

                if NV_ms1:
                    xy8_block.append(pix_element)

                for i, init_pulse in enumerate(init_block):
                    xy8_block.append(init_pulse)
                for i, gate_pulse in enumerate(gate_block):
                    xy8_block.append(gate_pulse)

                if NV_ms1:
                    xy8_block.append(pix_element)

                if read_value == ['YX']:
                    xy8_block.append(NOOP_element)

                if read_value == ['YY']:
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)

                if read_value == ['YZ']:
                    for i, pulselist in enumerate(ucpulseqXhalf_list):
                        xy8_block.append(pulselist)
                    for i, pulselist in enumerate(pihalfZ_list):
                        xy8_block.append(pulselist)

                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)


        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = (num_pol+1) * (num_of_points +1)
            laser_list = [x for x in range(0, (num_pol+1) * (num_of_points+1), 1)]
            ignore_list = [laser_list[i] for i in range(len(laser_list)) if i%(num_pol+1)!=num_pol]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences


    def generate_TQQB14DDQPT3(self, name='TQQB14DDQPT3', Init_state=TQQPTstates.State00, Gate=Gates.NOOP, Readout=TQreadout.RO1,
                                  RF_freq1=5.1e6, RF_amp1=0.02, RF_pi_len=20.0e-6,
                                  NV_freq=1.44e9, NV_freq2=1.44e9, NV_amp=0.05, NV_pi_len=2.0e-6,
                                  tau_step=4.0e-9, num_of_points=50, alternating=True, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        state_value = Init_state.value
        gate_value = Gate.value
        read_value= Readout.value


        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time,
                                                 increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element = self._get_idle_element(length=self.laser_delay,
                                                 increment=0)

        MWpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        MWpiy_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)





        cNVpix_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq,
                                           phase=0)

        cNVpix2_element = self._get_mw_element(length=NV_pi_len,
                                           increment=0,
                                           amp=NV_amp,
                                           freq=NV_freq2,
                                           phase=0)



        NVpix_element = self._get_mw_element(length=self.rabi_period/2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)



        NVpihalfx_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)

        NVpihalfy_element = self._get_mw_element(length=self.rabi_period/4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)

        cN1pix_element = self._get_rf_element(length=RF_pi_len,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)



        cN1pihalfx_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=0)

        cN1pihalfy_element = self._get_rf_element(length=RF_pi_len/2,
                                           increment=0,
                                           amp=RF_amp1,
                                           freq=RF_freq1,
                                           phase=90)





        statetomo_block = PulseBlock(name=name)
        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                init_block.append(NVpix_element)
                init_block.append(cN1pix_element)
                init_block.append(NVpix_element)
            elif pulse =='0X':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpix_element)
            elif pulse =='0Y':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpix_element)

            elif pulse =='10':
                init_block.append(NVpix_element)
            elif pulse =='11':
                init_block.append(NVpix_element)
                init_block.append(cN1pix_element)
            elif pulse =='1X':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfx_element)
            elif pulse =='1Y':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfy_element)


            elif pulse =='X0':
                init_block.append(NVpihalfx_element)
            elif pulse =='X1':
                init_block.append(NVpix_element)
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XX':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfx_element)
            elif pulse =='XY':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(NVpihalfy_element)
            elif pulse =='Y1':
                init_block.append(NVpix_element)
                init_block.append(cN1pix_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YX':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfx_element)
                init_block.append(NVpihalfy_element)
            elif pulse =='YY':
                init_block.append(NVpix_element)
                init_block.append(cN1pihalfy_element)
                init_block.append(NVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CnNOTe':
                gate_block.append(cNVpix_element)
            if gate == 'CeNOTn':
                gate_block.append(cN1pix_element)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        if read_value == ['RO1']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO2']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(NVpix_element)
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))
                statetomo_block.append(cNVpix_element)
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)


                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(NVpix_element)
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))
                    statetomo_block.append(cNVpix_element)

                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO3']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for k, init in enumerate(init_block):
                    statetomo_block.append(init)
                for k, gate in enumerate(gate_block):
                    statetomo_block.append(gate)

                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=0))
                statetomo_block.append(cNVpix_element)

                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for k, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for k, gate in enumerate(gate_block):
                        statetomo_block.append(gate)

                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=90))
                    statetomo_block.append(cNVpix_element)

                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO4']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(NVpix_element)
                statetomo_block.append(cN1pix_element)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(NVpix_element)
                    statetomo_block.append(cN1pix_element)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO5']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(cN1pix_element)
                statetomo_block.append(self._get_mw_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=NV_amp,
                                                            freq=NV_freq,
                                                            phase=0))
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(cN1pix_element)
                    statetomo_block.append(self._get_mw_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=NV_amp,
                                                                freq=NV_freq,
                                                                phase=90))
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)

        if read_value == ['RO6']:
            tau_array = (0.0e-9) + np.arange(num_of_points) * (tau_step)
            for tau in tau_array:
                for i, init in enumerate(init_block):
                    statetomo_block.append(init)
                for i, gate in enumerate(gate_block):
                    statetomo_block.append(gate)
                statetomo_block.append(cN1pix_element)
                statetomo_block.append(cNVpix2_element)

                if gate_value == ['CnNOTe']:
                    read06phasex = self._inst_phase((NV_freq - NV_freq2),
                                                    (NV_freq),
                                                    0.0,
                                                    NV_pi_len,
                                                    0)
                else:
                    read06phasex = 0
                statetomo_block.append(self._get_rf_element(length=tau,
                                                            increment=0.0e-9,
                                                            amp=RF_amp1,
                                                            freq=RF_freq1,
                                                            phase=read06phasex))
                statetomo_block.append(cNVpix_element)
                for i, laser_trig in enumerate(laser_block):
                    statetomo_block.append(laser_trig)
                statetomo_block.append(waiting_element)

                if alternating:
                    for i, init in enumerate(init_block):
                        statetomo_block.append(init)
                    for i, gate in enumerate(gate_block):
                        statetomo_block.append(gate)
                    statetomo_block.append(cN1pix_element)
                    statetomo_block.append(cNVpix2_element)

                    if gate_value == ['CnNOTe']:
                        read06phasey = self._inst_phase((NV_freq - NV_freq2),
                                                       (NV_freq),
                                                       0.0,
                                                       NV_pi_len,
                                                       90)
                    else:
                        read06phasey = 90
                    statetomo_block.append(self._get_rf_element(length=tau,
                                                                increment=0.0e-9,
                                                                amp=RF_amp1,
                                                                freq=RF_freq1,
                                                                phase=read06phasey))
                    statetomo_block.append(cNVpix_element)
                    for i, laser_trig in enumerate(laser_block):
                        statetomo_block.append(laser_trig)
                    statetomo_block.append(waiting_element)




        created_blocks.append(statetomo_block)
        # Create block ensemble

        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((statetomo_block.name, 0))

        # Create and append sync trigger block if needed
        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        number_of_lasers = 2 * num_of_points if alternating else num_of_points
        block_ensemble.measurement_information['alternating'] = alternating
        block_ensemble.measurement_information['laser_ignore_list'] = list()
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_TQQB13ADDQPT3(self, name='TQQB13ADDQPT3',NV_ms1=True, Init_state=TQQPTstates.State00,
                              Gate=Gates.NOOP, tau_condX=0.5e-6, pihalfX_order=4, f1_c=1.0,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, f1_uc=1.0, num_of_points=50, multiplicity=1,
                             cNV_freq=1444.0e6, cNV_amp=0.001, cNV_pi=2.4e-6, tau_step=20.0e-9,
                         polariz=True, num_pol=2,  Read_state=TQQPTReadstates.ReadXI, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks

        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value
        read_value = Read_state.value

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)

        spacingsc = self._get_axy_spacing(f1e=f1_c, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsc = np.zeros(6, dtype='float64')
        tau_factorsc[0] = spacingsc[0]
        tau_factorsc[1] = spacingsc[1] - spacingsc[0]
        tau_factorsc[2] = spacingsc[2] - spacingsc[1]
        tau_factorsc[3] = tau_factorsc[2]
        tau_factorsc[4] = tau_factorsc[1]
        tau_factorsc[5] = tau_factorsc[0]

        spacingsuc = self._get_axy_spacing(f1e=f1_uc, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsuc = np.zeros(6, dtype='float64')
        tau_factorsuc[0] = spacingsuc[0]
        tau_factorsuc[1] = spacingsuc[1] - spacingsuc[0]
        tau_factorsuc[2] = spacingsuc[2] - spacingsuc[1]
        tau_factorsuc[3] = tau_factorsuc[2]
        tau_factorsuc[4] = tau_factorsuc[1]
        tau_factorsuc[5] = tau_factorsuc[0]


        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)

        first_taucx = self._get_idle_element(
            length=1*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        last_taucx = self._get_idle_element(
            length=1*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        tau1cx_raw_element = self._get_idle_element(length=tau_factorsc[0] * 2 * tau_condX, increment=0)
        tau6cx_raw_element = self._get_idle_element(length=tau_factorsc[5] * 2 * tau_condX, increment=0)
        tau1cx_element = self._get_idle_element(
            length=tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau2cx_element = self._get_idle_element(
            length=tau_factorsc[1] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau3cx_element = self._get_idle_element(
            length=tau_factorsc[2] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau4cx_element = self._get_idle_element(
            length=tau_factorsc[3] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau5cx_element = self._get_idle_element(
            length=tau_factorsc[4] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau6cx_element = self._get_idle_element(
            length=tau_factorsc[5] * 2 * tau_condX - (self.rabi_period / 2), increment=0)

        first_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factorsuc[0] * 2 * tau_uncond, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factorsuc[5] * 2 * tau_uncond, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factorsuc[1] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factorsuc[2] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factorsuc[3] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factorsuc[4] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factorsuc[5] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)


        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)


        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []


        for n in range(1, pihalfX_order+1):
            if n % 2 !=0:
                if n!=1:
                    del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                    pihalfX_list.append(tau1cx_raw_element)
                if n == 1:
                    pihalfX_list.append(first_taucx)
                else:
                    pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # X
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(last_taucx)

            else:
                del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(last_taucx)


        ucpihalfX_list = []
        for n in range(1, int(uncond_pi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (uncond_pi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)



        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
            elif pulse =='0X':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
            elif pulse =='0Y':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)

            elif pulse =='10':
                init_block.append(ucNVpix_element)
            elif pulse =='11':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)
            elif pulse =='1X':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)
            elif pulse =='1Y':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)

            elif pulse =='X0':
                init_block.append(ucNVpihalfx_element)
            elif pulse =='X1':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)
            elif pulse =='XX':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)
            elif pulse =='XY':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(ucNVpihalfy_element)
            elif pulse =='Y1':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)
            elif pulse =='YX':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)
            elif pulse =='YY':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CeROTn2':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeNOTn':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(ucpihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeROTn2_2':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeROTn2_3':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)

            if gate == 'CeROTn2_4':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        pulseq_list = []

        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        for tau in tau_array:
            if polariz:
                for n in range(1, num_pol + 1):
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)



            for i, init_pulse in enumerate(init_block):
                xy8_block.append(init_pulse)
            if NV_ms1:
                xy8_block.append(pix_element)
            for i, gate_pulse in enumerate(gate_block):
                xy8_block.append(gate_pulse)
            if NV_ms1:
                xy8_block.append(pix_element)

            if read_value == ['IX']:
                ###order of x and z changed on 8.01 after the first full run
                for i, read in enumerate(pihalfZ_list):
                    xy8_block.append(read)
                for i, read in enumerate(ucpihalfX_list):
                    xy8_block.append(read)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
            if read_value == ['IY']:
                for i, read in enumerate(ucpihalfX_list):
                    xy8_block.append(read)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
            if read_value == ['IZ']:
                xy8_block.append(NOOP_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YI']:
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))


            if read_value == ['XI']:
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZI']:
                xy8_block.append(NOOP_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZX']:
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(NOOP_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZY']:
                xy8_block.append(ucNVpihalfy_element)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZZ']:
                xy8_block.append(ucNVpihalfy_element)
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['XX']:
                xy8_block.append(NOOP_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['XY']:
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['XZ']:
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YX']:
                xy8_block.append(NOOP_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YY']:
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YZ']:
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))


            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)





        created_blocks.append(xy8_block)

        # Create block ensemble
        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = (num_pol+1) * (num_of_points +1)
            laser_list = [x for x in range(0, (num_pol+1) * (num_of_points+1), 1)]
            ignore_list = [laser_list[i] for i in range(len(laser_list)) if i%(num_pol+1)!=num_pol]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_TQQB13ADDQPT4(self, name='TQQB13ADDQPT4',NV_ms1=True, Init_state=TQQPTstates.State00,
                              Gate=Gates.NOOP, tau_condX=0.5e-6, pihalfX_order=4,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, f1_uc=1.0, num_of_points=50, multiplicity=1,
                             cNV_freq=1444.0e6, cNV_amp=0.001, cNV_pi=2.4e-6, tau_step=20.0e-9,
                         polariz=True, num_pol=1,  Read_state=TQQPTReadstates.ReadXI, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks

        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        gate_value = Gate.value
        read_value = Read_state.value
        print(read_value)
        read_value = netobtain(read_value)
        print(read_value)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)


        spacingsuc = self._get_axy_spacing(f1e=f1_uc, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsuc = np.zeros(6, dtype='float64')
        tau_factorsuc[0] = spacingsuc[0]
        tau_factorsuc[1] = spacingsuc[1] - spacingsuc[0]
        tau_factorsuc[2] = spacingsuc[2] - spacingsuc[1]
        tau_factorsuc[3] = tau_factorsuc[2]
        tau_factorsuc[4] = tau_factorsuc[1]
        tau_factorsuc[5] = tau_factorsuc[0]


        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)


        first_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factorsuc[0] * 2 * tau_uncond, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factorsuc[5] * 2 * tau_uncond, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factorsuc[1] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factorsuc[2] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factorsuc[3] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factorsuc[4] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factorsuc[5] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)


        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)


        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 4 == 1:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 2:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 3:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)
            if n % 4 == 0:
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(piy_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(tauhalfX_element)
                pihalfX_list.append(pix_element)
                pihalfX_list.append(tauhalfX_element)


        ucpihalfX_list = []
        for n in range(1, int(uncond_pi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (uncond_pi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)



        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
            elif pulse =='0X':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
            elif pulse =='0Y':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)

            elif pulse =='10':
                init_block.append(ucNVpix_element)
            elif pulse =='11':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)
            elif pulse =='1X':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)
            elif pulse =='1Y':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpix_element)

            elif pulse =='X0':
                init_block.append(ucNVpihalfx_element)
            elif pulse =='X1':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)
            elif pulse =='XX':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)
            elif pulse =='XY':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfx_element)

            elif pulse =='Y0':
                init_block.append(ucNVpihalfy_element)
            elif pulse =='Y1':
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)
            elif pulse =='YX':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)
            elif pulse =='YY':

                for i, init in enumerate(pihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)
                init_block.append(ucNVpihalfy_element)

        gate_block = []
        for i, gate in enumerate(gate_value):
            if gate == 'CeROTn2':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeNOTn':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(ucpihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeROTn2_2':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            if gate == 'CeROTn2_3':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)

            if gate == 'CeROTn2_4':
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
                for i, gate in enumerate(pihalfX_list):
                    gate_block.append(gate)
            else:
                gate_block.append(self._get_idle_element(length=0.0e-9, increment=0))


        pulseq_list = []

        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        for tau in tau_array:
            if polariz:
                for n in range(1, num_pol + 1):
                    xy8_block.append(initpihalf_element)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)
                    xy8_block.append(pihalfafterX_element)
                    for i, zopr in enumerate(pihalfZ_list):
                        xy8_block.append(zopr)
                    for i, init in enumerate(pihalfX_list):
                        xy8_block.append(init)

                    for i, laser_trig in enumerate(laser_block):
                        xy8_block.append(laser_trig)
                    xy8_block.append(delay_element)
                    xy8_block.append(waiting_element)



            for i, init_pulse in enumerate(init_block):
                xy8_block.append(init_pulse)
            if NV_ms1:
                xy8_block.append(pix_element)
            for i, gate_pulse in enumerate(gate_block):
                xy8_block.append(gate_pulse)
            if NV_ms1:
                xy8_block.append(pix_element)

            if read_value == ['IX']:
                ###order of x and z changed on 8.01 after the first full run
                for i, read in enumerate(pihalfZ_list):
                    xy8_block.append(read)
                for i, read in enumerate(ucpihalfX_list):
                    xy8_block.append(read)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
            if read_value == ['IY']:
                for i, read in enumerate(ucpihalfX_list):
                    xy8_block.append(read)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))
            if read_value == ['IZ']:
                xy8_block.append(NOOP_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YI']:
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))


            if read_value == ['XI']:
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZI']:
                xy8_block.append(NOOP_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZX']:
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(NOOP_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZY']:
                xy8_block.append(ucNVpihalfy_element)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['ZZ']:
                xy8_block.append(ucNVpihalfy_element)
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['XX']:
                xy8_block.append(NOOP_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['XY']:
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['XZ']:
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YX']:
                xy8_block.append(NOOP_element)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YY']:
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))

            if read_value == ['YZ']:
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfy_element)
                xy8_block.append(self._get_mw_element(length=tau,
                                                      increment=0.0e-9,
                                                      amp=cNV_amp,
                                                      freq=cNV_freq,
                                                      phase=0))


            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)





        created_blocks.append(xy8_block)

        # Create block ensemble
        tau_array = (0.0e-9) + np.arange(num_of_points + 1) * (tau_step)
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = (num_pol+1) * (num_of_points +1)
            laser_list = [x for x in range(0, (num_pol+1) * (num_of_points+1), 1)]
            ignore_list = [laser_list[i] for i in range(len(laser_list)) if i%(num_pol+1)!=num_pol]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = tau_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences

    def generate_entanglecircuitQB13(self, name='entanglecircuitQB13',NV_ms1=True, Init_state=TQQPTstates.State00,
                              tau_condX=0.5e-6, pihalfX_order=4, f1_c=1.0,
                          tau_uncondZ=0.01e-6, pihalfZ_order=4, tau_uncond=20e-9, uncond_pi_order=6, f1_uc=1.0, num_of_points=10, angle_step=45,
                         polariz=True, Read_state=TQQPTReadstates.ReadIX, laser_on=20.0e-9, laser_off=60.0e-9):
        """

        """
        created_blocks = list()
        created_ensembles = list()
        created_sequences = list()

        # get tau array for measurement ticks

        # calculate "real" start length of tau due to finite pi-pulse length
        state_value = Init_state.value
        read_value = Read_state.value
        angle_array = (0) + np.arange(num_of_points + 1) * (angle_step)

        # create the elements
        waiting_element = self._get_idle_element(length=self.wait_time, increment=0)
        laser_block = []
        laser_reps = int(self.laser_length / (laser_on + laser_off))
        for n in range(laser_reps):
            laser_block.append(self._get_laser_element(length=laser_on, increment=0))
            laser_block.append(self._get_idle_element(length=laser_off, increment=0))
        delay_element =  self._get_idle_element(length=self.laser_delay, increment=0)

        initpihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        pihalf_element = self._get_mw_element(length=self.rabi_period / 4,
                                                  increment=0,
                                                  amp=self.microwave_amplitude,
                                                  freq=self.microwave_frequency,
                                                  phase=0)

        pihalfafterX_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=0)
        pihalf_read1_element = self._get_mw_element(length=self.rabi_period / 4,
                                                   increment=0,
                                                   amp=self.microwave_amplitude,
                                                   freq=self.microwave_frequency,
                                                   phase=0)
        pihalf_read2_element = self._get_mw_element(length=self.rabi_period / 4,
                                                    increment=0,
                                                    amp=self.microwave_amplitude,
                                                    freq=self.microwave_frequency,
                                                    phase=90)

        pix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        piy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpix_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpiy_element = self._get_mw_element(length=self.rabi_period / 2,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        ucNVpihalfx_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=0)
        ucNVpihalfy_element = self._get_mw_element(length=self.rabi_period / 4,
                                           increment=0,
                                           amp=self.microwave_amplitude,
                                           freq=self.microwave_frequency,
                                           phase=90)

        spacingsc = self._get_axy_spacing(f1e=f1_c, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsc = np.zeros(6, dtype='float64')
        tau_factorsc[0] = spacingsc[0]
        tau_factorsc[1] = spacingsc[1] - spacingsc[0]
        tau_factorsc[2] = spacingsc[2] - spacingsc[1]
        tau_factorsc[3] = tau_factorsc[2]
        tau_factorsc[4] = tau_factorsc[1]
        tau_factorsc[5] = tau_factorsc[0]

        spacingsuc = self._get_axy_spacing(f1e=f1_uc, f2e=0, f3e=0, f4e=0)
        # Determine a scale factor for each tau
        tau_factorsuc = np.zeros(6, dtype='float64')
        tau_factorsuc[0] = spacingsuc[0]
        tau_factorsuc[1] = spacingsuc[1] - spacingsuc[0]
        tau_factorsuc[2] = spacingsuc[2] - spacingsuc[1]
        tau_factorsuc[3] = tau_factorsuc[2]
        tau_factorsuc[4] = tau_factorsuc[1]
        tau_factorsuc[5] = tau_factorsuc[0]


        pihalf_element = self._get_mw_element(length=self.rabi_period/4,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=0)
        pix_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=30)
        pix_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_0_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=90)
        piy_30_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=120)
        piy_90_element = self._get_mw_element(length=self.rabi_period/2,
                                              increment=0,
                                              amp=self.microwave_amplitude,
                                              freq=self.microwave_frequency,
                                              phase=180)

        first_taucx = self._get_idle_element(
            length=1*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        last_taucx = self._get_idle_element(
            length=1*tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 4), increment=0)
        tau1cx_raw_element = self._get_idle_element(length=tau_factorsc[0] * 2 * tau_condX, increment=0)
        tau6cx_raw_element = self._get_idle_element(length=tau_factorsc[5] * 2 * tau_condX, increment=0)
        tau1cx_element = self._get_idle_element(
            length=tau_factorsc[0] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau2cx_element = self._get_idle_element(
            length=tau_factorsc[1] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau3cx_element = self._get_idle_element(
            length=tau_factorsc[2] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau4cx_element = self._get_idle_element(
            length=tau_factorsc[3] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau5cx_element = self._get_idle_element(
            length=tau_factorsc[4] * 2 * tau_condX - (self.rabi_period / 2), increment=0)
        tau6cx_element = self._get_idle_element(
            length=tau_factorsc[5] * 2 * tau_condX - (self.rabi_period / 2), increment=0)

        first_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        last_tauucx = self._get_idle_element(
            length=1*tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 4), increment=0)
        tau1ucx_raw_element = self._get_idle_element(length=tau_factorsuc[0] * 2 * tau_uncond, increment=0)
        tau6ucx_raw_element = self._get_idle_element(length=tau_factorsuc[5] * 2 * tau_uncond, increment=0)
        tau1ucx_element = self._get_idle_element(
            length=tau_factorsuc[0] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau2ucx_element = self._get_idle_element(
            length=tau_factorsuc[1] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau3ucx_element = self._get_idle_element(
            length=tau_factorsuc[2] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau4ucx_element = self._get_idle_element(
            length=tau_factorsuc[3] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau5ucx_element = self._get_idle_element(
            length=tau_factorsuc[4] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)
        tau6ucx_element = self._get_idle_element(
            length=tau_factorsuc[5] * 2 * tau_uncond - (self.rabi_period / 2), increment=0)


        tauhalfX_element = self._get_idle_element(length=tau_condX, increment=0)
        tauX_element = self._get_idle_element(length=2 * tau_condX, increment=0)

        tauhalfZ_element = self._get_idle_element(length=tau_uncondZ, increment=0)
        tauZ_element = self._get_idle_element(length=2 * tau_uncondZ, increment=0)

        tau_element = self._get_idle_element(length=tau_uncond, increment=0)
        NOOP_element = self._get_idle_element(length=0,
                                              increment=0)
        # Create block and append to created_blocks list
        xy8_block = PulseBlock(name=name)
        pihalfX_list = []

        for n in range(1, pihalfX_order+1):
            if n % 2 !=0:
                if n!=1:
                    del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                    pihalfX_list.append(tau1cx_raw_element)
                if n == 1:
                    pihalfX_list.append(first_taucx)
                else:
                    pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # X
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # Y
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(last_taucx)

            else:
                del pihalfX_list[len(pihalfX_list) - 1:len(pihalfX_list)]
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau1cx_raw_element)
                # Y
                pihalfX_list.append(tau1cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(piy_90_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(piy_0_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(piy_30_element)
                pihalfX_list.append(tau6cx_raw_element)
                # X
                pihalfX_list.append(tau6cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(tau5cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau4cx_element)
                pihalfX_list.append(pix_90_element)
                pihalfX_list.append(tau3cx_element)
                pihalfX_list.append(pix_0_element)
                pihalfX_list.append(tau2cx_element)
                pihalfX_list.append(pix_30_element)
                pihalfX_list.append(last_taucx)


        ucpihalfX_list = []
        for n in range(1, int(uncond_pi_order/2) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                    ucpihalfX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpihalfX_list.append(first_tauucx)
                else:
                    ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # X
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(last_tauucx)

            else:
                del ucpihalfX_list[len(ucpihalfX_list) - 1:len(ucpihalfX_list)]
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau1ucx_raw_element)
                # Y
                ucpihalfX_list.append(tau1ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(piy_90_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(piy_0_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(piy_30_element)
                ucpihalfX_list.append(tau6ucx_raw_element)
                # X
                ucpihalfX_list.append(tau6ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(tau5ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau4ucx_element)
                ucpihalfX_list.append(pix_90_element)
                ucpihalfX_list.append(tau3ucx_element)
                ucpihalfX_list.append(pix_0_element)
                ucpihalfX_list.append(tau2ucx_element)
                ucpihalfX_list.append(pix_30_element)
                ucpihalfX_list.append(last_tauucx)

        ucpiX_list = []
        for n in range(1, (uncond_pi_order) + 1):
            if n % 2 !=0:
                if n!=1:
                    del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                    ucpiX_list.append(tau1ucx_raw_element)
                if n == 1:
                    ucpiX_list.append(first_tauucx)
                else:
                    ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # X
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # Y
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(last_tauucx)

            else:
                del ucpiX_list[len(ucpiX_list) - 1:len(ucpiX_list)]
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau1ucx_raw_element)
                # Y
                ucpiX_list.append(tau1ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(piy_90_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(piy_0_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(piy_30_element)
                ucpiX_list.append(tau6ucx_raw_element)
                # X
                ucpiX_list.append(tau6ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(tau5ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau4ucx_element)
                ucpiX_list.append(pix_90_element)
                ucpiX_list.append(tau3ucx_element)
                ucpiX_list.append(pix_0_element)
                ucpiX_list.append(tau2ucx_element)
                ucpiX_list.append(pix_30_element)
                ucpiX_list.append(last_tauucx)

        pihalfZ_list = []

        for m in range(1, pihalfZ_order+1):
            if m % 4 == 1:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 2:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 3:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)
            if m % 4 == 0:
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(piy_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(tauhalfZ_element)
                pihalfZ_list.append(pix_element)
                pihalfZ_list.append(tauhalfZ_element)

        Z_list = []

        for m in range(1, (2*pihalfZ_order)+1):
            if m % 4 == 1:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 2:
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 3:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)
            if m % 4 == 0:
                Z_list.append(tauhalfZ_element)
                Z_list.append(piy_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(tauhalfZ_element)
                Z_list.append(pix_element)
                Z_list.append(tauhalfZ_element)


        init_block = []
        for i, pulse in enumerate(state_value):
            if pulse =='00':
                init_block.append(NOOP_element)
            elif pulse =='01':
                for i, init in enumerate(ucpiX_list):
                    init_block.append(init)
            elif pulse =='0X':
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
            elif pulse =='0Y':
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)

            elif pulse =='10':
                init_block.append(ucNVpix_element)
            elif pulse =='11':
                init_block.append(ucNVpix_element)
                for i, init in enumerate(ucpiX_list):
                    init_block.append(init)
            elif pulse =='1X':
                init_block.append(ucNVpix_element)
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
            elif pulse =='1Y':
                init_block.append(ucNVpix_element)
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)

            elif pulse =='X0':
                init_block.append(ucNVpihalfx_element)
            elif pulse =='X1':
                init_block.append(ucNVpihalfx_element)
                for i, init in enumerate(ucpiX_list):
                    init_block.append(init)
            elif pulse =='XX':
                init_block.append(ucNVpihalfx_element)
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
            elif pulse =='XY':
                init_block.append(ucNVpihalfx_element)
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)

            elif pulse =='Y0':
                init_block.append(ucNVpihalfy_element)
            elif pulse =='Y1':
                init_block.append(ucNVpihalfy_element)
                for i, init in enumerate(ucpiX_list):
                    init_block.append(init)
            elif pulse =='YX':
                init_block.append(ucNVpihalfy_element)
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
            elif pulse =='YY':
                init_block.append(ucNVpihalfy_element)
                for i, init in enumerate(ucpihalfX_list):
                    init_block.append(init)
                for i, init in enumerate(pihalfZ_list):
                    init_block.append(init)




        angle_array = (0) + np.arange(num_of_points + 1) * (angle_step)
        for angle in angle_array:
            if polariz:
                xy8_block.append(initpihalf_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalfafterX_element)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)

                for i, laser_trig in enumerate(laser_block):
                    xy8_block.append(laser_trig)
                xy8_block.append(delay_element)
                xy8_block.append(waiting_element)

            if NV_ms1:
                xy8_block.append(pix_element)

            for i, init_pulse in enumerate(init_block):
                xy8_block.append(init_pulse)

            xy8_block.append(ucNVpihalfx_element)
            for i, init in enumerate(pihalfX_list):
                xy8_block.append(init)
            UCQ1Rxphase_element = self._get_mw_element(length=(self.rabi_period / 4) * (angle / 90),
                                                       increment=0,
                                                       amp=self.microwave_amplitude,
                                                       freq=self.microwave_frequency,
                                                       phase=0)
            xy8_block.append(UCQ1Rxphase_element)
            xy8_block.append(ucNVpihalfx_element)
            if NV_ms1:
                xy8_block.append(pix_element)

            if read_value == ['IZ']:
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                for i, zopr in enumerate(pihalfZ_list):
                    xy8_block.append(zopr)
                xy8_block.append(pihalf_read1_element)
                for i, init in enumerate(pihalfX_list):
                    xy8_block.append(init)
                xy8_block.append(pihalf_read2_element)

            if read_value == ['ZI']:
                xy8_block.append(NOOP_element)

            if read_value == ['ZZ']:
                xy8_block.append(ucNVpihalfy_element)
                for i, pulselist in enumerate(ucpihalfX_list):
                    xy8_block.append(pulselist)
                for i, pulselist in enumerate(pihalfZ_list):
                    xy8_block.append(pulselist)
                for i, readcnot in enumerate(pihalfX_list):
                    xy8_block.append(readcnot)
                xy8_block.append(ucNVpihalfx_element)

            else:
                xy8_block.append(NOOP_element)


            for i, laser_trig in enumerate(laser_block):
                xy8_block.append(laser_trig)
            xy8_block.append(delay_element)
            xy8_block.append(waiting_element)

        created_blocks.append(xy8_block)

        # Create block ensemble
        block_ensemble = PulseBlockEnsemble(name=name, rotating_frame=True)
        block_ensemble.append((xy8_block.name, 0))

        self._add_trigger(created_blocks=created_blocks, block_ensemble=block_ensemble)

        # add metadata to invoke settings later on
        if polariz:
            number_of_lasers = 2 * (num_of_points +1)
            ignore_list = [x for x in range(0, 2 * (num_of_points+1), 2)]
        else:
            number_of_lasers = (num_of_points +1)
            ignore_list = list()
        block_ensemble.measurement_information['alternating'] = False
        block_ensemble.measurement_information['laser_ignore_list'] = ignore_list
        block_ensemble.measurement_information['controlled_variable'] = angle_array
        block_ensemble.measurement_information['units'] = ('s', '')
        block_ensemble.measurement_information['number_of_lasers'] = number_of_lasers
        block_ensemble.measurement_information['counting_length'] = self._get_ensemble_count_length(
            ensemble=block_ensemble, created_blocks=created_blocks)

        # append ensemble to created ensembles
        created_ensembles.append(block_ensemble)
        return created_blocks, created_ensembles, created_sequences






